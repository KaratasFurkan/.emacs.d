* Table of Contents :TOC_5:
- [[#about-this-configuration][About This Configuration]]
  - [[#find-this-file-first-of-all][Find This File First of All]]
  - [[#applying-changes][Applying Changes]]
- [[#package-manager][Package Manager]]
  - [[#package-repositories][Package Repositories]]
    - [[#initialize-package-repositories][Initialize package repositories]]
  - [[#use-package][Use Package]]
    - [[#install-use-package-if-not-installed][Install use-package if not installed]]
    - [[#always-install-packages-if-not-installed][Always install packages if not installed]]
    - [[#always-compile-packages-and-use-the-newest-version-available][Always compile packages, and use the newest version available.]]
- [[#better-defaults][Better Defaults]]
  - [[#disable][Disable]]
  - [[#enable][Enable]]
  - [[#other][Other]]
- [[#packages][Packages]]
  - [[#helm][Helm]]
  - [[#company][Company]]
  - [[#company-box][Company Box]]
  - [[#projectile][Projectile]]
  - [[#lsp-mode][LSP Mode]]
  - [[#eglot][Eglot]]
  - [[#magit][Magit]]
  - [[#doom-modeline][Doom Modeline]]
  - [[#multiple-cursors][Multiple Cursors]]
  - [[#which-key][Which Key]]
  - [[#hl-todo][hl-todo]]
  - [[#beacon][Beacon]]
  - [[#toc-org][toc-org]]
  - [[#vterm][vterm]]
  - [[#emacs-dashboard][Emacs Dashboard]]
- [[#appearance][Appearance]]
  - [[#font][Font]]
  - [[#disable-all-themes-before-loading-a-theme][Disable all themes before loading a theme]]
  - [[#i-use-doom-spacegrey][I use doom-spacegrey]]
  - [[#a-light-emacs-theme-thats-well-suited-for-org-mode][A light emacs theme that's well suited for org-mode]]
- [[#programming-languages][Programming Languages]]
  - [[#python][Python]]
- [[#keybindings][Keybindings]]
- [[#fun][Fun]]
- [[#experimental][Experimental]]

* About This Configuration
** Find This File First of All
#+BEGIN_SRC emacs-lisp
(defun fk/find-config ()
  "Open config file"
  (interactive)
  (find-file config-org))
(global-set-key (kbd "C-x c") 'fk/find-config)
#+END_SRC

** Applying Changes
To decrease startup time, I use a hook to export code blocks from my
literate config file every time on save. Yes it is bad to run the
function below even with unrelated files every time but I could not
find a better solution (I tried file local variables but it ask
permission to eval local variables every time). Since condition
checking executes in microseconds, it does not bother me.
#+BEGIN_SRC emacs-lisp
  (defun tangle-config ()
    "Export code blocks from my literate config file."
    (when (equal (buffer-file-name) config-org)
      (org-babel-tangle-file config-org config-el)))

  (add-hook 'after-save-hook 'tangle-config)
#+END_SRC

* Package Manager
** Package Repositories
*** Initialize package repositories
#+BEGIN_SRC emacs-lisp
  (require 'package)
  (setq package-archives '(("gnu" . "https://elpa.gnu.org/packages/")
			   ("melpa" . "https://melpa.org/packages/")
			   ("org" . "https://orgmode.org/elpa/")))
  (package-initialize)
#+END_SRC

** Use Package
*** Install use-package if not installed
#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
#+END_SRC

*** Always install packages if not installed
#+BEGIN_SRC emacs-lisp
(require 'use-package-ensure)
(setq use-package-always-ensure t
;;      use-package-always-defer t
)
#+END_SRC

*** Always compile packages, and use the newest version available.
#+BEGIN_SRC emacs-lisp
(use-package auto-compile
  :config (auto-compile-on-load-mode))
(setq load-prefer-newer t)
#+END_SRC

* Better Defaults
** Disable
#+BEGIN_SRC emacs-lisp
  (setq ring-bell-function 'ignore)
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (blink-cursor-mode -1)
#+END_SRC

** Enable
#+BEGIN_SRC emacs-lisp
  (delete-selection-mode)
  (show-paren-mode)
  (global-subword-mode)
  (global-hl-line-mode)
  (winner-mode)
  (save-place-mode)
  (column-number-mode)
#+END_SRC

** Other
#+BEGIN_SRC emacs-lisp
  (setq
   custom-file (concat user-emacs-directory ".custom.el") ; Don't load
   save-place-file (concat user-emacs-directory ".places")
   backup-directory-alist `(("." . ,(concat user-emacs-directory ".backups")))
   auto-save-file-name-transforms `((".*" ,(concat user-emacs-directory ".saves") t))
   gc-cons-threshold (* 1024 1024 20) ; 20mb
   truncate-lines t
   recenter-positions '(middle 0.2 top 0.8 bottom) ; C-l positions
   frame-resize-pixelwise t
   backup-by-copying t
   sentence-end-double-space nil
   require-final-newline t
   inhibit-startup-message t
   initial-scratch-message nil
   scroll-conservatively 10000 ; Smooth scrolling
   indent-tabs-mode nil
   show-trailing-whitespace t)

  (defalias 'yes-or-no-p 'y-or-n-p)

  (add-hook 'before-save-hook 'whitespace-cleanup)
  (add-hook 'prog-mode-hook 'display-line-numbers-mode)
#+END_SRC

* Packages
** Helm
#+BEGIN_SRC emacs-lisp
  (use-package helm
    :bind
    ("M-x" . helm-M-x)
    ("C-x C-f" . helm-find-files)
    ("C-x C-b" . helm-buffers-list)
    ("C-x b" . helm-buffers-list))
#+END_SRC

** Company
#+BEGIN_SRC emacs-lisp
  (use-package company
    :config
    (global-company-mode))
#+END_SRC

** Company Box
- TODO: icon & font sizes are broken.
#+BEGIN_SRC emacs-lisp
;;  (use-package company-box
;;    :hook (company-mode . company-box-mode))
#+END_SRC

** Projectile
#+BEGIN_SRC emacs-lisp
(use-package projectile)
#+END_SRC

** LSP Mode
** Eglot
#+BEGIN_SRC emacs-lisp
  (use-package eglot
    :defer t)
#+END_SRC

** Magit
#+BEGIN_SRC emacs-lisp
(use-package magit)
#+END_SRC

** Doom Modeline
#+BEGIN_SRC emacs-lisp
  (use-package doom-modeline
    :init
    (doom-modeline-mode 1))
#+END_SRC

** Multiple Cursors
#+BEGIN_SRC emacs-lisp
  (use-package multiple-cursors
    :init (setq mc/always-run-for-all t)
    :bind (("C-M-n" . mc/mark-next-like-this)
	   ("C-M-p" . mc/mark-previous-like-this)
	   ("C-M-S-n" . mc/skip-to-next-like-this)
	   ("C-M-S-p" . mc/skip-to-previous-like-this)
	   ("C-S-n" . mc/unmark-previous-like-this)
	   ("C-S-p" . mc/unmark-next-like-this)
	   ("C-M-<mouse-1>" . mc/add-cursor-on-click))
#+END_SRC

** Which Key
- TODO: Paging keybinding does not work.
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :config
    (which-key-mode))
#+END_SRC

** hl-todo
#+BEGIN_SRC emacs-lisp
(use-package hl-todo
  :init
  (global-hl-todo-mode))
#+END_SRC

** Beacon
- TODO: investigate beacon-push-mark.
#+BEGIN_SRC emacs-lisp
  (use-package beacon
    :init
    (setq beacon-color "#D18770")
    (beacon-mode 1))
#+END_SRC

** toc-org
#+BEGIN_SRC emacs-lisp
  (use-package toc-org
    :config
    (add-hook 'org-mode-hook 'toc-org-mode))
#+END_SRC

** vterm
#+BEGIN_SRC emacs-lisp
  (use-package vterm)
#+END_SRC

** Emacs Dashboard
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :defer nil
    :init
    (setq dashboard-startup-banner 'logo)
    (setq dashboard-set-heading-icons t)
    (setq dashboard-set-file-icons t)
    :config
    (dashboard-setup-startup-hook))
#+END_SRC

* Appearance
** Font
#+BEGIN_SRC emacs-lisp
(set-face-attribute 'default nil :family "Source Code Pro")
#+END_SRC

** Disable all themes before loading a theme
#+BEGIN_SRC emacs-lisp
  (defun disable-all-themes ()
    "disable all active themes."
    (dolist (theme custom-enabled-themes)
      (disable-theme theme)))

  (defadvice load-theme (before disable-themes-first activate)
    (disable-all-themes))
#+END_SRC

** I use doom-spacegrey
#+BEGIN_SRC emacs-lisp
(use-package doom-themes
  :config
  (load-theme 'doom-spacegrey t))
#+END_SRC

** A light emacs theme that's well suited for org-mode
#+BEGIN_SRC emacs-lisp
  (use-package poet-theme
    :defer t)
#+END_SRC

* Programming Languages
** Python
* Keybindings
#+BEGIN_SRC emacs-lisp
  (keyboard-translate ?\C-h ?\C-?) ;; Use shell-like backspace C-h
  (global-set-key (kbd "C-?") 'help-command)
  (global-set-key (kbd "M-o") 'other-window)
  (global-set-key (kbd "C-u") 'undo)
  (global-set-key (kbd "M-u") 'winner-undo)
  (global-set-key (kbd "M-U") 'winner-redo)
#+END_SRC

* Fun
* Experimental
#+BEGIN_SRC emacs-lisp
(add-hook 'emacs-lisp-mode-hook
	  (lambda ()
	    (use-package elisp-slime-nav
	      :bind (("M-." . elisp-slime-nav-find-elisp-thing-at-point)
		     ("M-รง" . pop-tag-mark)))))
#+END_SRC
