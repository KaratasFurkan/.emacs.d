#+TITLE: My Literate Emacs Config

* Screenshots
** Initial Screen (Dashboard)
[[./screenshots/dashboard.png]]

** Python Development
File explorer (treemacs), auto complete (company), git&github integration
(magit, forge), terminal (vterm, shell-pop), markdown, python interpreter
(ipython)
[[./screenshots/python.png]]
** Org Mode (and Olivetti)
[[./screenshots/org-mode_and_olivetti.png]]
** Helm & Which Key (Dired and Elisp Mode in the background)
[[./screenshots/helm-posframe.png]]

[[./screenshots/whichkey-posframe.png]]
* Table Of Contents :TOC:
- [[#screenshots][Screenshots]]
  - [[#initial-screen-dashboard][Initial Screen (Dashboard)]]
  - [[#python-development][Python Development]]
  - [[#org-mode-and-olivetti][Org Mode (and Olivetti)]]
  - [[#helm--which-key-dired-and-elisp-mode-in-the-background][Helm & Which Key (Dired and Elisp Mode in the background)]]
- [[#about][About]]
  - [[#installation][Installation]]
  - [[#initel][init.el]]
  - [[#early-initel][early-init.el]]
  - [[#applying-changes][Applying Changes]]
- [[#package-management][Package Management]]
  - [[#straight][Straight]]
    - [[#installation--initialization][Installation & Initialization]]
    - [[#settings][Settings]]
    - [[#notes][Notes]]
  - [[#use-package][Use-Package]]
    - [[#installation--straigt-integration][Installation & Straigt Integration]]
    - [[#notes-1][Notes]]
- [[#performance-optimization][Performance Optimization]]
  - [[#garbage-collection][Garbage Collection]]
  - [[#file-handler][File Handler]]
  - [[#others][Others]]
- [[#better-defaults][Better Defaults]]
  - [[#file-paths][File Paths]]
  - [[#general][General]]
  - [[#helpful][Helpful]]
  - [[#menu-style-keybindings][Menu Style Keybindings]]
  - [[#susudo][Su/Sudo]]
- [[#appearance][Appearance]]
  - [[#notes-2][Notes]]
  - [[#better-defaults-1][Better Defaults]]
  - [[#custom-functions][Custom Functions]]
    - [[#disable-all-themes][disable-all-themes]]
    - [[#darken-background][darken-background]]
    - [[#presentation-mode][presentation-mode]]
  - [[#remove-redundant-ui][Remove Redundant UI]]
  - [[#font][Font]]
    - [[#font-1][Font]]
    - [[#custom-functions-1][Custom Functions]]
      - [[#adjust-font-size][adjust-font-size]]
      - [[#increase-font-size][increase-font-size]]
      - [[#decrease-font-size][decrease-font-size]]
      - [[#reset-font-size][reset-font-size]]
    - [[#keybindings][Keybindings]]
  - [[#theme][Theme]]
    - [[#theme-1][Theme]]
    - [[#settings-1][Settings]]
      - [[#disable-all-themes-before-loading-a-theme][Disable all themes before loading a theme]]
      - [[#load-theme-without-annoying-confirmation][load-theme without annoying confirmation]]
    - [[#alternatives][Alternatives]]
      - [[#a-light-emacs-theme-thats-well-suited-for-org-mode][A light emacs theme that's well suited for org-mode]]
  - [[#mode-line][Mode Line]]
    - [[#doom-modeline][Doom Modeline]]
    - [[#anzu][Anzu]]
  - [[#window-dividers][Window Dividers]]
  - [[#page-break-lines][Page Break Lines]]
  - [[#trailing-white-space-][Trailing White Space-]]
  - [[#highlight-todos][Highlight TODOs]]
  - [[#beacon][Beacon]]
  - [[#all-the-icons][All The Icons]]
  - [[#highlight-indent-guides][Highlight Indent Guides]]
  - [[#shackle][Shackle]]
  - [[#zoom][Zoom]]
  - [[#emacs-dashboard][Emacs Dashboard]]
  - [[#stripe-buffer][Stripe Buffer]]
  - [[#fill-column-indicator][Fill Column Indicator]]
  - [[#line-numbers][Line Numbers]]
  - [[#dired-icons-][Dired Icons-]]
  - [[#rainbow-delimiters-][Rainbow Delimiters-]]
  - [[#helm-icons-][Helm Icons-]]
  - [[#symbol-overlay-][Symbol Overlay-]]
  - [[#olivetti][Olivetti]]
  - [[#emojify-][Emojify-]]
  - [[#tree-sitter][Tree Sitter]]
  - [[#visual-fill-column][Visual Fill Column]]
  - [[#color-identifiers-mode-][Color Identifiers Mode-]]
  - [[#goggles-mode-highlight-changes][Goggles Mode (Highlight Changes)]]
- [[#completion][Completion]]
  - [[#better-defaults-2][Better Defaults]]
  - [[#which-key-keybinding-completion][Which Key (Keybinding Completion)]]
  - [[#helm-general-completion--selection][Helm (General Completion & Selection)]]
    - [[#helm][Helm]]
    - [[#helm-projectile-][Helm Projectile-]]
    - [[#helm-ag-][Helm Ag-]]
    - [[#helm-xref-][Helm Xref-]]
    - [[#helm-swoop-][Helm Swoop-]]
    - [[#helm-descbinds][Helm Descbinds]]
    - [[#helm-icons--1][Helm Icons-]]
    - [[#helm-posframe][Helm Posframe]]
  - [[#company-code--text-completion][Company (Code & Text Completion)]]
    - [[#company][Company]]
    - [[#company-box][Company Box]]
    - [[#company-prescient][Company Prescient]]
  - [[#yasnippet-snippet-completion][YASnippet (Snippet Completion)]]
  - [[#emmet--snippet-completion-for-html--css][Emmet- (Snippet Completion for HTML & CSS)]]
- [[#search--navigation][Search & Navigation]]
  - [[#better-defaults-3][Better Defaults]]
  - [[#custom-functions-2][Custom Functions]]
    - [[#find-config][find-config]]
    - [[#go-scratch][go-scratch]]
    - [[#go-messages][go-messages]]
    - [[#go-home-][go-home-]]
    - [[#split-window-and-switch][split-window-and-switch]]
    - [[#generate-random-scratch][generate-random-scratch]]
    - [[#generate-random-org-scratch][generate-random-org-scratch]]
  - [[#keybindings-1][Keybindings]]
  - [[#recentf-recent-files][Recentf (Recent Files)]]
  - [[#winner-mode][Winner Mode]]
  - [[#ace-window][Ace Window]]
    - [[#dependents][Dependents]]
      - [[#helm-icons][Helm Icons]]
  - [[#winum][Winum]]
  - [[#mwim-move-where-i-mean][Mwim (Move Where I Mean)]]
  - [[#helm-projectile][Helm Projectile]]
  - [[#helm-ag][Helm Ag]]
  - [[#helm-xref][Helm Xref]]
  - [[#dumb-jump][Dumb Jump]]
  - [[#helm-swoop][Helm Swoop]]
  - [[#deadgrep][Deadgrep]]
  - [[#avy][Avy]]
  - [[#treemacs][Treemacs]]
    - [[#treemacs-1][Treemacs]]
    - [[#treemacs-projectile][Treemacs Projectile]]
  - [[#persp-mode][Persp Mode]]
  - [[#dired-sidebar-][Dired Sidebar-]]
  - [[#ibuffer-sidebar-][IBuffer Sidebar-]]
  - [[#block-nav][Block Nav]]
- [[#text-editing][Text Editing]]
  - [[#better-defaults-4][Better Defaults]]
  - [[#custom-functions-3][Custom Functions]]
    - [[#backward-kill-word-or-region][backward-kill-word-or-region]]
  - [[#keybindings-2][Keybindings]]
  - [[#undo-tree][Undo Tree]]
  - [[#trailing-white-space][Trailing White Space]]
  - [[#case-switching][Case Switching]]
  - [[#paren][Paren]]
  - [[#multiple-cursors][Multiple Cursors]]
  - [[#wrap-region][Wrap Region]]
  - [[#fill-unfill-paragraph][Fill-Unfill Paragraph]]
  - [[#expand-region][Expand Region]]
  - [[#flyspell-popup][Flyspell Popup]]
- [[#programming][Programming]]
  - [[#general-1][General]]
    - [[#better-defaults-5][Better Defaults]]
    - [[#custom-functions-4][Custom Functions]]
      - [[#align-comments][align-comments]]
      - [[#indent-buffer][indent-buffer]]
      - [[#comment-or-uncomment-region][comment-or-uncomment-region]]
    - [[#fill-column-indicator-][Fill Column Indicator-]]
    - [[#line-numbers-][Line Numbers-]]
    - [[#comments][Comments]]
    - [[#yasnippet-][YASnippet-]]
    - [[#projectile][Projectile]]
    - [[#flycheck][Flycheck]]
    - [[#language-server-protocol][Language Server Protocol]]
      - [[#eglot][Eglot]]
        - [[#eglot-1][Eglot]]
        - [[#eldoc-box][Eldoc Box]]
      - [[#lsp-mode][LSP Mode]]
        - [[#lsp-mode-1][LSP Mode]]
        - [[#lsp-ui][LSP UI]]
        - [[#lsp-pyright-][LSP Pyright-]]
    - [[#yasnippet-snippets][YASnippet-snippets]]
    - [[#rainbow-delimiters][Rainbow Delimiters]]
    - [[#color-identifiers-mode][Color Identifiers Mode]]
    - [[#symbol-overlay][Symbol Overlay]]
  - [[#emacs-lisp][Emacs Lisp]]
    - [[#elisp-slime-nav][Elisp Slime Nav]]
    - [[#aggressive-indent][Aggressive Indent]]
    - [[#lisp-data-mode][Lisp Data Mode]]
  - [[#python][Python]]
    - [[#python-1][Python]]
    - [[#pyvenv][Pyvenv]]
    - [[#import-magic][Import Magic]]
    - [[#black][Black]]
    - [[#isort][Isort]]
    - [[#lsp-pyright][LSP Pyright]]
  - [[#web-mode][Web Mode]]
    - [[#web-mode-html][Web Mode (HTML)]]
    - [[#emmet-mode][Emmet Mode]]
      - [[#emmet-mode-1][Emmet Mode]]
      - [[#helm-emmet][Helm Emmet]]
    - [[#company-web][Company Web]]
    - [[#json-mode][Json Mode]]
    - [[#prettier][Prettier]]
    - [[#auto-rename-tag][Auto Rename Tag]]
  - [[#javascript][JavaScript]]
    - [[#javascript-1][JavaScript]]
  - [[#go][Go]]
    - [[#go-mode][Go Mode]]
  - [[#c][C]]
- [[#tools][Tools]]
  - [[#dired][Dired]]
    - [[#dired-1][Dired]]
    - [[#dired-x][Dired-X]]
    - [[#dired-icons][Dired Icons]]
    - [[#dired-subtree][Dired Subtree]]
    - [[#dired-sidebar][Dired Sidebar]]
    - [[#ibuffer-sidebar][IBuffer Sidebar]]
    - [[#dired-show-readme][Dired Show Readme]]
    - [[#dired-posframe][Dired Posframe]]
    - [[#dired-recent][Dired Recent]]
  - [[#org][Org]]
    - [[#org-1][Org]]
    - [[#custom-functions-5][Custom Functions]]
      - [[#org-imenu][org-imenu]]
      - [[#org-screenshot][org-screenshot]]
      - [[#org-indent-src-block][org-indent-src-block]]
      - [[#org-sort-by-priority][org-sort-by-priority]]
    - [[#org-bullets][Org Bullets]]
    - [[#toc-org][Toc Org]]
    - [[#org-table-auto-align][Org Table Auto Align]]
    - [[#ob-async][ob-async]]
    - [[#org-pomodoro][Org Pomodoro]]
    - [[#org-roam][Org Roam]]
      - [[#org-roam-1][Org Roam]]
      - [[#org-roam-server][Org Roam Server]]
      - [[#company-org-roam][Company Org Roam]]
    - [[#org-fancy-priorities][Org Fancy Priorities]]
    - [[#org-tree-slide][Org Tree Slide]]
    - [[#org-export-twitter-bootstrap][Org Export Twitter Bootstrap]]
    - [[#valign-mode][Valign Mode]]
  - [[#version-control][Version Control]]
    - [[#magit][Magit]]
      - [[#magit-1][Magit]]
      - [[#magit-todos][Magit Todos]]
      - [[#magit-forge][Magit Forge]]
    - [[#diff-hl][diff-hl]]
    - [[#smerge--hydra][Smerge + Hydra]]
    - [[#git-link][Git Link]]
    - [[#git-timemachine][Git Timemachine]]
    - [[#git-blame-vc-msg][Git Blame (vc-msg)]]
  - [[#terminal-emulation][Terminal Emulation]]
    - [[#vterm][Vterm]]
    - [[#shell-pop][Shell Pop]]
  - [[#restclient][Restclient]]
    - [[#restclient-1][Restclient]]
    - [[#company-restclient][Company Restclient]]
    - [[#ob-restclient][ob-restclient]]
  - [[#eaf][EAF]]
  - [[#google-translate][Google Translate]]
  - [[#pdf][PDF]]
    - [[#pdf-tools][PDF Tools]]
    - [[#interleave][Interleave]]
    - [[#pdf-continuous-scroll-mode][PDF Continuous Scroll Mode]]
  - [[#emacs-screencast][Emacs Screencast]]
  - [[#slack][Slack]]
    - [[#slack-1][Slack]]
    - [[#emojify][Emojify]]
    - [[#alert][Alert]]
    - [[#helm-slack][Helm Slack]]
  - [[#plantuml][PlantUML]]
  - [[#xwwp-xwidget-webkit-enhancement][XWWP (Xwidget Webkit Enhancement)]]
- [[#file-modes][File Modes]]
  - [[#markdown][Markdown]]
  - [[#fish][Fish]]
  - [[#docker][Docker]]
    - [[#dockerfile][Dockerfile]]
    - [[#docker-compose][Docker Compose]]
  - [[#yaml][Yaml]]
  - [[#requirementstxt-pip][requirements.txt (pip)]]
  - [[#pdf-][PDF-]]
  - [[#gitignore][.gitignore]]
- [[#fun][Fun]]
  - [[#play-free-software-song][Play Free Software Song]]
  - [[#selectric-mode][Selectric Mode]]
  - [[#fireplace][Fireplace]]
  - [[#pacmacs][Pacmacs]]
  - [[#2048][2048]]
  - [[#artist-mode][Artist Mode]]
- [[#packages-i-almost-never-use-but-want-to-keep][Packages I almost never use but want to keep]]
  - [[#turkish-mode][Turkish Mode]]
  - [[#minimap][Minimap]]
  - [[#helm-system-packages][Helm System Packages]]
  - [[#dimmer][Dimmer]]
  - [[#focus][Focus]]
  - [[#command-log-mode][Command Log Mode]]
  - [[#keypression][Keypression]]
  - [[#literate-calc-mode][Literate Calc Mode]]
- [[#todos][TODOs]]
  - [[#explore][Explore]]
    - [[#packages-29][Packages]]
    - [[#blog-posts][Blog posts]]
- [[#some-other-emacs-configurations][Some Other Emacs Configurations]]

* About
** Installation
Clone this repository to ~/.emacs.d or ~/.config/emacs
#+BEGIN_SRC sh :tangle no
git clone https://github.com/KaratasFurkan/.emacs.d.git
#+END_SRC

Open Emacs and let the configuration install necessary packages.

Note: I use emacs 28.0.50 with feature/native-comp branch, most of this
configuration will work in old versions too but some parts needs emacs27+.

** init.el
init.el is just used to load literate config.
#+BEGIN_SRC emacs-lisp :tangle init.el
(defconst config-org (expand-file-name "README.org" user-emacs-directory))
(defconst config-el (expand-file-name "config.el" user-emacs-directory))

(unless (file-exists-p config-el)
  (require 'org)
  (org-babel-tangle-file config-org config-el))

(load-file config-el)
#+END_SRC

** early-init.el
Note that a few of the code blocks (mostly UI related) in this configuration
tangle to =early-init.el= instead of =config.el= (which is the elisp file
generated by this configuration) to get the effects in the very beginning of the
initialization.

** Applying Changes
#+BEGIN_SRC emacs-lisp
(defun tangle-config ()
  "Export code blocks from the literate config file
asynchronously."
  (interactive)
  ;; prevent emacs from killing until tangle-process finished
  (add-to-list 'kill-emacs-query-functions
               (lambda ()
                 (or (not (process-live-p (get-process "tangle-process")))
                     (y-or-n-p "\"tangle-config\" is running; kill it? "))))
  ;; tangle config asynchronously
  (fk/async-process
   (format "emacs %s --batch --eval '(org-babel-tangle nil \"%s\")'" config-org config-el)
   "tangle-process"))
#+END_SRC

If the current org file is the literate config file, add a local hook to tangle
code blocks on every save to update configuration.
#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook
          (lambda ()
            (if (equal (buffer-file-name) config-org)
                (fk/add-local-hook 'after-save-hook 'tangle-config))))
#+END_SRC

* Package Management
** Straight
*** Installation & Initialization
Taken from: https://github.com/raxod502/straight.el#getting-started
#+BEGIN_SRC emacs-lisp
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
#+END_SRC

*** Settings
To not increase Emacs startup time, check package modifications when packages
edited (with Emacs) or manually invoke =straight-check-all= command, instead of
checking modifications at startup.
#+BEGIN_SRC emacs-lisp
(setq straight-check-for-modifications '(check-on-save find-when-checking))
#+END_SRC

Straight uses symlinks in the =build= directory which causes
=xref-find-definition= to ask ="Symbolic link to Git-controlled source
file; follow link? (y or n)"= every time, to always answer =yes=, set
=vc-follow-symlinks= true.
#+BEGIN_SRC emacs-lisp
(setq vc-follow-symlinks t)
#+END_SRC

*** Notes
- =M-x straight-pull-all=: update all packages.
- =M-x straight-normalize-all=: restore all packages (remove local edits)
- =M-x straight-freeze-versions= and =M-x straight-thaw-versions= are like =pip
  freeze requirements.txt= and =pip install -r requirements.txt=
- To tell straight.el that you want to use the version of Org shipped with
  Emacs, rather than cloning the upstream repository:
(Note: ":tangle no")
#+BEGIN_SRC emacs-lisp :tangle no
(use-package org
  :straight (:type built-in))
#+END_SRC

** Use-Package
*** Installation & Straigt Integration
#+BEGIN_SRC emacs-lisp
;; Install `use-package'.
(straight-use-package 'use-package)

;; Install packages in `use-package' forms with `straight'. (not the built-in
;; package.el)
(setq straight-use-package-by-default t)

;; Key Chord functionality in use-package
(use-package use-package-chords
  :hook
  (dashboard-after-initialize . (lambda () (key-chord-mode 1))))
#+END_SRC

*** Notes
- Hooks in the =:hook= section, run in reverse order. Example:
(Note: ":tangle no")
#+BEGIN_SRC emacs-lisp :tangle no
(use-package package-name
  :hook
  (x-mode . last)
  (x-mode . second)
  (x-mode . first))
#+END_SRC

* Performance Optimization
A very nice source: https://github.com/hlissner/doom-emacs/blob/develop/docs/faq.org#how-does-doom-start-up-so-quickly
** Garbage Collection
Make startup faster by reducing the frequency of garbage collection.
Set gc-cons-threshold (the default is 800 kilobytes) to maximum value
available, to prevent any garbage collection from happening during
load time.

Note: tangle to early-init.el to make startup even faster
#+BEGIN_SRC emacs-lisp :tangle early-init.el
(setq gc-cons-threshold most-positive-fixnum)
#+END_SRC

Restore it to reasonable value after init. Also stop garbage collection during
minibuffer interaction (helm etc.).
#+BEGIN_SRC emacs-lisp
(defconst 1mb 1048576)
(defconst 20mb 20971520)
(defconst 30mb 31457280)
(defconst 50mb 52428800)

(defun fk/defer-garbage-collection ()
  (setq gc-cons-threshold most-positive-fixnum))

(defun fk/restore-garbage-collection ()
  (run-at-time 1 nil (lambda () (setq gc-cons-threshold 30mb))))

(add-hook 'emacs-startup-hook 'fk/restore-garbage-collection 100)
(add-hook 'minibuffer-setup-hook 'fk/defer-garbage-collection)
(add-hook 'minibuffer-exit-hook 'fk/restore-garbage-collection)

(setq read-process-output-max 1mb)  ;; lsp-mode's performance suggest
#+END_SRC

** File Handler
(Note: ":tangle early-init.el")
#+BEGIN_SRC emacs-lisp :tangle early-init.el
(defvar default-file-name-handler-alist file-name-handler-alist)
(setq file-name-handler-alist nil)

(add-hook 'emacs-startup-hook
          (lambda ()
            (setq file-name-handler-alist default-file-name-handler-alist)) 100)
#+END_SRC

** Others
Copied from Doom Emacs:
(Note: ":tangle early-init.el")
#+BEGIN_SRC emacs-lisp :tangle early-init.el
;; In Emacs 27+, package initialization occurs before `user-init-file' is
;; loaded, but after `early-init-file'. Doom handles package initialization, so
;; we must prevent Emacs from doing it early!
(setq package-enable-at-startup nil)
(advice-add #'package--ensure-init-file :override #'ignore)

;; Resizing the Emacs frame can be a terribly expensive part of changing the
;; font. By inhibiting this, we easily halve startup times with fonts that are
;; larger than the system default.
(setq frame-inhibit-implied-resize t)
#+END_SRC

* Better Defaults
** File Paths
Keep Emacs directory clean.
#+BEGIN_SRC emacs-lisp
(use-package no-littering
  :config
  (with-eval-after-load 'recentf
    (add-to-list 'recentf-exclude no-littering-var-directory)
    (add-to-list 'recentf-exclude no-littering-etc-directory))

  (setq auto-save-file-name-transforms  ; autosaved-file-name~
        `((".*" ,(no-littering-expand-var-file-name "auto-save/") t))

        custom-file (no-littering-expand-etc-file-name "custom.el"))

  (if (file-exists-p custom-file)
      (load-file custom-file))

  ;; no-littering changes default snippets directory, so i changed it back.
  (add-to-list 'yas-snippet-dirs
               (expand-file-name "snippets" user-emacs-directory)))
#+END_SRC

** General
#+BEGIN_SRC emacs-lisp
(setq-default
 ring-bell-function 'ignore            ; prevent beep sound.
 inhibit-startup-screen t              ; TODO: maybe better on early-init or performance?
 initial-major-mode 'fundamental-mode  ; TODO: maybe better on early-init or performance?
 initial-scratch-message nil           ; TODO: maybe better on early-init?
 create-lockfiles nil                  ; .#locked-file-name
 confirm-kill-processes nil            ; exit emacs without asking to kill processes
 backup-by-copying t                   ; prevent linked files
 require-final-newline t               ; always end files with newline
 delete-old-versions t                 ; don't ask to delete old backup files
 revert-without-query '(".*")          ; `revert-buffer' without confirmation
 uniquify-buffer-name-style 'forward)

(defalias 'yes-or-no-p 'y-or-n-p)

(global-auto-revert-mode)

(save-place-mode)

(global-so-long-mode)

(bind-key* "M-r" 'repeat)

(defun fk/add-local-hook (hook function)
  "Add buffer-local hook."
  (add-hook hook function :local t))

(defun fk/async-process (command &optional name filter)
  "Start an async process by running the COMMAND string with bash. Return the
process object for it.

NAME is name for the process. Default is \"async-process\".

FILTER is function that runs after the process is finished, its args should be
\"(process output)\". Default is just messages the output."
  (make-process
   :command `("bash" "-c" ,command)
   :name (if name name
           "async-process")
   :filter (if filter filter
             (lambda (process output) (message (s-trim output))))))

;; Examples:
;;
;; (fk/async-process "ls")
;;
;; (fk/async-process "ls" "my ls process"
;;                   (lambda (process output) (message "Output:\n\n%s" output)))
;;
;; (fk/async-process "unknown command")
#+END_SRC

** Helpful
A better, more detailed *help* buffer.
#+BEGIN_SRC emacs-lisp
(use-package helpful
  :bind
  (([remap describe-function] . helpful-callable)
   ([remap describe-variable] . helpful-variable)
   ([remap describe-key] . helpful-key)
   :map emacs-lisp-mode-map
   ("C-c C-d" . helpful-at-point)))
#+END_SRC

** Menu Style Keybindings
Menu style keybindings like Spacemacs.
#+BEGIN_SRC emacs-lisp
;; NOTE: I use F1 as C-h (paging & help).
(bind-keys*
 :prefix-map fk/menu-map
 :prefix "M-m"
 ("M-m" . which-key-show-full-major-mode)
 :map fk/menu-map :prefix-map buffers         :prefix "b"
 :map fk/menu-map :prefix-map comments        :prefix "c"
 :map fk/menu-map :prefix-map django          :prefix "d"
 :map fk/menu-map :prefix-map errors          :prefix "e"
 :map fk/menu-map :prefix-map files           :prefix "f"
 :map fk/menu-map :prefix-map org             :prefix "o"
 :map fk/menu-map :prefix-map text            :prefix "t"
 :map fk/menu-map :prefix-map version-control :prefix "v"
 :map fk/menu-map :prefix-map windows         :prefix "w")
#+END_SRC

** Su/Sudo
read-only files will be writable but if you attempt to save your modifications,
emacs will ask root user's password if needed.
#+BEGIN_SRC emacs-lisp
(use-package su
  :straight (:host github :repo "PythonNut/su.el")
  :config (su-mode))
#+END_SRC

* Appearance
** Notes
- To start Emacs maximized: =$ emacs -mm=
- To start Emacs fullscreen: =$ emacs -fs=

** Better Defaults
#+BEGIN_SRC emacs-lisp
(global-hl-line-mode)
(blink-cursor-mode -1)

(setq-default
 truncate-lines t
 frame-resize-pixelwise t  ; maximized emacs may not fit screen without this
 frame-title-format '((:eval
                       (let ((project-name (projectile-project-name)))
                         (unless (string= "-" project-name)
                           (format "%s| " project-name))))
                      "%b"))  ; project-name| file-name
#+END_SRC

** Custom Functions
*** disable-all-themes
#+BEGIN_SRC emacs-lisp
(defun fk/disable-all-themes ()
  "Disable all active themes."
  (interactive)
  (dolist (theme custom-enabled-themes)
    (disable-theme theme)))
#+END_SRC
*** darken-background
I use this to darken non-file buffers like treemacs, helm etc.
#+BEGIN_SRC emacs-lisp
(defun fk/darken-background ()
  "Darken the background of the buffer."
  (interactive)
  (face-remap-add-relative 'default :background fk/dark-color))
#+END_SRC

*** presentation-mode
#+BEGIN_SRC emacs-lisp
(define-minor-mode fk/presentation-mode
  "A global minor mode for presentations. Make things easy to see."
  :global t
  (if fk/presentation-mode
      (progn
        (fk/adjust-font-size 20)
        (dimmer-mode 1)
        (setq zoom-size '(100 . 30))
        (zoom-mode 1)
        (setq default-window-divider-default-bottom-width window-divider-default-bottom-width
              default-window-divider-default-right-width window-divider-default-right-width)
        (setq window-divider-default-bottom-width 7
              window-divider-default-right-width 7)
        (window-divider-mode 1)
        (setq fk/olivetti-fringe-face fk/darker-olivetti-fringe-face)
        (olivetti-mode 1)
        (goggles-mode 1))
    (fk/adjust-font-size 0)
    (dimmer-mode -1)
    (setq zoom-size fk/zoom-default-size)
    (zoom-mode -1)
    (setq window-divider-default-bottom-width default-window-divider-default-bottom-width
          window-divider-default-right-width default-window-divider-default-right-width)
    (window-divider-mode 1)
    (setq fk/olivetti-fringe-face fk/default-olivetti-fringe-face)
    (olivetti-mode 1)
    (goggles-mode -1)))
#+END_SRC

** Remove Redundant UI
(Note: ":tangle early-init.el")
#+BEGIN_SRC emacs-lisp :tangle early-init.el
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
;; Do not show default modeline until doom-modeline is loaded
(setq-default mode-line-format nil)
#+END_SRC

** Font
*** Font
#+BEGIN_SRC emacs-lisp :tangle early-init.el
(defconst fk/default-font-family "Source Code Pro")
(defconst fk/default-font-size 90)
(defconst fk/default-icon-size 15)

(defconst fk/variable-pitch-font-family "Noto Serif")
(defconst fk/variable-pitch-font-size 140)

(set-face-attribute 'default nil
                    :family fk/default-font-family
                    :height fk/default-font-size)

(set-face-attribute 'variable-pitch nil
                    :family fk/variable-pitch-font-family
                    :height fk/variable-pitch-font-size)

(set-face-attribute 'fixed-pitch-serif nil
                    ;; Characters with fixed pitch face do not shown when height
                    ;; is 90.
                    :height 100)
#+END_SRC

*** Custom Functions
**** adjust-font-size
#+BEGIN_SRC emacs-lisp
(defun fk/adjust-font-size (height)
  "Adjust font size by given height. If height is '0', reset font
size. This function also handles icons and modeline font sizes."
  (interactive "nHeight ('0' to reset): ")
  (let ((new-height (if (zerop height)
                        fk/default-font-size
                      (+ height (face-attribute 'default :height)))))
    (set-face-attribute 'default nil :height new-height)
    (set-face-attribute 'mode-line nil :height new-height)
    (set-face-attribute 'mode-line-inactive nil :height new-height)
    (message "Font size: %s" new-height))
  (let ((new-size (if (zerop height)
                      fk/default-icon-size
                    (+ (/ height 5) treemacs--icon-size))))
    (when (fboundp 'treemacs-resize-icons)
      (treemacs-resize-icons new-size))
    (when (fboundp 'company-box-icons-resize)
      (company-box-icons-resize new-size)))
  (when diff-hl-mode
    (diff-hl-maybe-redefine-bitmaps)))
#+END_SRC

**** increase-font-size
#+BEGIN_SRC emacs-lisp
(defun fk/increase-font-size ()
  "Increase font size by 0.5 (5 in height)."
  (interactive)
  (fk/adjust-font-size 5))
#+END_SRC

**** decrease-font-size
#+BEGIN_SRC emacs-lisp
(defun fk/decrease-font-size ()
  "Decrease font size by 0.5 (5 in height)."
  (interactive)
  (fk/adjust-font-size -5))
#+END_SRC

**** reset-font-size
#+BEGIN_SRC emacs-lisp
(defun fk/reset-font-size ()
  "Reset font size according to the `fk/default-font-size'."
  (interactive)
  (fk/adjust-font-size 0))
#+END_SRC

*** Keybindings
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C--") 'fk/decrease-font-size)
(global-set-key (kbd "C-*") 'fk/increase-font-size)
(global-set-key (kbd "C-0") 'fk/reset-font-size)
#+END_SRC

** Theme
*** Theme
#+BEGIN_SRC emacs-lisp
(use-package doom-themes
  :custom-face
  (font-lock-comment-face ((t (:slant italic))))
  (font-lock-string-face ((t (:foreground "PeachPuff3"))))
  (font-lock-function-name-face ((t (:foreground "LightGoldenrod"))))
  (highlight ((t (:underline t :background nil :foreground nil))))
  (lazy-highlight ((t (:background nil :foreground nil :box (:line-width -1)))))
  (fixed-pitch ((t (:family "Noto Sans Mono"))))
  :config
  (load-theme 'doom-spacegrey t)
  (defconst fk/font-color (face-attribute 'default :foreground))
  (defconst fk/background-color (face-attribute 'default :background))
  (defconst fk/dark-color (doom-darken fk/background-color 0.15))
  (defconst fk/dark-color1 (doom-darken fk/background-color 0.01))
  (defconst fk/dark-color2 (doom-darken fk/background-color 0.02))
  (defconst fk/dark-color3 (doom-darken fk/background-color 0.03))
  (defconst fk/dark-color4 (doom-darken fk/background-color 0.04))
  (defconst fk/dark-color5 (doom-darken fk/background-color 0.05))
  (defconst fk/dark-color6 (doom-darken fk/background-color 0.06))
  (defconst fk/dark-color7 (doom-darken fk/background-color 0.07))
  (defconst fk/dark-color8 (doom-darken fk/background-color 0.08))
  (defconst fk/dark-color9 (doom-darken fk/background-color 0.09))
  (defconst fk/light-color (doom-lighten fk/background-color 0.15))
  (defconst fk/light-color1 (doom-lighten fk/background-color 0.09))
  (defconst fk/light-color2 (doom-lighten fk/background-color 0.08))
  (defconst fk/light-color3 (doom-lighten fk/background-color 0.07))
  (defconst fk/light-color4 (doom-lighten fk/background-color 0.06))
  (defconst fk/light-color5 (doom-lighten fk/background-color 0.05))
  (defconst fk/light-color6 (doom-lighten fk/background-color 0.04))
  (defconst fk/light-color7 (doom-lighten fk/background-color 0.03))
  (defconst fk/light-color8 (doom-lighten fk/background-color 0.02))
  (defconst fk/light-color9 (doom-lighten fk/background-color 0.01)))
#+END_SRC

*** Settings
**** Disable all themes before loading a theme
#+BEGIN_SRC emacs-lisp
(defadvice load-theme (before disable-themes-first activate)
  (fk/disable-all-themes))
#+END_SRC

**** load-theme without annoying confirmation
#+BEGIN_SRC emacs-lisp
(advice-add 'load-theme
            :around
            (lambda (fn theme &optional no-confirm no-enable)
              (funcall fn theme t)))
#+END_SRC

*** Alternatives
**** A light emacs theme that's well suited for org-mode
#+BEGIN_SRC emacs-lisp
(use-package poet-theme
  :defer t)
#+END_SRC

** Mode Line
*** Doom Modeline
#+BEGIN_SRC emacs-lisp
(use-package doom-modeline
  :init
  ;; show doom-modeline at the same time with dashboard
  (add-hook 'emacs-startup-hook 'doom-modeline-mode -100)
  :custom
  (doom-modeline-buffer-encoding nil)
  (doom-modeline-vcs-max-length 20)
  :custom-face
  (mode-line ((t (:background ,fk/dark-color))))
  (mode-line-inactive ((t (:background ,fk/dark-color5))))
  (mode-line-highlight ((t (:inherit doom-modeline-bar :foreground "black"))))
  (doom-modeline-buffer-path ((t (:inherit font-lock-comment-face :slant normal))))
  :hook
  (dashboard-after-initialize . column-number-mode))
#+END_SRC

*** Anzu
#+BEGIN_SRC emacs-lisp
(use-package anzu
  :after isearch
  :config
  (global-anzu-mode))
#+END_SRC

** Window Dividers
Change default window dividers to a better built-in alternative.
(Note: ":tangle early-init.el")
#+BEGIN_SRC emacs-lisp :tangle early-init.el
(setq window-divider-default-places t
      window-divider-default-bottom-width 1
      window-divider-default-right-width 1)

(window-divider-mode)
#+END_SRC

** Page Break Lines
#+BEGIN_SRC emacs-lisp
(use-package page-break-lines
  :custom
  (page-break-lines-char ?—)
  :custom-face
  (page-break-lines ((t (:weight extra-light))))
  :hook
  (dashboard-after-initialize . global-page-break-lines-mode))
#+END_SRC

** [[#trailing-white-space][Trailing White Space-]]
** Highlight TODOs
#+BEGIN_SRC emacs-lisp
(use-package hl-todo
  :custom
  ;; Better hl-todo colors, taken from spacemacs
  (hl-todo-keyword-faces '(("TODO" . "#dc752f")
                           ("NEXT" . "#dc752f")
                           ("THEM" . "#2d9574")
                           ("PROG" . "#4f97d7")
                           ("OKAY" . "#4f97d7")
                           ("DONT" . "#f2241f")
                           ("FAIL" . "#f2241f")
                           ("DONE" . "#86dc2f")
                           ("NOTE" . "#b1951d")
                           ("KLUDGE" . "#b1951d")
                           ("HACK" . "#b1951d")
                           ("TEMP" . "#b1951d")
                           ("QUESTION" . "#b1951d")
                           ("HOLD" . "#dc752f")
                           ("FIXME" . "#dc752f")
                           ("XXX+" . "#dc752f")))
  :hook
  (dashboard-after-initialize . global-hl-todo-mode))
#+END_SRC

** Beacon
#+BEGIN_SRC emacs-lisp
(use-package beacon
  :preface
  (defconst cursor-color+1 (format "#%x" (+ 1 (string-to-number (string-remove-prefix "#" (face-attribute 'cursor :background)) 16))))
  :custom
  (beacon-color cursor-color+1)
  ;; (beacon-blink-when-point-moves-vertically 10)
  (beacon-dont-blink-major-modes '(dashboard-mode minibuff))
  :config
  (defun fk/beacon-blink ()
    "`beacon-blink' with `beacon-dont-blink-major-modes' control."
    (interactive)
    (unless (seq-find #'derived-mode-p beacon-dont-blink-major-modes)
      (beacon-blink)))
  ;; `beacon-blink' manually instead of activating `beacon-mode' to not
  ;; calculate every time on post-command-hook if should beacon blink
  (dolist (command '(other-window
                     winum-select-window-by-number
                     scroll-up-command
                     scroll-down-command
                     recenter-top-bottom
                     move-to-window-line-top-bottom
                     ace-select-window
                     ace-swap-window))
    (eval `(defadvice ,command (after blink activate)
             (fk/beacon-blink))))
  (dolist (hook '(find-file-hook
                  xref-after-jump-hook
                  xref-after-return-hook))
    (add-hook hook 'fk/beacon-blink)))
#+END_SRC

** All The Icons
#+BEGIN_SRC emacs-lisp
;; Prerequisite for a few packages (e.g. treemacs, all-the-icons-dired)
;; "M-x all-the-icons-install-fonts" to install fonts at the first time.
(use-package all-the-icons)
#+END_SRC

** Highlight Indent Guides
#+BEGIN_SRC emacs-lisp
(use-package highlight-indent-guides
  :custom
  (highlight-indent-guides-method 'character)
  (highlight-indent-guides-responsive 'top)
  (highlight-indent-guides-auto-enabled nil)
  :custom-face
  (highlight-indent-guides-character-face ((t (:foreground ,fk/light-color6))))
  (highlight-indent-guides-top-character-face ((t (:foreground ,fk/light-color))))
  :hook
  (prog-mode . highlight-indent-guides-mode))
#+END_SRC

** Shackle
#+BEGIN_SRC emacs-lisp
(use-package shackle
  :custom
  (shackle-rules '(("\\`\\*helm.*?\\*\\'" :regexp t :align t :size 0.4)  ; I use helm-posframe now, this is unnecessary but i want to keep just in case
                   ("\\`\\*helpful.*?\\*\\'" :regexp t :align t :size 0.4)
                   ("\\`\\*Go Translate*?\\*\\'" :regexp t :align t :size 0.4)
                   (help-mode :align t :size 0.4 :select t)))
  :hook
  (dashboard-after-initialize . shackle-mode))
#+END_SRC

** Zoom
#+BEGIN_SRC emacs-lisp
;; TODO: Add a function to set window width to fill column width
;; according to current major mode
(use-package zoom
  :commands zoom-mode
  :preface
  (defvar fk/zoom-default-size '(120 . 40))
  :custom
  (zoom-size fk/zoom-default-size))
#+END_SRC

** Emacs Dashboard
#+BEGIN_SRC emacs-lisp
(use-package dashboard
  :custom
  (dashboard-startup-banner 'logo)
  (dashboard-set-heading-icons t)
  (dashboard-set-file-icons t)
  (dashboard-center-content t)
  (dashboard-week-agenda t)
  (dashboard-item-shortcuts '((recents . "r")
                              (bookmarks . "b")
                              (projects . "p")
                              (agenda . "a")))
  (dashboard-items '((recents  . 10)
                     (projects . 10)
                     ;;(bookmarks . 5)
                     ;;(agenda . 5))
                     ))
  (dashboard-set-navigator t)
  ;; Format: "(icon title help action face prefix suffix)"
  (dashboard-navigator-buttons
   `((;; Github
      (,(all-the-icons-octicon "mark-github" :height 1.1 :v-adjust 0.0)
       "Github"
       "Browse github"
       (lambda (&rest _) (browse-url "https://github.com/")))
      ;; Codebase
      (,(all-the-icons-faicon "briefcase" :height 1.1 :v-adjust -0.1)
       "Codebase"
       "My assigned tickets"
       (lambda (&rest _) (browse-url "https://hipo.codebasehq.com/tickets")))
      ;; Perspective
      (,(all-the-icons-octicon "history" :height 1.1 :v-adjust 0.0)
       "Reload last session"
       "Reload last session"
       (lambda (&rest _) (persp-state-load persp-state-default-file))))))
  :custom-face
  (dashboard-heading-face ((t (:weight bold))))
  :config
  (dashboard-setup-startup-hook)
  (defun fk/home ()
    "Switch to home (dashboard) buffer."
    (interactive)
    (if (get-buffer dashboard-buffer-name)
        (switch-to-buffer dashboard-buffer-name)
      (dashboard-refresh-buffer)))
  :hook
  (dashboard-mode . (lambda () (setq-local cursor-type nil)))
  (dashboard-mode . (lambda () (setq-local show-trailing-whitespace nil)))
  (dashboard-mode . (lambda () (face-remap-add-relative 'hl-line :weight 'bold))))
#+END_SRC

** Stripe Buffer
#+BEGIN_SRC emacs-lisp
(use-package stripe-buffer
  :custom-face
  (stripe-highlight ((t (:background ,fk/light-color7))))
  :config
  ;; hl-line (higher priority stripes) fix:
  (defadvice sb/redraw-region (after stripe-set-priority activate)
    (when (or stripe-buffer-mode stripe-table-mode)
      (dolist (overlay sb/overlays)
        (overlay-put overlay 'priority -100))))
  :hook
  (org-mode . turn-on-stripe-table-mode))
#+END_SRC

** Fill Column Indicator
#+BEGIN_SRC emacs-lisp
(use-package display-fill-column-indicator
  :straight (:type built-in)
  :custom-face
  (fill-column-indicator ((t (:foreground ,fk/light-color7))))
  :hook
  (prog-mode . display-fill-column-indicator-mode))
#+END_SRC

** Line Numbers
#+BEGIN_SRC emacs-lisp
(use-package display-line-numbers
  :straight (:type built-in)
  :hook
  (prog-mode . display-line-numbers-mode))
#+END_SRC

** [[#dired-icons][Dired Icons-]]
** [[#rainbow-delimiters][Rainbow Delimiters-]]
** [[#helm-icons][Helm Icons-]]
** [[#symbol-overlay][Symbol Overlay-]]
** Olivetti
#+BEGIN_SRC emacs-lisp
(use-package olivetti
  :custom
  (olivetti-body-width 120)
  (olivetti-enable-visual-line-mode nil)
  :bind*
  (("C-1" . (lambda ()
              (interactive)
              (if (= (count-windows) 1)
                  (call-interactively 'fk/olivetti-single-window-mode)
                (delete-other-windows))))
   :map windows
   ("c" . olivetti-mode)
   ("v" . visual-line-mode)
   :map windows
   :prefix-map olivetti
   :prefix "o"
   ("o" . fk/olivetti-single-window-mode)
   ("e" . olivetti-expand)
   ("s" . olivetti-shrink))
  :hook
  (olivetti-mode . (lambda () (face-remap-add-relative 'fringe fk/olivetti-fringe-face)))
  (dashboard-after-initialize . fk/olivetti-single-window-mode)
  :config
  (defvar fk/default-olivetti-fringe-face `(:background ,fk/dark-color2))
  (defvar fk/darker-olivetti-fringe-face `(:background ,fk/dark-color9))
  (defvar fk/olivetti-fringe-face fk/default-olivetti-fringe-face)
  (defvar fk/olivetti-excluded-buffers '("*dashboard*" " *which-key*" "*helm"
                                         " *Minibuf-1*" "*vterm" "*fireplace*"
                                         " *lsp-peek--buffer*"))

  (defun fk/windows-vertical-p ()
    "Return t if windows placed vertically."
    (interactive)
    (not (catch 'horizontal
           (dolist (window (window-list))
             (when (not (= (car (window-edges window)) 0))
               (throw 'horizontal t))))))

  ;; Calculate the necessary `olivetti-body-width' according to
  ;; `fill-column' and `line-number-display-width' values.
  ;; (defadvice olivetti-mode (before get-fill-column-width activate)
  ;;   (setq-local olivetti-body-width (+ fill-column (line-number-display-width))))

  (defun fk/activate-olivetti-if-single-window ()
    "Activate olivetti-mode if there is only one window visible."
    (if (or (= (count-windows) 1)
            (fk/windows-vertical-p))
        (unless (or (member (buffer-name) fk/olivetti-excluded-buffers)
                    (catch 'found
                      (dolist (prefix fk/olivetti-excluded-buffers)
                        (when (string-prefix-p prefix (buffer-name))
                          (throw 'found t)))))
          (olivetti-mode))
      (fk/olivetti-reset)))

  (defun fk/olivetti-reset ()
    ;; TODO: do not reset full-span windows
    "Reset all windows' margins and face-remaps."
    (olivetti-mode -1)
    (olivetti-reset-all-windows)
    (dolist (window (window-list))
      (with-selected-window window
        (face-remap-remove-relative (cons 'fringe fk/default-olivetti-fringe-face))
        (face-remap-remove-relative (cons 'fringe fk/darker-olivetti-fringe-face)))))

  (define-minor-mode fk/olivetti-single-window-mode
    "Toggle olivetti-mode when there is only one window visible."
    :global t
    (if fk/olivetti-single-window-mode
        (progn
          (fk/activate-olivetti-if-single-window)
          (add-hook 'window-configuration-change-hook 'fk/activate-olivetti-if-single-window))
      (remove-hook 'window-configuration-change-hook 'fk/activate-olivetti-if-single-window)
      (fk/olivetti-reset))))
#+END_SRC

** [[#emojify][Emojify-]]
** Tree Sitter
#+BEGIN_SRC emacs-lisp
(use-package tree-sitter
  :defer t
  :straight
  (tree-sitter :host github
               :repo "ubolonton/emacs-tree-sitter"
               :files ("lisp/*.el")))

(use-package tree-sitter-langs
  :defer t
  :straight
  (tree-sitter-langs :host github
                     :repo "ubolonton/emacs-tree-sitter"
                     :files ("langs/*.el" "langs/queries")))
#+END_SRC

** Visual Fill Column
#+BEGIN_SRC emacs-lisp
(use-package visual-fill-column
  :commands visual-fill-column-mode
  :hook
  (visual-fill-column-mode . visual-line-mode))
#+END_SRC

** [[#color-identifiers-mode][Color Identifiers Mode-]]
** Goggles Mode (Highlight Changes)
#+BEGIN_SRC emacs-lisp
(use-package goggles
  :straight (:host github :repo "minad/goggles")
  :commands goggles-mode
  :custom
  (goggles-pulse-delay 0.1))
#+END_SRC

* Completion
** Better Defaults
#+BEGIN_SRC emacs-lisp
;;(add-to-list 'completion-styles 'flex t)
#+END_SRC

** Which Key (Keybinding Completion)
#+BEGIN_SRC emacs-lisp
(use-package which-key-posframe
  :custom
  (which-key-idle-secondary-delay 0)
  ;;(which-key-side-window-max-height 0.99)
  :custom-face
  (which-key-posframe ((t (:background ,fk/dark-color))))
  (which-key-posframe-border ((t (:background "gray"))))
  :hook
  (dashboard-after-initialize . which-key-posframe-mode)
  (dashboard-after-initialize . which-key-mode))
#+END_SRC

** Helm (General Completion & Selection)
*** Helm
#+BEGIN_SRC emacs-lisp
(use-package helm
  :custom
  (helm-M-x-always-save-history t)
  (helm-display-function 'pop-to-buffer)
  (savehist-additional-variables '(extended-command-history))
  (history-delete-duplicates t)
  (helm-command-prefix-key nil)
  :custom-face
  (helm-non-file-buffer ((t (:inherit font-lock-comment-face))))
  (helm-ff-file-extension ((t (:inherit default))))
  (helm-buffer-file ((t (:inherit default))))
  :bind
  (("M-x" . helm-M-x)
   ("C-x C-f" . helm-find-files)
   ("C-x C-b" . helm-buffers-list)
   ("C-x b" . helm-buffers-list)
   ("C-x C-r" . helm-recentf)
   ("C-x C-i" . helm-imenu)
   ("M-y" . helm-show-kill-ring)
   :map helm-map
   ("TAB" . helm-execute-persistent-action)
   ("<tab>" . helm-execute-persistent-action)
   ("C-z" . helm-select-action)
   ("C-w" . backward-kill-word)  ; Fix C-w
   :map files
   ("f" . helm-find-files)
   ("r" . helm-recentf)
   ("b" . helm-bookmarks)
   :map buffers
   ("b" . helm-buffers-list))
  :hook
  (dashboard-after-initialize . helm-mode)
  (helm-mode . savehist-mode)
  (helm-major-mode . fk/darken-background)
  :config
  (with-eval-after-load 'helm-buffers
    (dolist (regexp '("\\*epc con" "\\*helm" "\\*EGLOT" "\\*straight" "\\*Flymake"
                      "\\*eldoc" "\\*Compile-Log" "\\*xref" "\\*company"
                      "\\*aw-posframe" "\\*Warnings" "\\*Backtrace"))
      (add-to-list 'helm-boring-buffer-regexp-list regexp))
    (bind-keys
     :map helm-buffer-map
     ("M-d" . helm-buffer-run-kill-buffers)
     ("C-M-d" . helm-buffer-run-kill-persistent)))

  ;; "Waiting for process to die...done" fix
  (defun kadir/helm--collect-matches (orig-fun src-list &rest args)
    (let ((matches
           (cl-loop for src in src-list
                    collect (helm-compute-matches src))))
      (unless (eq matches t) matches)))

  (advice-add 'helm--collect-matches :around #'kadir/helm--collect-matches))
#+END_SRC

*** [[#helm-projectile][Helm Projectile-]]
*** [[#helm-ag][Helm Ag-]]
*** [[#helm-xref][Helm Xref-]]
*** [[#helm-swoop][Helm Swoop-]]
*** Helm Descbinds
#+BEGIN_SRC emacs-lisp
(use-package helm-descbinds
  :commands helm-descbinds)
#+END_SRC

*** [[#helm-icons][Helm Icons-]]
*** Helm Posframe
#+BEGIN_SRC emacs-lisp
(use-package helm-posframe
  :straight (:host github :repo "KaratasFurkan/helm-posframe")
  :after helm
  :custom
  (helm-display-header-line nil)
  (helm-echo-input-in-header-line t)
  (helm-posframe-border-color "gray")
  (helm-posframe-parameters '((left-fringe . 5)
                              (right-fringe . 5)))
  :config
  (helm-posframe-enable)
  ;; Remove annoying error message that displayed everytime after closing
  ;; helm-posframe. The message is:
  ;; Error during redisplay: (run-hook-with-args helm--delete-frame-function
  ;; #<frame 0x5586330a1f90>) signaled (user-error "No recursive edit is in
  ;; progress")
  (remove-hook 'delete-frame-functions 'helm--delete-frame-function))
#+END_SRC

** Company (Code & Text Completion)
*** Company
#+BEGIN_SRC emacs-lisp
(use-package company
  :custom
  (company-idle-delay 0)
  (company-minimum-prefix-length 1)
  (company-tooltip-align-annotations t)
  (company-dabbrev-downcase nil)
  ;; Disable `single-candidate' and `echo-area' frontends
  (company-frontends '(company-box-frontend))
  (company-dabbrev-other-buffers t) ; search buffers with the same major mode
  :bind
  ( :map company-active-map
    ("RET" . nil)
    ([return] . nil)
    ("TAB" . company-complete-selection)
    ("<tab>" . company-complete-selection)
    ("C-s" . company-complete-selection)  ; Mostly to use during yasnippet expansion
    ("C-n" . company-select-next)
    ("C-p" . company-select-previous))
  :hook
  (dashboard-after-initialize . global-company-mode)
  :config
  (add-to-list 'company-begin-commands 'backward-delete-char-untabify)

  ;; Show YASnippet snippets in company

  (defun fk/company-backend-with-yas (backend)
    "Add ':with company-yasnippet' to the given company backend."
    (if (and (listp backend) (member 'company-yasnippet backend))
        backend
      (append (if (consp backend)
                  backend
                (list backend))
              '(:with company-yasnippet))))

  (defun fk/company-smart-snippets (fn command &optional arg &rest _)
    "Do not show yasnippet candidates after dot."
    ;;Source:
    ;;https://www.reddit.com/r/emacs/comments/7dnbxl/how_to_temporally_filter_companymode_candidates/
    (unless (when (and (equal command 'prefix) (> (point) 0))
              (let* ((prefix (company-grab-symbol))
                     (point-before-prefix (if (> (- (point) (length prefix) 1) 0)
                                              (- (point) (length prefix) 1)
                                            1))
                     (char (buffer-substring-no-properties point-before-prefix (1+ point-before-prefix))))
                (string= char ".")))
      (funcall fn command arg)))

  ;; TODO: maybe show snippets at first?
  (defun fk/company-enable-snippets ()
    "Enable snippet suggestions in company by adding ':with
company-yasnippet' to all company backends."
    (interactive)
    (setq company-backends (mapcar 'fk/company-backend-with-yas company-backends))
    (advice-add 'company-yasnippet :around 'fk/company-smart-snippets))

  (fk/company-enable-snippets))
#+END_SRC

*** Company Box
#+BEGIN_SRC emacs-lisp
(use-package company-box
  :custom
  (company-box-show-single-candidate t)
  ;;(company-box-frame-behavior 'point)
  (company-box-icon-right-margin 0.5)
  (company-box-backends-colors '((company-yasnippet . (:annotation default))))
  :hook
  (company-mode . company-box-mode))
#+END_SRC

*** Company Prescient
#+BEGIN_SRC emacs-lisp
(use-package prescient
  :defer t
  :config (prescient-persist-mode))

(use-package company-prescient
  :after company
  :config (company-prescient-mode))
#+END_SRC

** YASnippet (Snippet Completion)
#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  ;; Expand snippets with `C-j', not with `TAB'. Use `TAB' to always
  ;; jump to next field, even when company window is active. If there
  ;; is need to complete company's selection, use `C-s'
  ;; (`company-complete-selection').
  :custom
  (yas-indent-line nil)
  (yas-inhibit-overlay-modification-protection t)
  :custom-face
  (yas-field-highlight-face ((t (:inherit region))))
  :bind*
  (("C-j" . yas-expand)
   :map yas-minor-mode-map
   ("TAB" . nil)
   ("<tab>" . nil)
   :map yas-keymap
   ("TAB" . (lambda () (interactive) (company-abort) (yas-next-field)))
   ("<tab>" . (lambda () (interactive) (company-abort) (yas-next-field))))
  :hook
  (dashboard-after-initialize . yas-global-mode)
  (snippet-mode . (lambda () (setq-local require-final-newline nil))))
#+END_SRC

** [[#emmet-mode][Emmet-]] (Snippet Completion for HTML & CSS)
* Search & Navigation
** Better Defaults
#+BEGIN_SRC emacs-lisp
(global-subword-mode)  ; navigationInCamelCase

(setq-default
 recenter-positions '(middle 0.15 top 0.85 bottom)  ; C-l positions
 scroll-conservatively 10000)                       ; Smooth scrolling
#+END_SRC

** Custom Functions
*** find-config
#+BEGIN_SRC emacs-lisp
(defun fk/find-config ()
  "Open config file."
  (interactive)
  (find-file config-org))
#+END_SRC

*** go-scratch
#+BEGIN_SRC emacs-lisp
(defun fk/scratch ()
  "Switch to scratch buffer."
  (interactive)
  (switch-to-buffer "*scratch*"))
#+END_SRC

*** go-messages
#+BEGIN_SRC emacs-lisp
(defun fk/messages ()
  "Switch to Messages buffer."
  (interactive)
  (switch-to-buffer "*Messages*"))
#+END_SRC

*** [[#emacs-dashboard][go-home-]]
*** split-window-and-switch
#+BEGIN_SRC emacs-lisp
(defun fk/split-window-below-and-switch ()
  "Split the window below, then switch to the new window."
  (interactive)
  (split-window-below)
  (other-window 1))

(defun fk/split-window-right-and-switch ()
  "Split the window right, then switch to the new window."
  (interactive)
  (split-window-right)
  (other-window 1))
#+END_SRC

*** generate-random-scratch
#+BEGIN_SRC emacs-lisp
(defun fk/generate-random-scratch ()
  "Create and switch to a temporary scratch buffer with a random name."
  (interactive)
  (switch-to-buffer (make-temp-name "scratch-"))
  (emacs-lisp-mode))
#+END_SRC

*** generate-random-org-scratch
#+BEGIN_SRC emacs-lisp
(defun fk/generate-random-org-scratch ()
  "Create and switch to a temporary scratch buffer with a random name and
org-mode activated."
  (interactive)
  (switch-to-buffer (make-temp-name "scratch-"))
  (org-mode))
#+END_SRC

** Keybindings
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "<F1>") 'help-command)
(global-set-key (kbd "C-x c") 'fk/find-config)
(global-set-key (kbd "M-o") 'other-window)
(global-set-key (kbd "C-x C-k") 'kill-current-buffer)
(global-set-key (kbd "M-l") 'move-to-window-line-top-bottom)
;; Split & Switch
(global-set-key (kbd "C-1") 'delete-other-windows)
(global-set-key (kbd "C-2") 'fk/split-window-below-and-switch)
(global-set-key (kbd "C-3") 'fk/split-window-right-and-switch)
;; Scroll less than default
(global-set-key (kbd "C-v") (lambda () (interactive) (scroll-up-command 15)))
(global-set-key (kbd "M-v") (lambda () (interactive) (scroll-down-command 15)))

(bind-keys*
 :map files
 ("c" . fk/find-config))

(bind-keys*
 :map buffers
 ("s" . fk/scratch)
 ("r" . fk/generate-random-scratch)
 ("o" . fk/generate-random-org-scratch)
 ("h" . fk/home)
 ("m" . fk/messages))

(bind-keys*
 :map windows
 ("b" . balance-windows)
 ("d" . delete-window)
 ("k" . kill-buffer-and-window))
#+END_SRC

** Recentf (Recent Files)
#+BEGIN_SRC emacs-lisp
(use-package recentf
  ;; Use with `helm-recentf'
  :straight (:type built-in)
  :custom
  (recentf-exclude `(,(expand-file-name "straight/" user-emacs-directory)
                     "/usr/share/emacs/"
                     "/usr/local/share/emacs/"
                     "emacs/src/"
                     ,(expand-file-name "~/.virtualenvs")))
  (recentf-max-saved-items 200))
#+END_SRC

** Winner Mode
#+BEGIN_SRC emacs-lisp
(use-package winner
  :straight (:type built-in)
  :bind
  (("M-u" . winner-undo)
   ;; ("M-u" . (lambda () (interactive) (condition-case nil
   ;;                                       (xref-pop-marker-stack)
   ;;                                     (error (winner-undo)))))
   ("M-U" . winner-redo)
   :map windows
   ("u" . winner-undo)
   ("r" . winner-redo))
  :config
  (winner-mode))
#+END_SRC

** Ace Window
#+BEGIN_SRC emacs-lisp
(use-package ace-window
  :straight (:host github :repo "KaratasFurkan/ace-window" :branch "feature/posframe")
  :custom
  (aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
  (aw-ignore-current t)
  :bind*
  ( :map windows
    ("w" . ace-window)
    ("D" . ace-delete-window)
    ("s" . ace-swap-window))
  :config
  (ace-window-posframe-mode)
  :custom-face
  (aw-leading-char-face ((t (:height 1000 :foreground "red")))))
#+END_SRC

*** Dependents
Those packages should load after ace-window to not install ace-window
from melpa. TODO: fix this
**** Helm Icons
#+BEGIN_SRC emacs-lisp
(use-package helm-icons
  :straight (:host github :repo "yyoncho/helm-icons")
  :after helm
  :config
  (treemacs-resize-icons fk/default-icon-size)
  (helm-icons-enable))
#+END_SRC

** Winum
#+BEGIN_SRC emacs-lisp
(use-package winum
  :bind*
  ("M-1" . winum-select-window-1)
  ("M-2" . winum-select-window-2)
  ("M-3" . winum-select-window-3)
  ("M-4" . winum-select-window-4)
  ("M-5" . winum-select-window-5)
  ("M-6" . winum-select-window-6)
  ("M-7" . winum-select-window-7)
  ("M-8" . winum-select-window-8)
  ("M-9" . winum-select-window-9)
  :config
  (winum-mode))
#+END_SRC

** Mwim (Move Where I Mean)
#+BEGIN_SRC emacs-lisp
(use-package mwim
  :bind
  ("C-a" . mwim-beginning-of-code-or-line)
  ("C-e" . mwim-end-of-code-or-line))
#+END_SRC

** Helm Projectile
#+BEGIN_SRC emacs-lisp
(use-package helm-projectile
  :custom
  (helm-projectile-sources-list '(helm-source-projectile-buffers-list
                                  helm-source-projectile-recentf-list
                                  helm-source-projectile-files-list
                                  helm-source-projectile-projects))
  :bind
  ("C-x f" . helm-projectile)
  :hook
  (projectile-mode . helm-projectile-on)
  :config
  (defun fk/projectile-recentf-files-first-five (original-function)
    "Return a list of five recently visited files in a project."
    (let ((files (funcall original-function)))
      (if (> (length files) 5)
          (seq-subseq files 0 5)
        files)))
  (advice-add 'projectile-recentf-files :around 'fk/projectile-recentf-files-first-five))
#+END_SRC

** Helm Ag
#+BEGIN_SRC emacs-lisp
(use-package helm-ag
  :custom
  (helm-ag-base-command
   "rg -S --no-heading --color=never --line-number --max-columns 400")
  :config
  (defun fk/helm-do-ag-project-root-or-current-dir (&optional query)
    "If in a project call `helm-do-ag-project-root', else call
`helm-do-ag' with current directory."
    (interactive)
    (if (projectile-project-p)
        (helm-do-ag-project-root query)
      (helm-do-ag default-directory nil query)))
  :bind
  ("C-M-s" . fk/helm-do-ag-project-root-or-current-dir))
#+END_SRC

** Helm Xref
#+BEGIN_SRC emacs-lisp
(use-package xref
  :custom
  (xref-prompt-for-identifier nil)
  :bind
  ("C-M-j" . xref-find-definitions)
  ("C-M-k" . xref-pop-marker-stack)
  ("C-9" . xref-find-definitions)
  ("C-8" . xref-pop-marker-stack)
  ("C-M-S-j" . xref-find-definitions-other-window)
  ("C-M-9" . xref-find-definitions-other-window)
  ("C-M-r" . xref-find-references))

(use-package helm-xref
  :after helm xref)
#+END_SRC

** Dumb Jump
#+BEGIN_SRC emacs-lisp
(use-package dumb-jump
  :custom
  (dumb-jump-aggressive t)
  :bind
  ([remap xref-find-definitions] . fk/smart-jump-go)
  ([remap xref-pop-marker-stack] . fk/smart-jump-back)
  :config
  (defun fk/smart-jump-go ()
    "Fallback `dumb-jump-go' if `xref-find-definitions' cannot find the source."
    (interactive)
    (condition-case nil
        (call-interactively 'xref-find-definitions)
      (error (call-interactively 'dumb-jump-go))))

  (defun fk/smart-jump-back ()
    "Fallback `dumb-jump-back' if xref-pop-marker-stack cannot return back."
    (interactive)
    (condition-case nil
        (call-interactively 'xref-pop-marker-stack)
      (error (call-interactively 'dumb-jump-back)))))
#+END_SRC

** Helm Swoop
#+BEGIN_SRC emacs-lisp
(use-package helm-swoop
  :custom
  (helm-swoop-speed-or-color t)
  (helm-swoop-split-window-function 'display-buffer)
  (helm-swoop-min-overlay-length 0)
  ;;(helm-swoop-use-fuzzy-match t)
  :custom-face
  (helm-swoop-target-line-face ((t (:background "black" :foreground nil :inverse-video nil :extend t))))
  (helm-swoop-target-word-face ((t (:inherit lazy-highlight :foreground nil))))
  :bind
  (("M-s" . helm-swoop)
   :map isearch-mode-map
   ("M-s" . helm-swoop-from-isearch)
   :map helm-swoop-map
   ("M-s" . helm-multi-swoop-all-from-helm-swoop)
   :map helm-swoop-edit-map
   ("C-c C-c" . helm-swoop--edit-complete)
   ("C-c C-k" . helm-swoop--edit-cancel)))
#+END_SRC

** Deadgrep
#+BEGIN_SRC emacs-lisp
(use-package deadgrep
  :commands deadgrep
  :bind
  ( :map deadgrep-mode-map
    ("C-c C-e" . deadgrep-edit-mode)))
#+END_SRC

** Avy
#+BEGIN_SRC emacs-lisp
(use-package avy
  :bind
  (("M-j" . avy-goto-char-2)
   ("C-M-u" . avy-pop-mark)))
#+END_SRC

** Treemacs
*** Treemacs
#+BEGIN_SRC emacs-lisp
(use-package treemacs
  :custom
  (treemacs-width 20)
  :bind
  ("M-0" . treemacs-select-window)
  :hook
  ;; Add current project to treemacs if not already added
  (treemacs-select . (lambda ()
                       (let* ((project-path (projectile-project-root))
                              (project-name (treemacs--filename project-path)))
                         (unless (treemacs--find-project-for-path project-path)
                           (treemacs-add-project project-path project-name)))))
  (treemacs-mode . (lambda ()
                     (face-remap-add-relative 'default :height .75)
                     (face-remap-add-relative 'mode-line-inactive :background fk/dark-color)
                     (face-remap-add-relative 'mode-line :background fk/dark-color)
                     (face-remap-add-relative 'hl-line :background fk/background-color :weight 'bold)
                     (fk/darken-background))))
#+END_SRC

*** Treemacs Projectile
#+BEGIN_SRC emacs-lisp
(use-package treemacs-projectile
  :after treemacs projectile)
#+END_SRC

** Persp Mode
#+BEGIN_SRC emacs-lisp
(use-package perspective
  :custom
  (persp-mode-prefix-key (kbd "M-m p"))
  (persp-state-default-file (no-littering-expand-var-file-name "perspective.el"))
  :custom-face
  (persp-selected-face ((t (:foreground nil :inherit 'doom-modeline-warning))))
  :bind*
  ( :map persp-mode-map
    ("C-M-o" . persp-next)
    ("C-x p" . persp-switch)
    ("C-x C-p" . persp-switch-quick)
    ("M-q" . persp-switch-last)
    :map perspective-map
    ("p" . persp-switch)
    ("k" . persp-kill)
    ("l" . persp-switch-last)
    ("q" . persp-switch-quick))
  :hook
  (dashboard-after-initialize . persp-mode)
  (kill-emacs . persp-state-save))
#+END_SRC

** [[#dired-sidebar][Dired Sidebar-]]
** [[#ibuffer-sidebar][IBuffer Sidebar-]]
** Block Nav
#+BEGIN_SRC emacs-lisp
(use-package block-nav
  :straight (:host github :repo "nixin72/block-nav.el")
  :config
  ;; (defun fk/block-nav-activate (file keymap)
  ;;   (with-eval-after-load file
  ;;     (define-key keymap (kbd "M-n") 'block-nav-next-block)
  ;;     (define-key keymap (kbd "M-p") 'block-nav-previous-block)))
  ;; (fk/block-nav-activate 'python 'python-mode-map)
  ;; (fk/block-nav-activate 'yaml-mode 'yaml-mode-map)
  ;; (fk/block-nav-activate 'docker-compose-mode 'docker-compose-mode-map)
  (with-eval-after-load 'python
    (define-key python-mode-map (kbd "M-n") 'block-nav-next-block)
    (define-key python-mode-map (kbd "M-p") 'block-nav-previous-block))
  (with-eval-after-load 'yaml-mode
    (define-key yaml-mode-map (kbd "M-n") 'block-nav-next-block)
    (define-key yaml-mode-map (kbd "M-p") 'block-nav-previous-block))
  (with-eval-after-load 'docker-compose-mode
    (define-key docker-compose-mode-map (kbd "M-n") 'block-nav-next-block)
    (define-key docker-compose-mode-map (kbd "M-p") 'block-nav-previous-block))
  (with-eval-after-load 'elisp-mode
    (define-key emacs-lisp-mode-map (kbd "M-n") 'block-nav-next-block)
    (define-key emacs-lisp-mode-map (kbd "M-p") 'block-nav-previous-block)))
#+END_SRC

* Text Editing
** Better Defaults
#+BEGIN_SRC emacs-lisp
(delete-selection-mode)
(electric-pair-mode)

(setq-default
 fill-column 80
 sentence-end-double-space nil
 indent-tabs-mode nil  ; Use spaces instead of tabs
 tab-width 4)
#+END_SRC

** Custom Functions
*** backward-kill-word-or-region
#+BEGIN_SRC emacs-lisp
(defun fk/backward-kill-word-or-region ()
  "Calls `kill-region' when a region is active and `backward-kill-word'
otherwise."
  (interactive)
  (call-interactively (if (region-active-p)
                          'kill-region
                        'backward-kill-word)))
#+END_SRC

** Keybindings
#+BEGIN_SRC emacs-lisp
(keyboard-translate ?\C-h ?\C-?)  ; C-h as DEL, (F1 as `help-command')
(global-set-key (kbd "C-w") 'fk/backward-kill-word-or-region)

(bind-keys*
 :map text
 ("s" . sort-lines))
#+END_SRC

** Undo Tree
#+BEGIN_SRC emacs-lisp
(use-package undo-tree
  :bind
  (("C-u" . undo-tree-undo)
   ("C-S-u" . undo-tree-redo))
  :hook
  (dashboard-after-initialize . global-undo-tree-mode))
#+END_SRC

** Trailing White Space
#+BEGIN_SRC emacs-lisp
;; (use-package whitespace
;;   :straight (:type built-in)
;;   :custom
;;   (show-trailing-whitespace t)  ; not from whitespace.el
;;   :custom-face
;;   (trailing-whitespace ((t (:background ,fk/light-color7))))  ; not from whitespace.el
;;   :hook
;;   (before-save . whitespace-cleanup))

;; Try an alternative:
(use-package whitespace-cleanup-mode
  :custom
  (show-trailing-whitespace t)  ; not from whitespace-cleanup-mode.el
  :custom-face
  (trailing-whitespace ((t (:background ,fk/light-color7))))  ; not from whitespace-cleanup-mode.el
  :hook
  (dashboard-after-initialize . global-whitespace-cleanup-mode))
#+END_SRC

** Case Switching
#+BEGIN_SRC emacs-lisp
(put 'upcase-region 'disabled nil)
(put 'downcase-region 'disabled nil)

;; built-in functions
(bind-keys
 :map text
 ("u" . upcase-dwim)
 ("d" . downcase-dwim)
 ("c" . capitalize-dwim))

(use-package string-inflection
  :bind
  ( :map text
    ("t" . string-inflection-all-cycle)
    ("k" . string-inflection-kebab-case)))
#+END_SRC

** Paren
#+BEGIN_SRC emacs-lisp
(use-package paren
  :straight (:type built-in)
  :custom
  (show-paren-when-point-inside-paren t)
  :custom-face
  (show-paren-match ((t (:background nil :weight bold :foreground "white"))))
  :hook
  (dashboard-after-initialize . show-paren-mode))
#+END_SRC

** Multiple Cursors
#+BEGIN_SRC emacs-lisp
(use-package multiple-cursors
  :custom
  (mc/always-run-for-all t)
  :bind
  (("C-M-n" . mc/mark-next-like-this)
   ("C-M-p" . mc/mark-previous-like-this)
   ("C-M-S-n" . mc/skip-to-next-like-this)
   ("C-M-S-p" . mc/skip-to-previous-like-this)
   ("C-S-n" . mc/unmark-previous-like-this)
   ("C-S-p" . mc/unmark-next-like-this)
   ("C-M-<mouse-1>" . mc/add-cursor-on-click)))
#+END_SRC

** Wrap Region
#+BEGIN_SRC emacs-lisp
(use-package wrap-region
  :hook
  (dashboard-after-initialize . wrap-region-global-mode)
  :config
  (wrap-region-add-wrapper "=" "=" nil 'org-mode)
  (wrap-region-add-wrapper "*" "*" nil 'org-mode)
  (wrap-region-add-wrapper "_" "_" nil 'org-mode)
  (wrap-region-add-wrapper "/" "/" nil 'org-mode)
  (wrap-region-add-wrapper "+" "+" nil 'org-mode)
  (wrap-region-add-wrapper "~" "~" nil 'org-mode)
  (wrap-region-add-wrapper "#" "#" nil 'org-mode))
#+END_SRC

** Fill-Unfill Paragraph
#+BEGIN_SRC emacs-lisp
(use-package unfill
  :bind
  ( :map text
    ("f" . unfill-toggle)))
#+END_SRC

** Expand Region
#+BEGIN_SRC emacs-lisp
(use-package expand-region
  :custom
  (expand-region-fast-keys-enabled nil)
  (expand-region-subword-enabled t)
  :bind
  ("C-t" . er/expand-region))
#+END_SRC

** Flyspell Popup
#+BEGIN_SRC emacs-lisp
(use-package flyspell-popup
  :after flyspell
  :custom
  (flyspell-popup-correct-delay 1)
  :config
  (flyspell-popup-auto-correct-mode))
#+END_SRC

* TODO Programming
** General
*** Better Defaults
#+BEGIN_SRC emacs-lisp
#+END_SRC

*** Custom Functions
**** align-comments
#+BEGIN_SRC emacs-lisp
(defun fk/align-comments (beginning end)
  "Align comments in region."
  (interactive "*r")
  (align-regexp beginning end (concat "\\(\\s-*\\)"
                                      (regexp-quote comment-start)) nil 2))
#+END_SRC

**** indent-buffer
#+BEGIN_SRC emacs-lisp
(defun fk/indent-buffer ()
  "Indent buffer."
  (interactive)
  (indent-region (point-min) (point-max)))
#+END_SRC

**** comment-or-uncomment-region
#+BEGIN_SRC emacs-lisp
(defun fk/comment-or-uncomment-region ()
  "Comment or uncomment region with just a character (e.g. '/'). If a region is
active call comment-or-uncomment-region, otherwise just insert the given char."
  (interactive)
  (call-interactively (if (region-active-p)
                          'comment-or-uncomment-region
                        'self-insert-command)))
#+END_SRC

*** [[#fill-column-indicator][Fill Column Indicator-]]
*** [[#line-numbers][Line Numbers-]]
*** Comments
#+BEGIN_SRC emacs-lisp
(use-package newcomment
  :straight (:type built-in)
  :custom
  (comment-column 0)
  (comment-inline-offset 2)
  :bind*
  ( :map comments
    ("c" . comment-dwim)
    ("k" . comment-kill)
    ("l" . comment-line)
    ("n" . (lambda () (interactive) (next-line) (comment-indent)))
    ("N" . comment-indent-new-line)
    ("b" . comment-box)
    ("a" . fk/align-comments))
  :hook
  (emacs-lisp-mode . (lambda ()
                       (setq-local comment-start "; ")
                       (setq-local comment-column 0))))
#+END_SRC

*** [[#yasnippet-snippet-completion][YASnippet-]]
*** Projectile
#+BEGIN_SRC emacs-lisp
(use-package projectile
  :after f
  :custom
  (projectile-auto-discover nil)
  (projectile-project-search-path (f-directories "~/projects"))
  ;; Open magit when switching project
  (projectile-switch-project-action
   (lambda ()
     (let ((magit-display-buffer-function
            'magit-display-buffer-same-window-except-diff-v1))
       (magit))))
  ;; Ignore emacs project (source codes)
  (projectile-ignored-projects '("~/emacs/"))
  ;; Do not include straight repos (emacs packages) and emacs directory itself
  ;; to project list
  (projectile-ignored-project-function
   (lambda (project-root)
     (string-prefix-p (expand-file-name user-emacs-directory) project-root)))
  :bind
  ("C-M-t" . fk/projectile-vterm)
  :hook
  (dashboard-after-initialize . projectile-mode)
  :config
  (defun fk/projectile-vterm ()
    "Open vterm (or eshell if vterm is not found) in project root directory."
    (interactive)
    (let ((default-directory (or (projectile-project-root)
                                 default-directory)))
      (if (fboundp 'vterm)
          (vterm)
        (eshell)))))
#+END_SRC

*** Flycheck
#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :custom
  (flycheck-check-syntax-automatically '(save mode-enabled))
  :bind
  ( :map errors
    ("n" . flycheck-next-error)
    ("p" . flycheck-previous-error)
    ("l" . flycheck-list-errors)
    ("v" . flycheck-verify-setup)))

;; Spacemacs' custom fringes

;; :config
;; (define-fringe-bitmap 'fk/flycheck-fringe-indicator
;;   (vector #b00000000
;;           #b00000000
;;           #b00000000
;;           #b00000000
;;           #b00000000
;;           #b00000000
;;           #b00000000
;;           #b00011100
;;           #b00111110
;;           #b00111110
;;           #b00111110
;;           #b00011100
;;           #b00000000
;;           #b00000000
;;           #b00000000
;;           #b00000000
;;           #b00000000))
;; (flycheck-define-error-level 'error
;;   :severity 2
;;   :overlay-category 'flycheck-error-overlay
;;   :fringe-bitmap 'fk/flycheck-fringe-indicator
;;   :error-list-face 'flycheck-error-list-error
;;   :fringe-face 'flycheck-fringe-error)
;; (flycheck-define-error-level 'warning
;;   :severity 1
;;   :overlay-category 'flycheck-warning-overlay
;;   :fringe-bitmap 'fk/flycheck-fringe-indicator
;;   :error-list-face 'flycheck-error-list-warning
;;   :fringe-face 'flycheck-fringe-warning)
;; (flycheck-define-error-level 'info
;;   :severity 0
;;   :overlay-category 'flycheck-info-overlay
;;   :fringe-bitmap 'fk/flycheck-fringe-indicator
;;   :error-list-face 'flycheck-error-list-info
;;   :fringe-face 'flycheck-fringe-info)
#+END_SRC

*** Language Server Protocol
**** Eglot
***** Eglot
#+BEGIN_SRC emacs-lisp
(use-package eglot
  :commands eglot
  :custom
  (eglot-ignored-server-capabilites '(:documentHighlightProvider))
  (eglot-stay-out-of '(flymake))
  (eglot-autoshutdown t)
  :hook
  (eglot-managed-mode . eldoc-box-hover-mode)
  (eglot-managed-mode . fk/company-enable-snippets)
  (eglot-managed-mode . (lambda () (flymake-mode 0)))
  :config
  (with-eval-after-load 'eglot
    (load-library "project")))
#+END_SRC

***** Eldoc Box
#+BEGIN_SRC emacs-lisp
(use-package eldoc-box
  :commands (eldoc-box-hover-mode eldoc-box-hover-at-point-mode)
  :custom
  (eldoc-box-clear-with-C-g t))
#+END_SRC

**** LSP Mode
***** LSP Mode
#+BEGIN_SRC emacs-lisp
(use-package lsp-mode
  :commands lsp
  :custom
  (lsp-auto-guess-root t)
  (lsp-keymap-prefix "M-m l")
  (lsp-modeline-diagnostics-enable nil)
  (lsp-keep-workspace-alive nil)
  (lsp-auto-execute-action nil)
  (lsp-before-save-edits nil)
  (lsp-eldoc-enable-hover nil)
  (lsp-diagnostic-package :none)
  (lsp-completion-provider :none)
  (lsp-file-watch-threshold 1500)  ; pyright has more than 1000
  (lsp-enable-links nil)
  ;; Maybe set in future:
  ;;(lsp-enable-on-type-formatting nil)
  :custom-face
  (lsp-face-highlight-read ((t (:underline t :background nil :foreground nil))))
  (lsp-face-highlight-write ((t (:underline t :background nil :foreground nil))))
  (lsp-face-highlight-textual ((t (:underline t :background nil :foreground nil))))
  :hook
  (lsp-mode . lsp-enable-which-key-integration))
#+END_SRC

***** LSP UI
#+BEGIN_SRC emacs-lisp
(use-package lsp-ui
  :after lsp-mode
  :custom
  (lsp-ui-doc-position 'top)
  (lsp-ui-sideline-delay 0.5)
  (lsp-ui-doc-delay 0.5)
  (lsp-ui-peek-always-show t)
  (lsp-ui-peek-fontify 'always)
  :custom-face
  (lsp-ui-peek-highlight ((t (:inherit nil :background nil :foreground nil :weight semi-bold :box (:line-width -1)))))
  :bind
  ([remap xref-find-references] . lsp-ui-peek-find-references)
  ("C-M-l" . lsp-ui-peek-find-definitions)
  :config
  ;;;; LSP UI posframe ;;;;
  (defun lsp-ui-peek--peek-display (src1 src2)
    (-let* ((win-width (frame-width))
            (lsp-ui-peek-list-width (/ (frame-width) 2))
            (string (-some--> (-zip-fill "" src1 src2)
                      (--map (lsp-ui-peek--adjust win-width it) it)
                      (-map-indexed 'lsp-ui-peek--make-line it)
                      (-concat it (lsp-ui-peek--make-footer))))
            )
      (setq lsp-ui-peek--buffer (get-buffer-create " *lsp-peek--buffer*"))
      (posframe-show lsp-ui-peek--buffer
                     :string (mapconcat 'identity string "")
                     :min-width (frame-width)
                     :poshandler #'posframe-poshandler-frame-center)))

  (defun lsp-ui-peek--peek-destroy ()
    (when (bufferp lsp-ui-peek--buffer)
      (posframe-delete lsp-ui-peek--buffer))
    (setq lsp-ui-peek--buffer nil
          lsp-ui-peek--last-xref nil)
    (set-window-start (get-buffer-window) lsp-ui-peek--win-start))

  (advice-add #'lsp-ui-peek--peek-new :override #'lsp-ui-peek--peek-display)
  (advice-add #'lsp-ui-peek--peek-hide :override #'lsp-ui-peek--peek-destroy)
  ;;;; LSP UI posframe ;;;;
  )
#+END_SRC

***** [[#lsp-pyright][LSP Pyright-]]
*** YASnippet-snippets
#+BEGIN_SRC emacs-lisp
(use-package yasnippet-snippets
  :straight (:host github :repo "KaratasFurkan/yasnippet-snippets" :branch "furkan")
  :after yasnippet)
#+END_SRC

*** Rainbow Delimiters
#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))
#+END_SRC

*** Color Identifiers Mode
#+BEGIN_SRC emacs-lisp
(use-package color-identifiers-mode
  :commands color-identifiers-mode)
#+END_SRC

*** Symbol Overlay
#+BEGIN_SRC emacs-lisp
(use-package symbol-overlay
  :commands (symbol-overlay-mode symbol-overlay-put)
  :hook
  (emacs-lisp-mode . symbol-overlay-mode))
#+END_SRC

** Emacs Lisp
*** Elisp Slime Nav
#+BEGIN_SRC emacs-lisp
(use-package elisp-slime-nav
  :bind
  ( :map emacs-lisp-mode-map
    ("M-." . elisp-slime-nav-find-elisp-thing-at-point)))
#+END_SRC

*** Aggressive Indent
#+BEGIN_SRC emacs-lisp
;; TODO: try in other languages (html, css, js, c)
(use-package aggressive-indent
  :hook (emacs-lisp-mode . aggressive-indent-mode))
#+END_SRC

*** Lisp Data Mode
#+BEGIN_SRC emacs-lisp
(use-package lisp-mode
  :straight (:type built-in)
  :hook
  (lisp-data-mode . (lambda ()
                      (when (= (buffer-name) ".dir-locals.el")
                        (fk/add-local-hook 'before-save-hook
                                           (lambda ()
                                             (align-regexp (point-min) (point-max) "\\(\\s-*\\). (")
                                             (fk/indent-buffer)))))))
#+END_SRC

** Python
*** Python
#+BEGIN_SRC emacs-lisp
(use-package python
  :straight (:type built-in)
  :init
  (add-to-list 'all-the-icons-icon-alist
               '("\\.py$" all-the-icons-alltheicon "python" :height 1.1 :face all-the-icons-dblue))
  :custom
  (python-shell-interpreter "ipython")
  (python-shell-interpreter-args "-i --simple-prompt")
  (python-indent-guess-indent-offset-verbose nil)
  :bind
  ( :map python-mode-map
    ;;("M-n" . python-nav-forward-block)
    ;;("M-p" . python-nav-backward-block)
    ("C-c i r" . python-indent-shift-right)
    ("C-c i l" . python-indent-shift-left))
  :hook
  ;; With pyls:
  ;; pip install python-language-server flake8 pyls-black(optional) pyls-isort(optional)
  ;; With pyright
  ;; sudo npm install -g pyright && pip install flake8 black(optional)
  ;; NOTE: these hooks runs in reverse order
  (python-mode . fk/python-auto-f-string-mode)
  (python-mode . (lambda () (setq-local company-prescient-mode nil)))
  (python-mode . flycheck-mode)
  (python-mode . lsp-deferred)
  ;;(python-mode . (lambda () (fk/add-local-hook 'before-save-hook 'eglot-format-buffer)))
  ;;(python-mode . eglot-ensure)
  ;; importmagic runs ~100mb ipython process per python file, and it does not
  ;; always find imports, 60%-70% maybe. I stop using this, but still want to keep.
  ;;(python-mode . importmagic-mode)
  (python-mode . fk/activate-pyvenv)
  (python-mode . (lambda () (require 'tree-sitter-langs) (tree-sitter-hl-mode)))
  (python-mode . (lambda () (setq-local fill-column 88)))
  :config
  ;;;; Smart f-strings
  ;; https://github.com/ubolonton/emacs-tree-sitter/issues/52
  ;; TODO: Create a mode from this
  (defun fk/python-f-string-ify ()
    ;; Does nothing if major-mode is not python or point is not on a string.
    (when-let* ((python-mode-p (eq major-mode 'python-mode))
                (str (tree-sitter-node-at-point 'string))
                (text (ts-node-text str)))
      (let* ((is-f-string (string-match-p "^[bru]*f+[bru]*\\(\"\\|'\\)" text))
             (end-of-string (ts-node-end-position (tree-sitter-node-at-point 'string)))
             (is-there-format-method (string= ".format"
                                              (buffer-substring-no-properties end-of-string(+ end-of-string 7))))
             (should-f-string (and (s-contains-p "{" text)
                                   (s-contains-p "}" text)
                                   (not is-there-format-method))))
        (if should-f-string
            (unless is-f-string
              (save-excursion
                (goto-char (ts-node-start-position str))
                (insert "f")))
          (when is-f-string
            (save-excursion
              (goto-char (ts-node-start-position str))
              (when (char-equal (char-after) ?f)
                (delete-char 1))))))))
  ;; Experiment to implement without tree-sitter dependency, does not work yet
  ;; deletes whole string when delete active region
  ;; (defun fk/python-f-string-ify ()
  ;; Does nothing if major-mode is not python or point is not on a string.
  ;; (when-let* ((python-mode-p (eq major-mode 'python-mode))
  ;;             (is-string (nth 3 (syntax-ppss))))
  ;;   (let* ((beg-of-string (nth 8 (syntax-ppss)))
  ;;          (end-of-string (save-excursion
  ;;                           (goto-char beg-of-string)
  ;;                           (forward-sexp)
  ;;                           (point)))
  ;;          (string (buffer-substring-no-properties beg-of-string end-of-string))
  ;;          (is-f-string (char-equal (char-before beg-of-string) ?f))
  ;;          (should-f-string (and (s-contains-p "{" string)
  ;;                                (s-contains-p "}" string))))
  ;;     (if should-f-string
  ;;         (unless is-f-string
  ;;           (save-excursion
  ;;             (goto-char beg-of-string)
  ;;             (insert "f")))
  ;;       (when is-f-string
  ;;         (save-excursion
  ;;           (goto-char beg-of-string)
  ;;           (backward-delete-char 1)))))))

  ;; When not using wrap-region or anything that changes "{" keybinding
  ;; (define-key python-mode-map (kbd "{") (lambda ()
  ;;                                         (interactive)
  ;;                                         (call-interactively 'self-insert-command)
  ;;                                         (fk/python-f-string-ify)))

  (define-minor-mode fk/python-auto-f-string-mode
    "Toggle fk/python-auto-f-string-mode which adds 'f' at the
beginning of the string that has curly brackets in it."
    :init-value t
    (if fk/python-auto-f-string-mode
        (progn
          (defadvice wrap-region-trigger (after smart-f-string activate) (fk/python-f-string-ify))
          (defadvice delete-char (after smart-f-string activate) (fk/python-f-string-ify))
          (defadvice delete-active-region (after smart-f-string activate) (fk/python-f-string-ify))
          (defadvice kill-region (after smart-f-string activate) (fk/python-f-string-ify)))
      (ad-remove-advice 'wrap-region-trigger 'after 'smart-f-string)
      (ad-update 'wrap-region-trigger)
      (ad-remove-advice 'delete-char 'after 'smart-f-string)
      (ad-update 'delete-char)
      (ad-remove-advice 'delete-active-region 'after 'smart-f-string)
      (ad-update 'delete-active-region)
      (ad-remove-advice 'kill-region 'after 'smart-f-string)
      (ad-update 'kill-region)))


  ;; Grep functions for Django

  (defun fk/helm-ag-search-with-glob (glob &optional query)
    (interactive)
    (let ((helm-ag-base-command (concat helm-ag-base-command " --glob " glob)))
      (fk/helm-do-ag-project-root-or-current-dir (or query "^class "))))

  (defun fk/django-search-models ()
    (interactive)
    (fk/helm-ag-search-with-glob "models.py"))

  (defun fk/django-search-views ()
    (interactive)
    (fk/helm-ag-search-with-glob "views.py"))

  (defun fk/django-search-serializers ()
    (interactive)
    (fk/helm-ag-search-with-glob "serializers.py"))

  (defun fk/django-search-tests ()
    (interactive)
    (fk/helm-ag-search-with-glob "test*.py"))

  (defun fk/django-search-settings ()
    (interactive)
    ;; TODO: this glob does not work
    (fk/helm-ag-search-with-glob "settings*.py" ""))

  (defun fk/django-search-admins ()
    (interactive)
    (fk/helm-ag-search-with-glob "admin.py" ""))

  (defun fk/django-search-permissions ()
    (interactive)
    (fk/helm-ag-search-with-glob "permissions.py"))

  (defun fk/django-search-mixins ()
    (interactive)
    (fk/helm-ag-search-with-glob "mixins.py"))

  (defun fk/django-search-urls ()
    (interactive)
    (fk/helm-ag-search-with-glob "urls.py" "name ="))

  (bind-keys*
   :map django
   ("m" . fk/django-search-models)
   ("v" . fk/django-search-views)
   ("s" . fk/django-search-serializers)
   ("t" . fk/django-search-tests)
   ("S" . fk/django-search-settings)
   ("a" . fk/django-search-admins)
   ("p" . fk/django-search-permissions)
   ("x" . fk/django-search-mixins)
   ("u" . fk/django-search-urls))

  ;; Utility functions for Django

  (defun fk/django-copy-path-of-test-at-point ()
    "Add path of the test at point to kill-ring. Returns the path."
    (interactive)
    (let* ((defuns (seq-subseq (split-string (which-function) "\\.") 0 2))
           (class (car defuns))
           (func (let ((f (-second-item defuns))) (and f (string-match "^test" f) f)))
           (module (fk/django-get-module))
           (path (concat module (and module class ".") class (and class func ".") func)))
      (kill-new path)))

  (defun fk/django-get-module ()
    "pony-get-module originally."
    (let* ((root (projectile-project-root))
           (path (file-name-sans-extension (or buffer-file-name (expand-file-name default-directory)))))
      (when (string-match (projectile-project-root) path)
        (let ((path-to-class (substring path (match-end 0))))
          (mapconcat 'identity (split-string path-to-class "/") ".")))))

  (bind-keys*
   :map django
   ("c" . fk/django-copy-path-of-test-at-point)))
#+END_SRC

*** Pyvenv
#+BEGIN_SRC emacs-lisp
(use-package pyvenv
  :after python
  :config
  (defun fk/activate-pyvenv ()
    "Activate python environment according to the `.venv' file."
    (interactive)
    (pyvenv-mode)
    (let* ((pdir (projectile-project-root)) (pfile (concat pdir ".venv")))
      (if (file-exists-p pfile)
          (pyvenv-workon (with-temp-buffer
                           (insert-file-contents pfile)
                           (nth 0 (split-string (buffer-string)))))))))
#+END_SRC

*** Import Magic
#+BEGIN_SRC emacs-lisp
(use-package importmagic
  ;; pip install importmagic epc
  ;;
  ;; importmagic runs ~100mb ipython process per python file, and it does not
  ;; always find imports, 60%-70% maybe. I stop using this, but still want to keep.
  :commands importmagic-mode)
#+END_SRC

*** Black
#+BEGIN_SRC emacs-lisp
(use-package blacken
  :commands blacken-mode blacken-buffer)
#+END_SRC

*** Isort
#+BEGIN_SRC emacs-lisp
(use-package py-isort
  :commands py-isort-buffer)
#+END_SRC

*** LSP Pyright
#+BEGIN_SRC emacs-lisp
(use-package lsp-pyright
  :after lsp-mode
  :custom
  (lsp-pyright-auto-import-completions nil)
  (lsp-pyright-typechecking-mode "off")
  :config
  (fk/async-process
   "npm outdated -g | grep pyright | wc -l" nil
   (lambda (process output)
     (pcase output
       ("0\n" (message "Pyright is up to date."))
       ("1\n" (message "A pyright update is available."))))))
#+END_SRC

** TODO Web Mode
TODO: seperate sections (html, css..)
*** Web Mode (HTML)
#+BEGIN_SRC emacs-lisp
(use-package web-mode
  :custom
  (css-indent-offset 2)
  ;;(web-mode-markup-indent-offset 2) set in .dir-locals.el according to project
  (web-mode-enable-auto-indentation nil)
  (web-mode-enable-auto-pairing nil)
  (web-mode-engines-alist '(("django" . "\\.html\\'")))
  :custom-face
  (web-mode-block-string-face ((t (:inherit font-lock-string-face))))
  (web-mode-html-attr-value-face ((t (:inherit font-lock-string-face :foreground nil))))
  (web-mode-current-element-highlight-face ((t (:inherit highlight))))
  :mode ;; Copied from spacemacs
  (("\\.phtml\\'"      . web-mode)
   ("\\.tpl\\.php\\'"  . web-mode)
   ("\\.twig\\'"       . web-mode)
   ("\\.xml\\'"        . web-mode)
   ("\\.html\\'"       . web-mode)
   ("\\.htm\\'"        . web-mode)
   ("\\.[gj]sp\\'"     . web-mode)
   ("\\.as[cp]x?\\'"   . web-mode)
   ("\\.eex\\'"        . web-mode)
   ("\\.erb\\'"        . web-mode)
   ("\\.mustache\\'"   . web-mode)
   ("\\.handlebars\\'" . web-mode)
   ("\\.hbs\\'"        . web-mode)
   ("\\.eco\\'"        . web-mode)
   ("\\.ejs\\'"        . web-mode)
   ("\\.svelte\\'"     . web-mode)
   ("\\.djhtml\\'"     . web-mode))
  :hook
  (web-mode . web-mode-toggle-current-element-highlight))
#+END_SRC

*** Emmet Mode
**** Emmet Mode
#+BEGIN_SRC emacs-lisp
(use-package emmet-mode
  :custom
  (emmet-move-cursor-between-quotes t)
  :custom-face
  (emmet-preview-input ((t (:inherit lazy-highlight))))
  :bind
  ( :map emmet-mode-keymap
    ([remap yas-expand] . emmet-expand-line)
    ("M-n"  . emmet-next-edit-point)
    ("M-p"  . emmet-prev-edit-point)
    ("C-c p" . emmet-preview-mode))
  :hook
  ;;(rjsx-mode . (lambda () (setq emmet-expand-jsx-className? t)))
  (web-mode . emmet-mode)
  (css-mode . emmet-mode))
#+END_SRC

**** Helm Emmet
#+BEGIN_SRC emacs-lisp
(use-package helm-emmet
  :after helm emmet)
#+END_SRC

*** Company Web
#+BEGIN_SRC emacs-lisp
(use-package company-web
  :after web-mode
  :config
  (add-to-list 'company-backends '(company-web-html :with company-yasnippet)))
#+END_SRC

*** Json Mode
#+BEGIN_SRC emacs-lisp
(use-package json-mode
  :mode ("\\.json\\'" . json-mode))
(use-package json-navigator
  :commands json-navigator-navigate-region)
#+END_SRC

*** Prettier
#+BEGIN_SRC emacs-lisp
(use-package prettier-js
  :hook
  ;;(web-mode . prettier-js-mode) ;; breaks django templates
  (css-mode . prettier-js-mode)
  (json-mode . prettier-js-mode)
  (js2-mode . prettier-js-mode))
#+END_SRC

*** Auto Rename Tag
#+BEGIN_SRC emacs-lisp
(use-package auto-rename-tag
  :hook
  (web-mode . auto-rename-tag-mode))
#+END_SRC

** JavaScript
*** JavaScript
#+BEGIN_SRC emacs-lisp
(use-package js2-mode
  :mode "\\.js\\'"
  :custom
  (js-indent-level 2)
  :hook
  (js2-mode . flycheck-mode)
  ;;(js2-mode . (lambda () (require 'tree-sitter-langs) (tree-sitter-hl-mode)))
  (js2-mode . lsp-deferred))
#+END_SRC

** Go
*** Go Mode
#+BEGIN_SRC emacs-lisp
(use-package go-mode
  ;; install go & go-tools, for arch based linux:
  ;; sudo pacman -S go go-tools
  :mode "\\.go\\'"
  :init
  (defface golang-blue
    '((((background dark)) :foreground "#69D7E4")
      (((background light)) :foreground "#69D7E4"))
    "Face for golang icon")
  (add-to-list 'all-the-icons-icon-alist
               '("\\.go$" all-the-icons-fileicon "go" :height 1 :face golang-blue))
  :custom
  (gofmt-command "goimports")
  :hook
  (go-mode . flycheck-mode)
  (go-mode . lsp-deferred)
  (go-mode . (lambda () (require 'tree-sitter-langs) (tree-sitter-hl-mode)))
  (go-mode . (lambda () (fk/add-local-hook 'before-save-hook 'gofmt))))
#+END_SRC

** C
#+BEGIN_SRC emacs-lisp
(use-package cc-mode
  :bind
  ( :map c-mode-base-map
    ("C-c C-c" . fk/c-run))
  :hook
  (c-mode . lsp-deferred)
  (c++-mode . lsp-deferred))

(use-package clang-format
  :commands clang-format-buffer clang-format-region
  :hook
  (c-mode . (lambda () (fk/add-local-hook 'before-save-hook 'clang-format-buffer)))
  (c++-mode . (lambda () (fk/add-local-hook 'before-save-hook 'clang-format-buffer))))
#+END_SRC

* TODO Tools
** Dired
*** Dired
#+BEGIN_SRC emacs-lisp
(use-package dired
  :straight (:type built-in)
  :custom
  (dired-listing-switches "-lAhp --group-directories-first")
  (dired-dwim-target t)
  (mouse-1-click-follows-link nil)
  (wdired-allow-to-change-permissions 'advanced)
  :bind
  ( :map dired-mode-map
    ("H" . dired-hide-details-mode)
    ("C-M-u" . dired-up-directory)
    ("O" . browse-url-of-dired-file)                  ; open with associated app
    ("<mouse-1>" . fk/dired-left-click)               ; left click
    ("<mouse-2>" . dired-up-directory)                ; middle click
    ("<mouse-3>" . (lambda (event) (interactive "e")  ; right click
                     (mouse-set-point event)
                     (dired-subtree-toggle)))
    ("RET" . fk/dired-smart-open)
    ("C-c C-e" . wdired-change-to-wdired-mode))
  :hook
  (dired-mode . dired-hide-details-mode)
  ;; Fix `save-place' in dired when opening from bookmarks (mostly from dashboard)
  (bookmark-after-jump . save-place-dired-hook)
  :config
  (defun fk/dired-left-click (event)
    "When file is a directory, open directory in dired. Otherwise, open file
with associated application."
    (interactive "e")
    (mouse-set-point event)
    (let ((file (dired-get-file-for-visit)))
      (if (file-directory-p file)
          (dired-mouse-find-file event)
        (browse-url-of-dired-file))))

  ;; TODO: change this to "open video (maybe some other types too) files with
  ;; associated apps".
  (advice-add 'browse-url :override 'browse-url-xdg-open)  ; I had to add this in emacs28
  (defun fk/dired-smart-open ()
    "If file size bigger than 50mb, open with associated system application,
else call `dired-find-file'"
    (interactive)
    (if (> (file-attribute-size (file-attributes (dired-file-name-at-point)))
           50000000)
        (browse-url-of-dired-file)
      (dired-find-file)))

  ;; Dired in single buffer (prevent dired from opening a lot of buffers)
  (put 'dired-find-alternate-file 'disabled nil)

  (defun fk/dired-up-directory ()
    "`dired-up-directory' in same buffer."
    (interactive)
    (find-alternate-file ".."))

  (advice-add 'dired-up-directory :override 'fk/dired-up-directory)
  (advice-add 'dired-find-file :override 'dired-find-alternate-file))
#+END_SRC

*** Dired-X
#+BEGIN_SRC emacs-lisp
(use-package dired-x
  :straight (:type built-in)
  :after dired
  :custom
  (dired-omit-files "^\\..*$")
  :bind
  ( :map dired-mode-map
    ("h" . dired-omit-mode)))
#+END_SRC

*** Dired Icons
#+BEGIN_SRC emacs-lisp
(use-package all-the-icons-dired
  :hook (dired-mode . all-the-icons-dired-mode)
  :config
  (add-to-list 'all-the-icons-icon-alist
               '("\\.mkv" all-the-icons-faicon "film"
                 :face all-the-icons-blue))
  (add-to-list 'all-the-icons-icon-alist
               '("\\.srt" all-the-icons-octicon "file-text"
                 :v-adjust 0.0 :face all-the-icons-dcyan))

  ;; Turn off all-the-icons-dired-mode before wdired-mode
  ;; TODO: disable icons just before save, not during wdired-mode
  (defadvice wdired-change-to-wdired-mode (before turn-off-icons activate)
    (all-the-icons-dired-mode -1))
  (defadvice wdired-change-to-dired-mode (after turn-on-icons activate)
    (all-the-icons-dired-mode 1)))
#+END_SRC

*** Dired Subtree
#+BEGIN_SRC emacs-lisp
(use-package dired-subtree
  :after dired
  :custom
  (dired-subtree-use-backgrounds nil)
  :bind
  ( :map dired-mode-map
    ("TAB" . dired-subtree-toggle)
    ("<tab>" . dired-subtree-toggle))
  :config
  ;; Fix "no icons in subtree" issue.
  (defadvice dired-subtree-toggle
      (after add-icons activate) (revert-buffer)))
#+END_SRC

*** Dired Sidebar
#+BEGIN_SRC emacs-lisp
(use-package dired-sidebar
  :commands dired-sidebar-toggle-sidebar
  :bind*
  ( :map windows
    ("t" . dired-sidebar-toggle-sidebar))
  :hook
  (dired-sidebar-mode . fk/darken-background)
  :config
  (defun sidebar-toggle ()
    "Toggle both `dired-sidebar' and `ibuffer-sidebar'."
    (interactive)
    (dired-sidebar-toggle-sidebar)
    (ibuffer-sidebar-toggle-sidebar)))
#+END_SRC

*** IBuffer Sidebar
#+BEGIN_SRC emacs-lisp
(use-package ibuffer-sidebar
  :commands ibuffer-sidebar-toggle-sidebar
  :bind
  ( :map ibuffer-mode-map
    ("M-o" . nil)))
#+END_SRC

*** Dired Show Readme
#+BEGIN_SRC emacs-lisp
(use-package dired-show-readme
  :straight (:host gitlab :repo "kisaragi-hiu/dired-show-readme")
  :commands dired-show-readme-mode
  ;; :hook
  ;; (dired-mode . dired-show-readme-mode)
  )
#+END_SRC

*** Dired Posframe
#+BEGIN_SRC emacs-lisp
(use-package dired-posframe
  :straight (:host github :repo "conao3/dired-posframe.el")
  :commands dired-posframe-mode)
#+END_SRC

*** Dired Recent
#+BEGIN_SRC emacs-lisp
(use-package dired-recent
  :after dired  ; TODO: is bind still defer?
  :bind
  ( :map files
    ("d" . dired-recent-open))
  :config
  (dired-recent-mode))
#+END_SRC

** Org
*** Org
#+BEGIN_SRC emacs-lisp
(use-package org
  :straight (:type built-in)
  :custom
  (org-confirm-babel-evaluate nil)
  (org-ellipsis "↴") ;; ↴, ▼, ▶, ⤵
  (org-src-window-setup 'current-window)
  (org-startup-indented t)
  (org-startup-with-inline-images t)
  (org-image-actual-width '(400))
  (org-hierarchical-todo-statistics nil)
  (org-checkbox-hierarchical-statistics nil)
  (org-src-preserve-indentation t)
  (org-adapt-indentation nil)
  (org-tags-column 0)
  (org-imenu-depth 20)
  (org-hide-emphasis-markers t)
  ;;;; Getting Things Done ;;;;
  (org-directory "~/org")  ; This is default already but lets declare explicitly
  (org-agenda-files `(,(expand-file-name "agenda.org" org-directory)))
  (org-display-custom-times t)
  (org-time-stamp-custom-formats '("<%d/%m/%Y %A>" . "<%d/%m/%Y %A %H:%M>"))
  (org-bookmark-names-plist '())  ; Do not create bookmarks
  (org-capture-templates '(("i" "Capture to inbox" entry
                            (file "inbox.org")
                            "* %?\nCREATED: %U")))
  (org-refile-targets '(("todos.org" :level . 1)
                        ("someday.org" :level . 1)
                        ("archive.org" :level . 1)))
  (org-default-priority ?A)
  ;;;; Getting Things Done ;;;;
  :custom-face
  (org-block ((t (:extend t))))
  (org-ellipsis ((t (:foreground nil :inherit org-tag :weight light :height 0.9))))
  (org-checkbox ((t (:foreground "white"))))
  (org-block-begin-line ((t (:extend t))))
  (org-block-end-line ((t (:extend t))))
  (org-level-4 ((t (:height 1.1 :weight bold))))
  (org-level-3 ((t (:height 1.15 :weight bold))))
  (org-level-2 ((t (:height 1.2 :weight bold))))
  (org-level-1 ((t (:height 1.3 :weight bold))))
  (org-drawer ((t (:foreground nil :inherit font-lock-comment-face))))
  (org-table ((t (:inherit fixed-pitch :foreground "white"))))
  (org-document-title ((t (:height 1.5))))
  :bind
  ( :map org
    ("c" . (lambda () (interactive) (org-capture :keys "i")))
    :map org-mode-map
    ("C-c C-e" . org-edit-special)
    ("M-n" . org-next-visible-heading)
    ("M-p" . org-previous-visible-heading)
    ("C-c C-f". fk/org-imenu)
    ("C-x C-1" . outline-hide-other)
    ("C-c C-r" . org-refile)
    ("C-c C-a" . fk/org-refile-done)  ; "a" for archive
    ("C-c C-t" . fk/org-refile-trash)
    ("C-c C-p" . org-priority-down)
    :map org-src-mode-map
    ("C-c C-c" . org-edit-src-exit))
  :hook
  ;; TODO: bunlar yerine prettify + box face'i ile yap
  (org-mode . prettify-symbols-mode)
  (org-mode . (lambda () (setq prettify-symbols-alist
                               '(("[ ]" . "☐")
                                 ("[X]" . "☑") ;; ✔
                                 ("[-]" . "◿"))))) ;; ◪, ⬔
  (org-babel-after-execute . org-redisplay-inline-images)
  (org-mode . (lambda () (fk/add-local-hook 'before-save-hook 'org-redisplay-inline-images)))
  (org-after-refile-insert . (lambda () (fk/org-sort-by-priority) (save-buffer)))
  :config
  (add-to-list 'org-emphasis-alist '("#" (:box '(:line-width -1))))  ; FIXME: does not work.
  (setf (cdr (assoc "*" org-emphasis-alist)) '((:weight extra-bold :underline t :foreground "#DDDDDD")))

  (defun fk/org-babel-load-languages ()
    "Load languages I use."
    (interactive)
    (org-babel-do-load-languages 'org-babel-load-languages '((python . t)
                                                             (emacs-lisp . t)
                                                             (shell . t))))

  ;; Beautify org mode
  (font-lock-add-keywords 'org-mode
                          '(("^ *\\([-]\\) "
                             (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))
  (font-lock-add-keywords 'org-mode
                          '(("^ *\\([+]\\) "
                             (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "◦"))))))
  (defface org-checkbox-done-text
    '((t (:inherit 'font-lock-comment-face :slant normal)))
    "Face for the text part of a checked org-mode checkbox.")

  (font-lock-add-keywords
   'org-mode
   `(("^[ \t]*\\(?:[-+*]\\|[0-9]+[).]\\)[ \t]+\\(\\(?:\\[@\\(?:start:\\)?[0-9]+\\][ \t]*\\)?\\[\\(?:X\\|\\([0-9]+\\)/\\2\\)\\][^\n]*\n\\)"
      1 'org-checkbox-done-text prepend))
   'append)

  (defun fk/org-refile-fixed-location (file headline)
    "Refile headline without selecting from refile-targets."
    (let ((pos (save-window-excursion
                 (find-file file)
                 (org-find-exact-headline-in-buffer headline))))
      (org-refile nil nil (list headline file nil pos))))

  (defun fk/org-refile-fixed-location-with-closed-timestamp (file headline)
    "Refile headline without selecting from refile-targets. Add
    \"CLOSED\" timestamp info."
    (add-hook 'org-after-refile-insert-hook (lambda () (org-add-planning-info 'closed (org-current-effective-time))) -100)
    (fk/org-refile-fixed-location file headline)
    (remove-hook 'org-after-refile-insert-hook (lambda () (org-add-planning-info 'closed (org-current-effective-time)))))

  (defun fk/org-refile-done ()
    (interactive)
    (fk/org-refile-fixed-location-with-closed-timestamp "archive.org" "Done"))

  (defun fk/org-refile-trash ()
    (interactive)
    (fk/org-refile-fixed-location-with-closed-timestamp "archive.org" "Trash")))
#+END_SRC

*** Custom Functions
**** org-imenu
#+BEGIN_SRC emacs-lisp
(defun fk/org-imenu ()
  "Go to a heading with helm-imenu and expand the heading."
  (interactive)
  (helm-imenu)
  (show-subtree))
#+END_SRC

**** org-screenshot
#+BEGIN_SRC emacs-lisp
(defun fk/org-screenshot ()
  ;; fork from: https://delta.re/org-screenshot/
  ;; https://github.com/kadircancetin/.emacs.d
  "Take a screenshot into a time stamped unique-named file in the
  same directory as the org-buffer and insert a link to this file."
  (interactive)
  (when (eq major-mode 'org-mode)
    (suspend-frame)
    (run-at-time
     "500 millisec" nil  ; I have animation when minimize window
     (lambda ()
       (org-display-inline-images)
       (setq filename
             (concat
              (make-temp-name
               (concat (file-name-nondirectory (buffer-file-name))
                       "_imgs/"
                       (format-time-string "%Y%m%d_%H%M%S_")) ) ".png"))
       (unless (file-exists-p (file-name-directory filename))
         (make-directory (file-name-directory filename)))
       ;; take screenshot
       (if (eq system-type 'darwin)
           (call-process "screencapture" nil nil nil "-i" filename))
       (if (eq system-type 'gnu/linux)
           (call-process "import" nil nil nil filename))
       ;; insert into file if correctly taken
       (if (file-exists-p filename)
           (insert (concat "[[file:" filename "]]")))
       (org-remove-inline-images)
       (org-display-inline-images)
       (other-frame 0)))))
#+END_SRC

**** org-indent-src-block
#+BEGIN_SRC emacs-lisp
(defun fk/org-indent-src-block ()
  (interactive)
  (org-edit-special)
  (fk/indent-buffer)
  (org-edit-src-exit))
#+END_SRC

**** org-sort-by-priority
#+BEGIN_SRC emacs-lisp
(defun fk/org-sort-by-priority ()
  "Sort entries in level=2 by priority."
  (interactive)
  (org-map-entries (lambda () (condition-case nil
                                  (org-sort-entries nil ?p)
                                (error nil)))
                   "LEVEL=1")
  (org-set-startup-visibility))
#+END_SRC

*** Org Bullets
#+BEGIN_SRC emacs-lisp
(use-package org-bullets
  :custom
  (org-bullets-bullet-list '("⁖"))
  :hook (org-mode . org-bullets-mode))
#+END_SRC

*** Toc Org
#+BEGIN_SRC emacs-lisp
(use-package toc-org
  :straight (:host github :repo "KaratasFurkan/toc-org" :branch "insert-silently")
  :custom
  (toc-org-max-depth 10)
  (toc-org-insert-silently t)
  :hook (org-mode . toc-org-mode))
#+END_SRC

*** Org Table Auto Align
#+BEGIN_SRC emacs-lisp
;; TODO: make this snippet a package
;; (use-package org-table-auto-align-mode ; NOTE: breaks undo
;;   :load-path (lambda () (concat user-emacs-directory "load/org-table-auto-align-mode"))
;;   :hook org-mode)
#+END_SRC

*** ob-async
#+BEGIN_SRC emacs-lisp
(use-package ob-async
  :after org)
#+END_SRC

*** Org Pomodoro
#+BEGIN_SRC emacs-lisp
(use-package org-pomodoro
  :commands org-pomodoro)
#+END_SRC

*** Org Roam
**** Org Roam
#+BEGIN_SRC emacs-lisp
(use-package org-roam
  :custom
  (org-roam-directory "~/org/roam/")
  :bind
  ( :map org
    ("o" . org-roam-find-file)))
#+END_SRC

**** Org Roam Server
#+BEGIN_SRC emacs-lisp
;;(use-package org-roam-server
;;  :after org-roam)
#+END_SRC

**** Company Org Roam
#+BEGIN_SRC emacs-lisp
(use-package company-org-roam
  :after org-roam
  :config
  (add-to-list 'company-backends 'company-org-roam))
#+END_SRC

*** Org Fancy Priorities
#+BEGIN_SRC emacs-lisp
(use-package org-fancy-priorities
  :custom
  (org-fancy-priorities-list '("[!!!]" "[!!]" "[!]"))
  (org-priority-faces '((?A . (:foreground "orangered2" :weight extrabold :height 1.3))  ; org-mode
                        (?B . (:foreground "orange" :weight extrabold :height 1.3))
                        (?C . (:foreground "Burlywood" :weight extrabold :height 1.3))))
  :hook
  (org-mode . org-fancy-priorities-mode))
#+END_SRC

*** Org Tree Slide
#+BEGIN_SRC emacs-lisp
(use-package org-tree-slide
  :commands org-tree-slide-mode
  :custom
  (org-tree-slide-activate-message "")
  (org-tree-slide-deactivate-message "")
  (org-tree-slide-breadcrumbs "    >    ")
  (org-tree-slide-heading-emphasis t)
  (org-tree-slide-slide-in-waiting 0.025)
  :custom-face
  (org-tree-slide-heading-level-1 ((t (:height 1.8 :weight bold))))
  (org-tree-slide-heading-level-2 ((t (:height 1.5 :weight bold))))
  (org-tree-slide-heading-level-3 ((t (:height 1.5 :weight bold))))
  (org-tree-slide-heading-level-4 ((t (:height 1.5 :weight bold))))
  :bind
  ( :map org
    ("s" . org-tree-slide-mode)
    :map org-tree-slide-mode-map
    ("<f8>" . org-tree-slide-content)
    ("<f9>" . org-tree-slide-move-previous-tree)
    ("<f10>" . org-tree-slide-move-next-tree)
    ("C-n" . (lambda () (interactive) (if cursor-type
                                          (next-line)
                                        (setq-local cursor-type t)
                                        (next-line)))))
  :hook
  (org-tree-slide-play . (lambda () (setq-local beacon-mode nil)))
  (org-tree-slide-stop . (lambda () (setq-local beacon-mode t)))
  (org-tree-slide-before-narrow . (lambda () (setq-local cursor-type nil)))
  (org-tree-slide-stop . (lambda () (setq-local cursor-type t)))
  (org-tree-slide-play . variable-pitch-mode)
  (org-tree-slide-stop . (lambda () (variable-pitch-mode -1)))
  (org-tree-slide-play . fk/hide-org-metalines-toggle)
  (org-tree-slide-stop . fk/hide-org-metalines-toggle)
  (org-tree-slide-before-narrow . org-remove-inline-images)
  (org-tree-slide-after-narrow . org-display-inline-images)
  (org-tree-slide-play . fk/org-tree-slide-update-modeline)
  (org-tree-slide-stop . fk/org-tree-slide-update-modeline)
  (org-tree-slide-play . (lambda () (setq-local olivetti-body-width 95) (olivetti-mode 1)))
  (org-tree-slide-stop . (lambda () (setq-local olivetti-body-width 120) (olivetti-mode 1)))
  ;; Fun
  (org-tree-slide-after-narrow . (lambda () (when (fk/buffer-contains-substring "turkish-mode")
                                              (fk/async-process
                                               "ffplay -nodisp -nostats -hide_banner -volume 10 -t 4.7 ./olurum_turkiyem.mp3"))))
  :config
  (defun fk/buffer-contains-substring (string)
    (save-excursion
      (save-match-data
        (goto-char (point-min))
        (and-let* ((pos (search-forward string nil t))
                   (visible (not (outline-invisible-p pos))))))))

  (setq fk/org-meta-line-hide-p nil)
  (setq fk/org-meta-line-face-remap nil)

  (defun fk/hide-org-metalines-toggle ()
    "Hide or unhide meta lines starting with \"#+\" in org-mode."
    (interactive)
    (if fk/org-meta-line-hide-p
        (face-remap-remove-relative fk/org-meta-line-face-remap)
      (setq fk/org-meta-line-face-remap (face-remap-add-relative 'org-meta-line
                                                                 :foreground fk/background-color)))
    (setq fk/org-meta-line-hide-p (not fk/org-meta-line-hide-p)))

  (defun fk/org-tree-slide-update-modeline ()
    "Show current page in modeline."
    (let ((slide-position '(:eval (format " %s " (org-tree-slide--count-slide (point))))))
      (if (org-tree-slide--active-p)
          (setq-local global-mode-string (append global-mode-string (list slide-position)))
        (setq-local global-mode-string (delete slide-position global-mode-string))))))

;; Alternative
(use-package epresent
  :commands epresent-run)
#+END_SRC

*** Org Export Twitter Bootstrap
#+BEGIN_SRC emacs-lisp
(use-package ox-twbs
  :after org)
#+END_SRC

*** Valign Mode
#+BEGIN_SRC emacs-lisp
(use-package valign
  :straight (:host github :repo "casouri/valign")
  :custom
  (valign-fancy-bar t)
  :hook
  (org-mode . valign-mode))
#+END_SRC

** Version Control
*** Magit
**** Magit
#+BEGIN_SRC emacs-lisp
(use-package magit
  :commands magit
  :bind*
  ( :map version-control
    ("v" . magit-status)
    ("s" . magit-status)
    :map magit-mode-map
    ("o" . (lambda () (interactive)
             (call-interactively 'magit-diff-visit-file-other-window)
             (recenter-top-bottom)))
    ("C-c C-f" . magit-find-file))
  :hook
  ;;(magit-mode . magit-toggle-margin) FIXME: does not work
  ;;(magit-mode . magit-toggle-margin-details)
  (git-commit-setup . git-commit-turn-on-flyspell))
#+END_SRC

**** Magit Todos
#+BEGIN_SRC emacs-lisp
(use-package magit-todos
  :commands helm-magit-todos
  :custom
  (magit-todos-ignored-keywords '("DONE"))
  (magit-todos-exclude-globs '("*jquery*.js" "*min.js" "*min.css"))
  (magit-todos-max-items 30)
  (magit-todos-auto-group-items 30)
  :bind*
  ( :map version-control
    ("t" . helm-magit-todos))
  :hook (magit-mode . magit-todos-mode))
#+END_SRC

**** Magit Forge
Pull Requests, Issues etc.
#+BEGIN_SRC emacs-lisp
(use-package forge
  :after magit
  :custom
  (forge-create-pullreq-prefix "STAGING -")
  :config
  (defadvice magit-pull-from-upstream (after forge-pull activate)
    (forge-pull))
  (defadvice magit-fetch-all (after forge-pull activate)
    (forge-pull)))
#+END_SRC

*** diff-hl
#+BEGIN_SRC emacs-lisp
(use-package diff-hl
  :custom
  (diff-hl-global-modes '(not org-mode))
  :custom-face
  (diff-hl-insert ((t (:background "#224022"))))
  (diff-hl-change ((t (:background "#492949" :foreground "mediumpurple1"))))
  (diff-hl-delete ((t (:background "#492929" :foreground "orangered2"))))
  :bind
  ( :map version-control
    ("n" . diff-hl-next-hunk)
    ("p" . diff-hl-previous-hunk)
    ("r" . diff-hl-revert-hunk))
  :hook
  (dashboard-after-initialize . global-diff-hl-mode)
  (diff-hl-mode . diff-hl-flydiff-mode))
#+END_SRC

*** Smerge + Hydra
#+BEGIN_SRC emacs-lisp
(use-package hydra
  :after smerge)

(use-package hydra-posframe
  :straight (:host github :repo "Ladicle/hydra-posframe")
  :after hydra
  :custom
  (hydra-posframe-border-width 20)
  (hydra-posframe-poshandler 'posframe-poshandler-frame-bottom-center)
  :custom-face
  (hydra-face-blue ((t (:foreground "#46D9FF" :bold t))))
  (hydra-posframe-face ((t (:background ,fk/dark-color))))
  (hydra-posframe-border-face ((t (:background ,fk/dark-color))))
  :config
  (hydra-posframe-mode))

;; Source: https://github.com/alphapapa/unpackaged.el#smerge-mode
(use-package smerge-mode
  :straight (:type built-in)
  :after magit
  :config
  (defhydra smerge-hydra
    (
     :color red
     :hint nil
     :pre (progn
            (setq-local global-hl-line-mode nil)
            (when tree-sitter-hl-mode
              (tree-sitter-hl-mode -1))
            (smerge-mode))
     :post (progn
             (smerge-auto-leave)
             (setq-local global-hl-line-mode t)))
    "
^Move^       ^Keep^               ^Diff^                 ^Other^
^^-----------^^-------------------^^---------------------^^-------
_n_ext       _b_ase               _<_: upper/base        _C_ombine
_p_rev       _u_pper              _=_: upper/lower       _r_esolve
^^           _l_ower              _>_: base/lower        _k_ill current
^^           _a_ll                _R_efine
^^           _RET_: current       _E_diff
"
    ("n" (lambda () (interactive) (smerge-next) (recenter (round (* 0.2 (window-height))) t)))
    ("p" (lambda () (interactive) (smerge-prev) (recenter (round (* 0.2 (window-height))) t)))
    ("b" smerge-keep-base)
    ("u" smerge-keep-upper)
    ("l" smerge-keep-lower)
    ("a" smerge-keep-all)
    ("RET" smerge-keep-current)
    ("\C-m" smerge-keep-current)
    ("<" smerge-diff-base-upper)
    ("=" smerge-diff-upper-lower)
    (">" smerge-diff-base-lower)
    ("R" smerge-refine)
    ("E" smerge-ediff)
    ("C" smerge-combine-with-next)
    ("r" smerge-resolve)
    ("k" smerge-kill-current)
    ("ZZ" (lambda ()
            (interactive)
            (save-buffer)
            (bury-buffer))
     "Save and bury buffer" :color blue)
    ("q" nil "cancel" :color blue))
  :hook
  (magit-diff-visit-file . (lambda ()
                             (when smerge-mode
                               (smerge-hydra/body)))))
#+END_SRC

*** Git Link
#+BEGIN_SRC emacs-lisp
(use-package git-link
  :commands git-link)
#+END_SRC

*** Git Timemachine
#+BEGIN_SRC emacs-lisp
(use-package git-timemachine
  :commands git-timemachine)
#+END_SRC

*** Git Blame (vc-msg)
#+BEGIN_SRC emacs-lisp
(use-package vc-msg
  :commands vc-msg-show)
#+END_SRC

** Terminal Emulation
*** Vterm
#+BEGIN_SRC emacs-lisp
(use-package vterm
  :custom
  (vterm-max-scrollback 100000)
  :custom-face
  ;; match with fk/darken-background
  (vterm-color-default ((t (:background ,fk/dark-color))))
  :bind
  ( :map vterm-mode-map
    ("C-c C-e" . vterm-copy-mode)
    ("M-m" . nil)
    ("M-u" . nil)
    ("<f1>" . nil)
    ("C-c C-n" . fk/vterm-next-prompt)
    ("C-c C-p" . fk/vterm-previous-prompt)
    :map vterm-copy-mode-map
    ("C-c C-e" . vterm-copy-mode)
    ("C-c C-c" . vterm-copy-mode)
    ("M-n" . fk/vterm-next-prompt)
    ("M-p" . fk/vterm-previous-prompt))
  :hook
  (vterm-mode . (lambda () (setq-local global-hl-line-mode nil
                                       show-trailing-whitespace nil)))
  (vterm-copy-mode . (lambda ()
                       (face-remap-add-relative 'hl-line :background fk/background-color)
                       (call-interactively 'hl-line-mode)))
  :config
  (defvar docker-container-prompt-regexp "^[\\^A-Z]*root@[A-z0-9]*:/[^#]*# ")

  (defface docker-container-prompt-face
    '((t (:foreground "green yellow")))
    "Face for docker container prompt in vterm.")

  ;; NOTE: https://github.com/akermu/emacs-libvterm/pull/430 this PR is needed.
  (font-lock-add-keywords
   'vterm-mode
   `((,docker-container-prompt-regexp 0 'docker-container-prompt-face t))
   'set)

  (defun fk/docker-container-next-prompt ()
    "Move to end of next docker-container prompt in the buffer. According to the
`docker-container-prompt-regexp'."
    (interactive)
    (search-forward-regexp docker-container-prompt-regexp nil t))

  (defun fk/docker-container-prev-prompt ()
    "Move to end of previous docker-container prompt in the buffer. According to
the `docker-container-prompt-regexp'."
    (interactive)
    (beginning-of-line)  ; not to catch same prompt
    (when (search-backward-regexp docker-container-prompt-regexp nil t)
      ;; to go to the end of the prompt
      (search-forward-regexp docker-container-prompt-regexp nil t)))

  (defun fk/vterm-next-prompt ()
    "Move to end of next prompt in the buffer. In addition to
`vterm-next-prompt', this catches docker containers prompts too."
    (interactive)
    (if-let*
        ((current-line (line-number-at-pos))
         (prompt-by-regexp (save-excursion
                             (when (or (fk/docker-container-next-prompt)
                                       ;; to not return nil at the last prompt
                                       (= (line-number-at-pos) (1- (line-number-at-pos (point-max)))))
                               (point))))
         (prompt-by-vterm (save-excursion
                            (call-interactively 'vterm-next-prompt)
                            (point)))
         (is-next-docker-prompt (or (< prompt-by-regexp prompt-by-vterm)
                                    (> current-line (line-number-at-pos prompt-by-vterm))
                                    (= current-line (line-number-at-pos prompt-by-vterm)))))
        (fk/docker-container-next-prompt)
      (call-interactively 'vterm-next-prompt)))

  (defun fk/vterm-previous-prompt ()
    "Move to end of previous prompt in the buffer. In addition to
`vterm-previous-prompt', this catches docker containers prompts too."
    (interactive)
    (if-let*
        ((current-line (line-number-at-pos))
         (prompt-by-regexp (save-excursion
                             (when (fk/docker-container-prev-prompt)
                               (point))))
         (prompt-by-vterm (save-excursion
                            (call-interactively 'vterm-previous-prompt)
                            (point)))
         (is-prev-docker-prompt (or (> prompt-by-regexp prompt-by-vterm)
                                    (< current-line (line-number-at-pos prompt-by-vterm))
                                    (= current-line (line-number-at-pos prompt-by-vterm)))))
        (fk/docker-container-prev-prompt)
      (call-interactively 'vterm-previous-prompt))))
#+END_SRC

*** Shell Pop
#+BEGIN_SRC emacs-lisp
(use-package shell-pop
  :custom
  (shell-pop-shell-type '("vterm" "*vterm*" (lambda () (vterm))))
  (shell-pop-full-span t)
  :bind*
  (("M-t" . shell-pop))
  :hook
  (vterm-mode . fk/darken-background))
#+END_SRC

** Restclient
*** Restclient
#+BEGIN_SRC emacs-lisp
(use-package restclient
  :mode ("\\.http\\'" . restclient-mode)
  :custom
  (restclient-log-request nil)
  ;;:config
  ;;(setcdr (assoc "application/json" restclient-content-type-modes) 'json-mode)
)
#+END_SRC

*** Company Restclient
#+BEGIN_SRC emacs-lisp
(use-package company-restclient
  :after restclient
  :hook
  (restclient-mode . (lambda ()
                       (add-to-list 'company-backends 'company-restclient))))
#+END_SRC

*** ob-restclient
#+BEGIN_SRC emacs-lisp
(use-package ob-restclient
  :after org
  :config
  (org-babel-do-load-languages 'org-babel-load-languages '((restclient . t))))
#+END_SRC

** TODO EAF
#+BEGIN_SRC emacs-lisp
;; FIXME: does not load
;; (use-package eaf
;;   :straight
;;   (:host github :repo "manateelazycat/emacs-application-framework" :depth 1 :no-build t))
#+END_SRC

** Google Translate
#+BEGIN_SRC emacs-lisp
(use-package go-translate
  :straight (:host github :repo "lorniu/go-translate")
  :custom
  (go-translate-local-language "tr")
  (go-translate-target-language "en")
  (go-translate-inputs-function 'go-translate-inputs-current-or-prompt)
  (go-translate-buffer-follow-p t)
  :bind*
  ( :map text
    :prefix-map google-translate
    :prefix "g"
    ("g" . go-translate-popup-current)
    ("G" . go-translate)
    ("b" . go-translate)
    ("e" . go-translate-echo-area)))
#+END_SRC

** PDF
*** PDF Tools
#+BEGIN_SRC emacs-lisp
(use-package pdf-tools
  :mode ("\\.pdf\\'" . pdf-view-mode)
  :magic ("%PDF" . pdf-view-mode)
  :custom
  (pdf-view-display-size 'fit-page)
  :bind
  ( :map pdf-view-mode-map
    ("O" . pdf-occur)
    ("d" . pdf-view-midnight-minor-mode)
    ("s a" . pdf-view-auto-slice-minor-mode)
    ("t" . (lambda (beg end) (interactive "r") (go-translate))))
  :hook
  (pdf-view-mode . pdf-links-minor-mode)
  (pdf-view-mode . pdf-isearch-minor-mode)
  (pdf-view-mode . pdf-outline-minor-mode)
  (pdf-view-mode . pdf-history-minor-mode)
  :config
  (with-eval-after-load 'pdf-links
    (define-key pdf-links-minor-mode-map (kbd "f") 'pdf-links-action-perform)))
#+END_SRC

*** Interleave
#+BEGIN_SRC emacs-lisp
(use-package interleave
  :commands interleave-mode
  :custom
  (interleave-disable-narrowing t))
#+END_SRC

*** PDF Continuous Scroll Mode
#+BEGIN_SRC emacs-lisp
(use-package pdf-continuous-scroll-mode
  :straight (:host github :repo "dalanicolai/pdf-continuous-scroll-mode.el")
  ;; M-x pdf-view-fit-width-to-window and disable olivetti before run this
  :commands pdf-continuous-scroll-mode)
#+END_SRC

** Emacs Screencast
#+BEGIN_SRC emacs-lisp
(use-package gif-screencast
  :straight (:host gitlab :repo "ambrevar/emacs-gif-screencast")
  :bind
  ( :map gif-screencast-mode-map
    ("<f8>". gif-screencast-toggle-pause)
    ("<f9>". gif-screencast-stop)))
#+END_SRC

** Slack
*** Slack
#+BEGIN_SRC emacs-lisp
(use-package slack
  :commands slack-start
  :custom
  (slack-buffer-function 'switch-to-buffer)
  (slack-buffer-emojify t)
  (slack-prefer-current-team t)
  (slack-alert-icon (concat no-littering-etc-directory "slack/icon.svg"))
  :custom-face
  (slack-preview-face ((t (:inherit (fixed-pitch shadow org-block) :extend nil))))
  :hook
  (slack-message-buffer-mode . (lambda () (setq-local truncate-lines nil)))
  (slack-message-buffer-mode . (lambda () (setq-local show-trailing-whitespace nil)))
  (slack-message-buffer-mode . (lambda () (setq-local olivetti-body-width 80)))
  :config
  (slack-register-team
   :name "hipo"
   :default t
   :token (auth-source-pick-first-password :host "slack")
   :full-and-display-names t))
#+END_SRC

*** Emojify
#+BEGIN_SRC emacs-lisp
(use-package emojify
  :commands emojify-mode)

;; (use-package company-emoji
;;   :after slack
;;   :config
;;   (add-to-list 'company-backends 'company-emoji))
#+END_SRC

*** Alert
#+BEGIN_SRC emacs-lisp
(use-package alert
  :commands alert
  :custom
  (alert-default-style 'libnotify))
#+END_SRC

*** Helm Slack
#+BEGIN_SRC emacs-lisp
(use-package helm-slack
  :straight (:host github :repo "yuya373/helm-slack")
  :after slack)
#+END_SRC

** PlantUML
#+BEGIN_SRC emacs-lisp
(use-package plantuml-mode
  :mode "\\.plantuml\\'"
  :custom
  (plantuml-jar-path (concat no-littering-etc-directory "plantuml.jar"))
  (plantuml-default-exec-mode 'jar)
  (plantuml-indent-level 4)
  :init
  (with-eval-after-load "org"
    (add-to-list 'org-src-lang-modes '("plantuml" . plantuml))
    (org-babel-do-load-languages 'org-babel-load-languages '((plantuml . t)))
    (setq org-plantuml-jar-path plantuml-jar-path)))
#+END_SRC

** XWWP (Xwidget Webkit Enhancement)
#+BEGIN_SRC emacs-lisp
(use-package xwidget
  :straight (:type built-in)
  :commands xwidget-webkit-browse-url)

(use-package xwwp
  :commands (xwwp xwwp-browse-url-other-window)
  :bind
  ( :map xwidget-webkit-mode-map
    ("f" . xwwp-follow-link)))
#+END_SRC

* File Modes
** Markdown
#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :mode "\\.md\\'"
  :custom (markdown-header-scaling t)
  :bind
  ( :map markdown-mode-map
    ("M-n" . markdown-next-visible-heading)
    ("M-p" . markdown-previous-visible-heading))
  :hook
  (markdown-mode . emojify-mode))
#+END_SRC

** Fish
#+BEGIN_SRC emacs-lisp
(use-package fish-mode
  :mode "\\.fish\\'")
#+END_SRC

** Docker
*** Dockerfile
#+BEGIN_SRC emacs-lisp
(use-package dockerfile-mode
  :mode "Dockerfile\\'")
#+END_SRC

*** Docker Compose
#+BEGIN_SRC emacs-lisp
(use-package docker-compose-mode
  :mode "docker-compose\\'")
#+END_SRC

** Yaml
#+BEGIN_SRC emacs-lisp
(use-package yaml-mode
  :mode "\\.yaml\\'"
  :hook
  (yaml-mode . highlight-indent-guides-mode)
  (yaml-mode . display-line-numbers-mode))
#+END_SRC

** requirements.txt (pip)
#+BEGIN_SRC emacs-lisp
(use-package pip-requirements
  :mode (("\\.pip\\'" . pip-requirements-mode)
         ("requirements[^z-a]*\\.txt\\'" . pip-requirements-mode)
         ("requirements\\.in" . pip-requirements-mode)))
#+END_SRC

** [[#pdf][PDF-]]
** .gitignore
#+BEGIN_SRC emacs-lisp
(use-package gitignore-mode
  :mode "/\\.gitignore\\'")
#+END_SRC

* Fun
** Play Free Software Song
#+BEGIN_SRC emacs-lisp
(defun fk/play-free-software-song ()
  "Play Richard Stallman's free software song."
  (interactive)
  (call-process-shell-command
   "youtube-dl -f 251 'https://www.youtube.com/watch?v=9sJUDx7iEJw' -o - | ffplay -nodisp -autoexit -i -" nil 0))

;;(add-hook 'after-init-hook 'play-free-software-song)
#+END_SRC

** Selectric Mode
#+BEGIN_SRC emacs-lisp
(use-package selectric-mode
  :commands selectric-mode)
#+END_SRC

** Fireplace
#+BEGIN_SRC emacs-lisp
;; TODO: find mp3 file does not work with straight
(use-package fireplace
  :commands fireplace
  :custom
  (fireplace-sound-on t)
  (fireplace-sound-file-path (expand-file-name "straight/repos/emacs-fireplace/fireplace.mp3" user-emacs-directory)))
#+END_SRC

** Pacmacs
#+BEGIN_SRC emacs-lisp
(use-package pacmacs
  :commands pacmacs)
#+END_SRC

** 2048
#+BEGIN_SRC emacs-lisp
(use-package 2048-game
  :commands 2048-game)
#+END_SRC

** Artist Mode
#+BEGIN_SRC emacs-lisp
(use-package artist
  :straight (:type built-in)
  :commands artist-mode
  :bind
  ( :map artist-mode-map
    ("C-c C-c" . 'artist-select-operation)))
#+END_SRC

* Packages I almost never use but want to keep
** Turkish Mode
#+BEGIN_SRC emacs-lisp
(use-package turkish
  :commands turkish-mode turkish-asciify-region
  :bind
  ( :map text
    ("a" . turkish-asciify-region)))
#+END_SRC

** Minimap
#+BEGIN_SRC emacs-lisp
(use-package minimap
  :commands minimap-mode)
#+END_SRC

** Helm System Packages
#+BEGIN_SRC emacs-lisp
(use-package helm-system-packages
  :commands helm-system-packages)
#+END_SRC

** Dimmer
#+BEGIN_SRC emacs-lisp
(use-package dimmer
  :commands dimmer-mode
  :custom
  (dimmer-fraction 0.5)
  :config
  (dimmer-configure-company-box)
  (dimmer-configure-which-key)
  (dimmer-configure-helm)
  (dimmer-configure-magit)
  (dimmer-configure-posframe)
  ;; I tried to fix lsp-ui-doc but it seems did not work
  (defun dimmer-lsp-ui-doc-p ()
    "Return non-nil if current buffer is a lsp-ui-doc buffer."
    (string-prefix-p " *lsp-ui-doc-" (buffer-name)))

  (defun dimmer-configure-lsp-ui-doc ()
    "Convenience setting for lsp-ui-doc users.
This predicate prevents dimming the buffer you are editing when
lsp-ui-doc pops up a documentation."
    (add-to-list
     'dimmer-prevent-dimming-predicates #'dimmer-lsp-ui-doc-p))
  (dimmer-configure-lsp-ui-doc))
#+END_SRC

** Focus
#+BEGIN_SRC emacs-lisp
(use-package focus
  :commands focus-mode
  :config
  (add-to-list 'focus-mode-to-thing '(python-mode . paragraph)))
#+END_SRC

** Command Log Mode
#+BEGIN_SRC emacs-lisp
(use-package command-log-mode
  :commands command-log-mode)
#+END_SRC

** Keypression
#+BEGIN_SRC emacs-lisp
(use-package keypression
  :commands keypression-mode
  :custom
  (keypression-cast-command-name t)
  (keypression-combine-same-keystrokes t)
  ;;(keypression-use-child-frame t) ; broken
  (keypression-font-face-attribute '(:width normal :height 150 :weight bold)))
#+END_SRC

** Literate Calc Mode
#+BEGIN_SRC emacs-lisp
(use-package literate-calc-mode
  :commands literate-calc-minor-mode)
#+END_SRC

* TODOs
- :defer nil or :hook after-init?
** Explore
*** Packages [2/9]
- [ ] https://github.com/jojojames/dired-sidebar
- [-] https://github.com/raxod502/selectrum
  + [X] https://github.com/raxod502/prescient.el
  + [ ] https://github.com/oantolin/orderless
- [ ] https://github.com/emacsorphanage/quickrun
- [ ] https://github.com/pashinin/workgroups2
- [X] https://github.com/Bad-ptr/perspective.el
- [ ] https://github.com/hrs/engine-mode
- [ ] https://github.com/cyrus-and/zoom

*** Blog posts
- https://joshrollinswrites.com/help-desk-head-desk/20200611/

* Some Other Emacs Configurations
| https://emacs.christianbaeuerlein.com/                                           |
| https://emacs.nasy.moe/                                                          |
| https://emacs.zeef.com/ehartc                                                    |
| https://github.com/alhassy/ElispCheatSheet (elisp cheatsheet)                    |
| https://github.com/alhassy/emacs.d                                               |
| https://github.com/angrybacon/dotemacs                                           |
| https://github.com/Atman50/emacs-config                                          |
| https://github.com/belak/dotfiles/tree/master/emacs.d                            |
| https://github.com/caisah/emacs.dz (a list of emacs config files)                |
| https://github.com/codemac/config/tree/master/emacs.d                            |
| https://github.com/dakra/dmacs                                                   |
| https://github.com/emacs-tw/awesome-emacs (awesome emacs)                        |
| https://github.com/hrs/dotfiles/tree/master/emacs/.emacs.d                       |
| https://github.com/ianpan870102/.personal-emacs.d                                |
| https://github.com/ianpan870102/yay-evil-emacs                                   |
| https://github.com/iqss/IQSS.emacs                                               |
| https://github.com/jamiecollinson/dotfiles/blob/master/config.org/               |
| https://github.com/jonathanchu/dotemacs                                          |
| https://github.com/kadircancetin/.emacs.d                                        |
| https://github.com/MatthewZMD/.emacs.d                                           |
| https://github.com/mrvdb/emacs-config                                            |
| https://github.com/novoid/dot-emacs                                              |
| https://github.com/redguardtoo/emacs.d                                           |
| https://github.com/rememberYou/.emacs.d                                          |
| https://github.com/sachac/.emacs.d/                                              |
| https://github.com/zarkone/literally.el/blob/master/literally.org                |
| https://github.com/zzamboni/dot-emacs/blob/master/init.org                       |
| https://gitlab.com/protesilaos/dotfiles/tree/master/emacs/.emacs.d               |
| https://medium.com/@suvratapte/configuring-emacs-from-scratch-intro-3157bed9d040 |
| https://sam217pa.github.io/2016/09/02/how-to-build-your-own-spacemacs/           |
| https://ladicle.com/post/config/                                                 |
