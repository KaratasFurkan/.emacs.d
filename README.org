#+TITLE: My Literate Emacs Config

* TODO Screenshots
* Table Of Contents :TOC:
- [[#screenshots][Screenshots]]
- [[#about][About]]
  - [[#installation][Installation]]
  - [[#initel][init.el]]
  - [[#early-initel][early-init.el]]
  - [[#applying-changes][Applying Changes]]
- [[#package-management][Package Management]]
  - [[#straight][Straight]]
    - [[#installation--initialization][Installation & Initialization]]
    - [[#settings][Settings]]
    - [[#notes][Notes]]
  - [[#use-package][Use-Package]]
    - [[#installation--straigt-integration][Installation & Straigt Integration]]
    - [[#notes-1][Notes]]
- [[#performance-optimization][Performance Optimization]]
  - [[#garbage-collection][Garbage Collection]]
      - [[#gc-before-helm-vb][GC before helm vb.]]
  - [[#file-handler][File Handler]]
  - [[#emacs-start-up-profiler][Emacs Start Up Profiler]]
- [[#better-defaults][Better Defaults]]
  - [[#file-paths][File Paths]]
  - [[#general][General]]
  - [[#helpful][Helpful]]
- [[#appearance][Appearance]]
  - [[#notes-2][Notes]]
  - [[#better-defaults-1][Better Defaults]]
  - [[#custom-functions][Custom Functions]]
    - [[#disable-all-themes][disable-all-themes]]
    - [[#darken-background][darken-background]]
  - [[#remove-redundant-ui][Remove Redundant UI]]
  - [[#font][Font]]
    - [[#font-1][Font]]
    - [[#custom-functions-1][Custom Functions]]
      - [[#adjust-font-size][adjust-font-size]]
      - [[#increase-font-size][increase-font-size]]
      - [[#decrease-font-size][decrease-font-size]]
      - [[#reset-font-size][reset-font-size]]
    - [[#keybindings][Keybindings]]
  - [[#theme][Theme]]
    - [[#theme-1][Theme]]
    - [[#settings-1][Settings]]
      - [[#disable-all-themes-before-loading-a-theme][Disable all themes before loading a theme]]
      - [[#load-theme-without-annoying-confirmation][load-theme without annoying confirmation]]
    - [[#alternatives][Alternatives]]
      - [[#a-light-emacs-theme-thats-well-suited-for-org-mode][A light emacs theme that's well suited for org-mode]]
  - [[#mode-line][Mode Line]]
    - [[#doom-modeline][Doom Modeline]]
    - [[#anzu][Anzu]]
  - [[#window-dividers][Window Dividers]]
  - [[#page-break-lines][Page Break Lines]]
  - [[#trailing-white-space][Trailing White Space*]]
  - [[#highlight-todos][Highlight TODOs]]
  - [[#beacon][Beacon]]
  - [[#all-the-icons][All The Icons]]
  - [[#highlight-indent-guides][Highlight Indent Guides]]
  - [[#shackle][Shackle]]
  - [[#golden-ratio][Golden Ratio]]
  - [[#emacs-dashboard][Emacs Dashboard]]
  - [[#stripe-buffer][Stripe Buffer]]
  - [[#fill-column-indicator][Fill Column Indicator]]
  - [[#line-numbers][Line Numbers]]
  - [[#dired-icons][Dired Icons*]]
  - [[#rainbow-delimiters][Rainbow Delimiters*]]
  - [[#helm-icons][Helm Icons*]]
- [[#completion][Completion]]
  - [[#better-defaults-2][Better Defaults]]
  - [[#which-key-keybinding-completion][Which Key (Keybinding Completion)]]
  - [[#helm-general-completion--selection][Helm (General Completion & Selection)]]
    - [[#helm][Helm]]
    - [[#helm-projectile][Helm Projectile*]]
    - [[#helm-ag][Helm Ag*]]
    - [[#helm-xref][Helm Xref*]]
    - [[#helm-swoop][Helm Swoop*]]
    - [[#helm-descbinds][Helm Descbinds]]
    - [[#helm-icons-1][Helm Icons*]]
    - [[#helm-posframe][Helm Posframe]]
  - [[#company-code--text-completion][Company (Code & Text Completion)]]
    - [[#company][Company]]
    - [[#company-box][Company Box]]
    - [[#company-statistics][Company Statistics]]
  - [[#yasnippet-snippet-completion][YASnippet (Snippet Completion)]]
  - [[#emmet-snippet-completion-for-html--css][Emmet* (Snippet Completion for HTML & CSS)]]
- [[#search--navigation][Search & Navigation]]
  - [[#better-defaults-3][Better Defaults]]
  - [[#custom-functions-2][Custom Functions]]
    - [[#find-config][find-config]]
    - [[#go-scratch][go-scratch]]
    - [[#go-messages][go-messages]]
    - [[#go-home][go-home*]]
    - [[#split-window-and-switch][split-window-and-switch]]
    - [[#generate-random-scratch][generate-random-scratch]]
  - [[#keybindings-1][Keybindings]]
  - [[#recentf-recent-files][Recentf (Recent Files)]]
  - [[#winner-mode][Winner Mode]]
  - [[#ace-window][Ace Window]]
    - [[#dependents][Dependents]]
      - [[#helm-icons-2][Helm Icons]]
  - [[#winum][Winum]]
  - [[#mwim-move-where-i-mean][Mwim (Move Where I Mean)]]
  - [[#helm-projectile-1][Helm Projectile]]
  - [[#helm-ag-1][Helm Ag]]
  - [[#helm-xref-1][Helm Xref]]
  - [[#helm-swoop-1][Helm Swoop]]
  - [[#deadgrep][Deadgrep]]
  - [[#avy][Avy]]
  - [[#treemacs][Treemacs]]
    - [[#treemacs-1][Treemacs]]
    - [[#treemacs-projectile][Treemacs Projectile]]
  - [[#persp-mode][Persp Mode]]
  - [[#dired-sidebar][Dired Sidebar*]]
  - [[#ibuffer-sidebar][IBuffer Sidebar*]]
- [[#text-editing][Text Editing]]
  - [[#better-defaults-4][Better Defaults]]
  - [[#custom-functions-3][Custom Functions]]
    - [[#backward-kill-word-or-region][backward-kill-word-or-region]]
  - [[#keybindings-2][Keybindings]]
  - [[#trailing-white-space-1][Trailing White Space]]
  - [[#case-switching][Case Switching]]
  - [[#paren][Paren]]
  - [[#multiple-cursors][Multiple Cursors]]
  - [[#wrap-region][Wrap Region]]
  - [[#fill-unfill-paragraph][Fill-Unfill Paragraph]]
  - [[#expand-region][Expand Region]]
- [[#programming][Programming]]
  - [[#general-1][General]]
    - [[#better-defaults-5][Better Defaults]]
    - [[#custom-functions-4][Custom Functions]]
      - [[#align-comments][align-comments]]
      - [[#indent-buffer][indent-buffer]]
      - [[#comment-or-uncomment-region][comment-or-uncomment-region]]
    - [[#fill-column-indicator-1][Fill Column Indicator*]]
    - [[#line-numbers-1][Line Numbers*]]
    - [[#comments][Comments]]
    - [[#yasnippet][YASnippet*]]
    - [[#projectile][Projectile]]
    - [[#flycheck][Flycheck]]
    - [[#language-server-protocol][Language Server Protocol]]
      - [[#eglot][Eglot]]
        - [[#eglot-1][Eglot]]
        - [[#eldoc-box][Eldoc Box]]
      - [[#lsp-mode][LSP Mode]]
    - [[#yasnippet-snippets][YASnippet-snippets]]
    - [[#rainbow-delimiters-1][Rainbow Delimiters]]
  - [[#emacs-lisp][Emacs Lisp]]
    - [[#elisp-slime-nav][Elisp Slime Nav]]
    - [[#aggressive-indent][Aggressive Indent]]
  - [[#python][Python]]
    - [[#python-1][Python]]
    - [[#pyvenv][Pyvenv]]
    - [[#import-magic][Import Magic]]
    - [[#blacken][Blacken]]
  - [[#web-mode][Web Mode]]
    - [[#web-mode-1][Web Mode]]
    - [[#emmet-mode][Emmet Mode]]
      - [[#emmet-mode-1][Emmet Mode]]
      - [[#helm-emmet][Helm Emmet]]
    - [[#company-web][Company Web]]
    - [[#json-mode][Json Mode]]
    - [[#prettier][Prettier]]
    - [[#auto-rename-tag][Auto Rename Tag]]
- [[#tools][Tools]]
  - [[#dired][Dired]]
    - [[#dired-1][Dired]]
    - [[#dired-x][Dired-X]]
    - [[#dired-icons-1][Dired Icons]]
    - [[#dired-subtree][Dired Subtree]]
    - [[#dired-sidebar-1][Dired Sidebar]]
    - [[#ibuffer-sidebar-1][IBuffer Sidebar]]
    - [[#dired-show-readme][Dired Show Readme]]
  - [[#org][Org]]
    - [[#org-1][Org]]
    - [[#org-imenu][org-imenu]]
    - [[#org-screenshot][org-screenshot]]
    - [[#org-indent-src-block][org-indent-src-block]]
    - [[#ob-async][ob-async]]
  - [[#version-control][Version Control]]
    - [[#magit][Magit]]
      - [[#magit-1][Magit]]
      - [[#magit-todos][Magit Todos]]
      - [[#magit-forge][Magit Forge]]
    - [[#diff-hl][diff-hl]]
  - [[#terminal-emulation][Terminal Emulation]]
    - [[#vterm][Vterm]]
    - [[#shell-pop][Shell Pop]]
  - [[#restclient][Restclient]]
    - [[#restclient-1][Restclient]]
    - [[#company-restclient][Company Restclient]]
    - [[#ob-restclient][ob-restclient]]
  - [[#eaf][EAF]]
- [[#fun][Fun]]
  - [[#play-free-software-song][Play Free Software Song]]
  - [[#selectric-mode][Selectric Mode]]
  - [[#fireplace][Fireplace]]
  - [[#pacmacs][Pacmacs]]
  - [[#2048][2048]]
- [[#packages-i-almost-never-use-but-want-to-keep][Packages I almost never use but want to keep]]
  - [[#turkish-mode][Turkish Mode]]
  - [[#minimap][Minimap]]
  - [[#olivetti][Olivetti]]
  - [[#helm-system-packages][Helm System Packages]]
  - [[#dimmer][Dimmer]]
- [[#todos][TODOs]]
  - [[#explore][Explore]]
    - [[#packages][Packages]]
    - [[#blog-posts][Blog posts]]
- [[#some-other-emacs-configurations][Some Other Emacs Configurations]]

* About
** Installation
Clone this repository to ~/.emacs.d or ~/.config/emacs
#+BEGIN_SRC sh :tangle no
git clone https://github.com/KaratasFurkan/.emacs.d.git
#+END_SRC

Open Emacs and let the configuration install necessary packages.

** init.el
init.el is just used to load literate config.
#+BEGIN_SRC emacs-lisp :tangle init.el
(defconst config-org (expand-file-name "README.org" user-emacs-directory))
(defconst config-el (expand-file-name "config.el" user-emacs-directory))

(unless (file-exists-p config-el)
  (require 'org)
  (org-babel-tangle-file config-org config-el))

(load-file config-el)
#+END_SRC

** early-init.el
Note that a few of the code blocks (mostly UI related) in this configuration
tangle to =early-init.el= instead of =config.el= (which is the elisp file
generated by this configuration) to get the effects in the very beginning of the
initialization.

** Applying Changes
#+BEGIN_SRC emacs-lisp
(defun tangle-config ()
  "Export code blocks from the literate config file
asynchronously."
  (interactive)
  (let* ((tangle-config (format "(org-babel-tangle nil \"%s\")" config-el))
         (process (start-process
                   "tangle-config" nil
                   "emacs" config-org "--batch" "--eval" tangle-config))
         (filter (defun echo-process-output (process output)
                   "Echo process output."
                   (message (s-trim output)))))
    (set-process-filter process filter)))
#+END_SRC

If the current org file is the literate config file, add a local hook to tangle
code blocks on every save to update configuration.
#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook
          (lambda ()
            (if (equal (buffer-file-name) config-org)
                (fk/add-local-hook 'after-save-hook 'tangle-config))))
#+END_SRC

* Package Management
** Straight
*** Installation & Initialization
Taken from: https://github.com/raxod502/straight.el#getting-started
#+BEGIN_SRC emacs-lisp
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
#+END_SRC

*** Settings
To not increase Emacs startup time, check package modifications when packages
edited (with Emacs) or manually invoke =straight-check-all= command, instead of
checking modifications at startup.
#+BEGIN_SRC emacs-lisp
(setq straight-check-for-modifications '(check-on-save find-when-checking))
#+END_SRC

Straight uses symlinks in the =build= directory which causes
=xref-find-definition= to ask ="Symbolic link to Git-controlled source
file; follow link? (y or n)"= every time, to always answer =yes=, set
=vc-follow-symlinks= true.
#+BEGIN_SRC emacs-lisp
(setq vc-follow-symlinks t)
#+END_SRC

*** Notes
- =M-x straight-pull-all=: update all packages.
- =M-x straight-normalize-all=: restore all packages (remove local edits)
- =M-x straight-freeze-versions= and =M-x straight-thaw-versions= are like =pip
  freeze requirements.txt= and =pip install -r requirements.txt=
- To tell straight.el that you want to use the version of Org shipped with
  Emacs, rather than cloning the upstream repository:
(Note: ":tangle no")
#+BEGIN_SRC emacs-lisp :tangle no
(use-package org
  :straight (:type built-in))
#+END_SRC

** Use-Package
*** Installation & Straigt Integration
#+BEGIN_SRC emacs-lisp
;; Install `use-package'.
(straight-use-package 'use-package)

;; Install packages in `use-package' forms with `straight'. (not the built-in
;; package.el)
(setq straight-use-package-by-default t)
#+END_SRC

*** Notes
- Hooks in the =:hook= section, run in reverse order. Example:
(Note: ":tangle no")
#+BEGIN_SRC emacs-lisp :tangle no
(use-package package-name
  :hook
  (x-mode . last)
  (x-mode . second)
  (x-mode . first))
#+END_SRC

* TODO Performance Optimization
:PROPERTIES:
:header-args: :tangle no
:END:
TODO: Check this out
https://github.com/hlissner/doom-emacs/blob/develop/docs/faq.org#how-does-doom-start-up-so-quickly
TODO: package-enable-at-startup nil????
** TODO Garbage Collection
Make startup faster by reducing the frequency of garbage collection.
Set gc-cons-threshold (the default is 800 kilobytes) to maximum value
available, to prevent any garbage collection from happening during
load time.

Note: tangle to early-init.el to make startup even faster
#+BEGIN_SRC emacs-lisp :tangle early-init.el
;; (setq gc-cons-threshold most-positive-fixnum
;;       gc-cons-percentage 1)  ; TODO: try with and without it
#+END_SRC

Restore it to reasonable value after init.
#+BEGIN_SRC emacs-lisp
(defun fk/increase-gc-threshold ()
  "Increase garbage collection threshold to speed-up emacs by reducing the
frequency of garbage collection stops."
  (setq gc-cons-threshold (* 1024 1024 20))
  (setq gc-cons-percentage 0.6))

(add-hook 'after-init-hook 'fk/increase-gc-threshold)
#+END_SRC

**** TODO GC before helm vb.

** TODO File Handler
** Emacs Start Up Profiler
Benchmark Emacs startup time.
#+BEGIN_SRC emacs-lisp
(use-package esup
  :commands esup)
#+END_SRC

* Better Defaults
** File Paths
Keep Emacs directory clean.
#+BEGIN_SRC emacs-lisp
(use-package no-littering
  :config
  (with-eval-after-load 'recentf
    (add-to-list 'recentf-exclude no-littering-var-directory)
    (add-to-list 'recentf-exclude no-littering-etc-directory))

  (setq auto-save-file-name-transforms  ; autosaved-file-name~
        `((".*" ,(no-littering-expand-var-file-name "auto-save/") t))

        custom-file (no-littering-expand-etc-file-name "custom.el"))

  (if (file-exists-p custom-file)
      (load-file custom-file))

  ;; no-littering changes default snippets directory, so i changed it back.
  (add-to-list 'yas-snippet-dirs
               (expand-file-name "snippets" user-emacs-directory)))
#+END_SRC

** General
#+BEGIN_SRC emacs-lisp
(setq-default
 ring-bell-function 'ignore            ; prevent beep sound.
 inhibit-startup-screen t              ; TODO: maybe better on early-init or performance?
 initial-major-mode 'fundamental-mode  ; TODO: maybe better on early-init or performance?
 initial-scratch-message nil           ; TODO: maybe better on early-init?
 create-lockfiles nil                  ; .#locked-file-name
 confirm-kill-processes nil            ; exit emacs without asking to kill processes
 backup-by-copying t                   ; prevent linked files
 require-final-newline t               ; always end files with newline
 delete-old-versions t)                ; don't ask to delete old backup files

(defalias 'yes-or-no-p 'y-or-n-p)

(global-auto-revert-mode)

(save-place-mode)

(bind-key* "M-r" 'repeat)

(defun fk/add-local-hook (hook function)
  "Add buffer-local hook."
  (add-hook hook function nil t))
#+END_SRC

** Helpful
A better, more detailed *help* buffer.
#+BEGIN_SRC emacs-lisp
(use-package helpful
  ;; TODO: setup shackle
  ;; :init
  ;; (defalias 'describe-function 'helpful-callable)
  ;; (defalias 'describe-variable 'helpful-variable)
  ;; (defalias 'describe-key 'helpful-key)
  :bind
  (([remap describe-function] . helpful-callable)
   ([remap describe-variable] . helpful-variable)
   ([remap describe-key] . helpful-key)
   :map emacs-lisp-mode-map
   ("C-c C-d" . helpful-at-point)))
#+END_SRC

* Appearance
** Notes
- To start Emacs maximized (which i prefer): =$ emacs -mm=
- To start Emacs fullscreen: =$ emacs -fs=

** Better Defaults
#+BEGIN_SRC emacs-lisp
(global-hl-line-mode)
(blink-cursor-mode -1)

(setq-default
 truncate-lines t
 frame-resize-pixelwise t  ; maximized emacs may not fit screen without this
 frame-title-format '((:eval
                       (let ((project-name (projectile-project-name)))
                         (unless (string= "-" project-name)
                           (format "%s| " project-name))))
                      "%b"))  ; project-name| file-name
#+END_SRC

** Custom Functions
*** disable-all-themes
#+BEGIN_SRC emacs-lisp
(defun fk/disable-all-themes ()
  "Disable all active themes."
  (interactive)
  (dolist (theme custom-enabled-themes)
    (disable-theme theme)))
#+END_SRC
*** darken-background
I use this to darken non-file buffers like treemacs, helm etc.
#+BEGIN_SRC emacs-lisp
(defun fk/darken-background ()
  "Darken the background of the buffer."
  (interactive)
  (face-remap-add-relative 'default :background fk/dark-color))
#+END_SRC

** Remove Redundant UI
(Note: ":tangle early-init.el")
#+BEGIN_SRC emacs-lisp :tangle early-init.el
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
#+END_SRC

** Font
*** Font
#+BEGIN_SRC emacs-lisp :tangle early-init.el
(defconst fk/default-font-size 90)
(defconst fk/default-icon-size 15)

(set-face-attribute 'default nil
                    :family "Source Code Pro"
                    :height fk/default-font-size)

(set-face-attribute 'fixed-pitch-serif nil
                    ;; Characters with fixed pitch face do not shown when height
                    ;; is 90.
                    :height (+ fk/default-font-size 10))
#+END_SRC

*** Custom Functions
**** adjust-font-size
#+BEGIN_SRC emacs-lisp
(defun fk/adjust-font-size (height)
  "Adjust font size by given height. If height is '0', reset font
size. This function also handles icons and modeline font sizes."
  (interactive "nHeight ('0' to reset): ")
  (let ((new-height (if (zerop height)
                        fk/default-font-size
                      (+ height (face-attribute 'default :height)))))
    (set-face-attribute 'default nil :height new-height)
    (set-face-attribute 'mode-line nil :height new-height)
    (set-face-attribute 'mode-line-inactive nil :height new-height)
    (message "Font size: %s" new-height))
  (let ((new-size (if (zerop height)
                      fk/default-icon-size
                    (+ (/ height 5) treemacs--icon-size))))
    (when (fboundp 'treemacs-resize-icons)
      (treemacs-resize-icons new-size))
    (when (fboundp 'company-box-icons-resize)
      (company-box-icons-resize new-size))))
#+END_SRC

**** increase-font-size
#+BEGIN_SRC emacs-lisp
(defun fk/increase-font-size ()
  "Increase font size by 0.5 (5 in height)."
  (interactive)
  (fk/adjust-font-size 5))
#+END_SRC

**** decrease-font-size
#+BEGIN_SRC emacs-lisp
(defun fk/decrease-font-size ()
  "Decrease font size by 0.5 (5 in height)."
  (interactive)
  (fk/adjust-font-size -5))
#+END_SRC

**** reset-font-size
#+BEGIN_SRC emacs-lisp
(defun fk/reset-font-size ()
  "Reset font size according to the `fk/default-font-size'."
  (interactive)
  (fk/adjust-font-size 0))
#+END_SRC

*** Keybindings
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C--") 'fk/decrease-font-size)
(global-set-key (kbd "C-*") 'fk/increase-font-size)
(global-set-key (kbd "C-0") 'fk/reset-font-size)
#+END_SRC

** Theme
*** Theme
#+BEGIN_SRC emacs-lisp
(use-package doom-themes
  :custom-face
  (font-lock-comment-face ((t (:slant italic))))
  (font-lock-string-face ((t (:foreground "PeachPuff3"))))
  (font-lock-function-name-face ((t (:foreground "LightGoldenrod"))))
  (highlight ((t (:underline t :weight bold :background nil :foreground nil))))
  (lazy-highlight ((t (:background nil :foreground nil :box (:line-width -1)))))
  :config
  (load-theme 'doom-spacegrey t)
  (defconst fk/background-color (face-attribute 'default :background))
  (defconst fk/dark-color (doom-darken fk/background-color 0.15))
  (defconst fk/dark-color1 (doom-darken fk/background-color 0.01))
  (defconst fk/dark-color2 (doom-darken fk/background-color 0.02))
  (defconst fk/dark-color3 (doom-darken fk/background-color 0.03))
  (defconst fk/dark-color4 (doom-darken fk/background-color 0.04))
  (defconst fk/dark-color5 (doom-darken fk/background-color 0.05))
  (defconst fk/dark-color6 (doom-darken fk/background-color 0.06))
  (defconst fk/dark-color7 (doom-darken fk/background-color 0.07))
  (defconst fk/dark-color8 (doom-darken fk/background-color 0.08))
  (defconst fk/dark-color9 (doom-darken fk/background-color 0.09))
  (defconst fk/light-color (doom-lighten fk/background-color 0.15))
  (defconst fk/light-color1 (doom-lighten fk/background-color 0.09))
  (defconst fk/light-color2 (doom-lighten fk/background-color 0.08))
  (defconst fk/light-color3 (doom-lighten fk/background-color 0.07))
  (defconst fk/light-color4 (doom-lighten fk/background-color 0.06))
  (defconst fk/light-color5 (doom-lighten fk/background-color 0.05))
  (defconst fk/light-color6 (doom-lighten fk/background-color 0.04))
  (defconst fk/light-color7 (doom-lighten fk/background-color 0.03))
  (defconst fk/light-color8 (doom-lighten fk/background-color 0.02))
  (defconst fk/light-color9 (doom-lighten fk/background-color 0.01)))
#+END_SRC

*** Settings
**** Disable all themes before loading a theme
#+BEGIN_SRC emacs-lisp
(defadvice load-theme (before disable-themes-first activate)
  (fk/disable-all-themes))
#+END_SRC

**** load-theme without annoying confirmation
#+BEGIN_SRC emacs-lisp
(advice-add 'load-theme
            :around
            (lambda (fn theme &optional no-confirm no-enable)
              (funcall fn theme t)))
#+END_SRC

*** Alternatives
**** A light emacs theme that's well suited for org-mode
#+BEGIN_SRC emacs-lisp
(use-package poet-theme
  :defer t)
#+END_SRC

** Mode Line
*** Doom Modeline
#+BEGIN_SRC emacs-lisp
(use-package doom-modeline
  :custom
  (doom-modeline-buffer-encoding nil)
  (doom-modeline-vcs-max-length 30)
  :custom-face
  (mode-line ((t (:background ,fk/dark-color))))
  (mode-line-inactive ((t (:background ,(doom-darken fk/background-color 0.05)))))
  (mode-line-highlight ((t (:inherit doom-modeline-bar :foreground "black"))))
  (doom-modeline-buffer-path ((t (:inherit font-lock-comment-face :slant normal))))
  :config
  (column-number-mode)
  (doom-modeline-mode))
#+END_SRC

*** Anzu
#+BEGIN_SRC emacs-lisp
(use-package anzu
  :after isearch
  :config
  (global-anzu-mode))
#+END_SRC

** Window Dividers
Change default window dividers to a better built-in alternative.
#+BEGIN_SRC emacs-lisp :tangle early-init.el
(setq window-divider-default-places t
      window-divider-default-bottom-width 1
      window-divider-default-right-width 1)

(window-divider-mode)
#+END_SRC

** Page Break Lines
#+BEGIN_SRC emacs-lisp
(use-package page-break-lines
  :custom
  (page-break-lines-char ?—)
  :custom-face
  (page-break-lines ((t (:weight extra-light))))
  :config
  (global-page-break-lines-mode))
#+END_SRC

** [[#trailing-white-space][Trailing White Space*]]
** Highlight TODOs
#+BEGIN_SRC emacs-lisp
(use-package hl-todo
  :custom
  ;; Better hl-todo colors, taken from spacemacs
  (hl-todo-keyword-faces '(("TODO" . "#dc752f")
                           ("NEXT" . "#dc752f")
                           ("THEM" . "#2d9574")
                           ("PROG" . "#4f97d7")
                           ("OKAY" . "#4f97d7")
                           ("DONT" . "#f2241f")
                           ("FAIL" . "#f2241f")
                           ("DONE" . "#86dc2f")
                           ("NOTE" . "#b1951d")
                           ("KLUDGE" . "#b1951d")
                           ("HACK" . "#b1951d")
                           ("TEMP" . "#b1951d")
                           ("HOLD" . "#dc752f")
                           ("FIXME" . "#dc752f")
                           ("XXX+" . "#dc752f")))
  :config
  (global-hl-todo-mode))
#+END_SRC

** Beacon
#+BEGIN_SRC emacs-lisp
(use-package beacon
  :custom
  (beacon-color "#D18770") ; TODO: handle in theme
  (beacon-blink-when-point-moves-vertically 10)
  (beacon-dont-blink-major-modes '(dashboard-mode))
  :config
  (beacon-mode))
#+END_SRC

** All The Icons
#+BEGIN_SRC emacs-lisp
;; Prerequisite for a few packages (e.g. treemacs, all-the-icons-dired)
;; "M-x all-the-icons-install-fonts" to install fonts at the first time.
(use-package all-the-icons)
#+END_SRC

** Highlight Indent Guides
#+BEGIN_SRC emacs-lisp
(use-package highlight-indent-guides
  :custom
  (highlight-indent-guides-method 'character)
  (highlight-indent-guides-responsive 'top)
  (highlight-indent-guides-auto-enabled nil)
  :custom-face
  (highlight-indent-guides-character-face ((t (:foreground ,fk/light-color6))))
  (highlight-indent-guides-top-character-face ((t (:foreground ,fk/light-color))))
  :hook
  (prog-mode . highlight-indent-guides-mode))
#+END_SRC

** Shackle
#+BEGIN_SRC emacs-lisp
(use-package shackle
  :custom
  (shackle-rules '(("\\`\\*helm.*?\\*\\'" :regexp t :align t :size 0.3)
                   (help-mode :align t :size 0.4 :select t)))
  :config
  (shackle-mode))
#+END_SRC

** Golden Ratio
#+BEGIN_SRC emacs-lisp
;; TODO: Add a function to set window width to fill column width
;; according to current major mode
;;
;; Maybe better in Appearance section??
(use-package golden-ratio
  :commands golden-ratio-mode
  :custom
  (golden-ratio-max-width 90)
  :config
  (add-to-list 'golden-ratio-exclude-buffer-regexp "^\\*[hH]elm.*")
  (add-to-list 'golden-ratio-exclude-buffer-regexp "^\\*vterm.*")
  (with-eval-after-load 'winum
    (dolist (funcs '(winum-select-window-1
                     winum-select-window-2
                     winum-select-window-3
                     winum-select-window-4
                     winum-select-window-5
                     winum-select-window-6
                     winum-select-window-7
                     winum-select-window-8
                     winum-select-window-9
                     avy-pop-mark))
      (add-to-list 'golden-ratio-extra-commands funcs))))
#+END_SRC

** Emacs Dashboard
#+BEGIN_SRC emacs-lisp
(use-package dashboard
  :custom
  (dashboard-startup-banner 'logo)
  (dashboard-set-heading-icons t)
  (dashboard-set-file-icons t)
  (dashboard-center-content t)
  (dashboard-items '((recents  . 10)
                     (projects . 5)
                     (bookmarks . 5)))
  :custom-face
  (dashboard-heading-face ((t (:weight bold))))
  :config
  (dashboard-setup-startup-hook)
  (defun fk/home ()
    "Switch to home (dashboard) buffer."
    (interactive)
    (switch-to-buffer "*dashboard*"))
  :hook
  (dashboard-mode . (lambda () (setq cursor-type nil)))
  (dashboard-mode . (lambda () (face-remap-add-relative 'hl-line :weight 'bold))))
#+END_SRC

** Stripe Buffer
#+BEGIN_SRC emacs-lisp
(use-package stripe-buffer
  :custom-face
  (stripe-highlight ((t (:background ,fk/light-color7))))
  :config
  ;; hl-line (higher priority stripes) fix:
  (defadvice sb/redraw-region (after stripe-set-priority activate)
    (when (or stripe-buffer-mode stripe-table-mode)
      (dolist (overlay sb/overlays)
        (overlay-put overlay 'priority -100))))
  :hook
  (org-mode . turn-on-stripe-table-mode))
#+END_SRC

** Fill Column Indicator
#+BEGIN_SRC emacs-lisp
(use-package display-fill-column-indicator
  :straight (:type built-in)
  :custom-face
  (fill-column-indicator ((t (:foreground ,fk/light-color3))))
  :hook
  (prog-mode . display-fill-column-indicator-mode))
#+END_SRC

** Line Numbers
#+BEGIN_SRC emacs-lisp
(use-package display-line-numbers
  :straight (:type built-in)
  :hook
  (prog-mode . display-line-numbers-mode))
#+END_SRC

** [[#dired-icons][Dired Icons*]]
** [[#rainbow-delimiters][Rainbow Delimiters*]]
** [[#helm-icons][Helm Icons*]]
* Completion
** Better Defaults
#+BEGIN_SRC emacs-lisp
;;(add-to-list 'completion-styles 'flex t)
#+END_SRC

** Which Key (Keybinding Completion)
#+BEGIN_SRC emacs-lisp
(use-package which-key-posframe
  :custom
  (which-key-idle-secondary-delay 0)
  ;;(which-key-side-window-max-height 0.99)
  :custom-face
  (which-key-posframe ((t (:background ,fk/dark-color))))
  (which-key-posframe-border ((t (:background "gray"))))
  :config
  (which-key-mode)
  (which-key-posframe-mode)

  ;; Menu keymap like Spacemacs
  ;; NOTE: I use F1 as C-h (paging & help).
  (bind-keys*
   :prefix-map fk/menu-map
   :prefix "M-m"
   ("M-m" . which-key-show-full-major-mode))

  (bind-keys*
   :prefix-map files
   :prefix "M-m f")
  (bind-keys*
   :prefix-map buffers
   :prefix "M-m b")
  (bind-keys*
   :prefix-map windows
   :prefix "M-m w")
  (bind-keys*
   :prefix-map version-control
   :prefix "M-m v")
  (bind-keys*
   :prefix-map comments
   :prefix "M-m c")
  ;; (bind-keys*
  ;;  :prefix-map help
  ;;  :prefix "M-m h")
  ;; (bind-keys*
  ;;  :prefix-map jump  ; or navigation
  ;;  :prefix "M-m j")
  ;; (bind-keys*
  ;;  :prefix-map search
  ;;  :prefix "M-m s")
  )
#+END_SRC

** Helm (General Completion & Selection)
*** Helm
#+BEGIN_SRC emacs-lisp
(use-package helm
  :defer nil
  :custom
  (helm-M-x-always-save-history t)
  (helm-display-function 'pop-to-buffer)
  (savehist-additional-variables '(extended-command-history))  ; Shows multiple
  :custom-face
  (helm-non-file-buffer ((t (:inherit font-lock-comment-face))))
  (helm-ff-file-extension ((t (:inherit default))))
  (helm-buffer-file ((t (:inherit default))))
  :bind
  (("M-x" . helm-M-x)
   ("C-x C-f" . helm-find-files)
   ("C-x C-b" . helm-buffers-list)
   ("C-x b" . helm-buffers-list)
   ("C-x C-r" . helm-recentf)
   ("C-x C-i" . helm-imenu)
   ("M-y" . helm-show-kill-ring)
   :map helm-map
   ("TAB" . helm-execute-persistent-action)
   ("<tab>" . helm-execute-persistent-action)
   ("C-z" . helm-select-action)
   ("C-w" . backward-kill-word)  ; Fix C-w
   :map files
   ("f" . helm-find-files)
   ("r" . helm-recentf)
   :map buffers
   ("b" . helm-buffers-list))
  :config
  (helm-mode)
  (savehist-mode)
  (dolist (regexp '("\\*epc con" "\\*helm" "\\*EGLOT"
                    "\\*straight" "\\*Flymake"))
    (add-to-list 'helm-boring-buffer-regexp-list regexp))
  :hook
  (helm-major-mode . fk/darken-background))
#+END_SRC

*** [[#helm-projectile][Helm Projectile*]]
*** [[#helm-ag][Helm Ag*]]
*** [[#helm-xref][Helm Xref*]]
*** [[#helm-swoop][Helm Swoop*]]
*** Helm Descbinds
#+BEGIN_SRC emacs-lisp
(use-package helm-descbinds
  :commands helm-descbinds)
#+END_SRC

*** [[#helm-icons][Helm Icons*]]
*** Helm Posframe
#+BEGIN_SRC emacs-lisp
(use-package helm-posframe
  :straight
  (helm-posframe :host github :repo "KaratasFurkan/helm-posframe")
  :after helm
  :custom
  (helm-display-header-line nil)
  (helm-echo-input-in-header-line t)
  (helm-posframe-border-color "gray")
  (helm-posframe-parameters '((left-fringe . 5)
                              (right-fringe . 5)))
  :config
  (helm-posframe-enable))
#+END_SRC

** Company (Code & Text Completion)
*** Company
#+BEGIN_SRC emacs-lisp
(use-package company
  :custom
  (company-idle-delay 0)
  (company-minimum-prefix-length 1)
  (company-tooltip-align-annotations t)
  (company-dabbrev-downcase nil)
  ;; Disable `single-candidate' and `echo-area' frontends
  (company-frontends '(company-box-frontend))
  :bind
  (
   :map company-active-map
   ("RET" . nil)
   ("TAB" . company-complete-selection)
   ("<tab>" . company-complete-selection)
   ("C-s" . company-complete-selection)  ; Mostly to use during yasnippet expansion
   ("C-n" . company-select-next)
   ("C-p" . company-select-previous))
  :config
  (global-company-mode)

  ;; Show YASnippet snippets in company

  (defun fk/company-backend-with-yas (backend)
    "Add ':with company-yasnippet' to the given company backend."
    (if (and (listp backend) (member 'company-yasnippet backend))
        backend
      (append (if (consp backend)
                  backend
                (list backend))
              '(:with company-yasnippet))))

  (defun fk/company-smart-snippets (fn command &optional arg &rest _)
    "Do not show yasnippet candidates after dot."
    ;;Source:
    ;;https://www.reddit.com/r/emacs/comments/7dnbxl/how_to_temporally_filter_companymode_candidates/
    (unless (when (and (equal command 'prefix) (> (point) 0))
              (let* ((prefix (company-grab-symbol))
                     (point-before-prefix (if (> (- (point) (length prefix) 1) 0)
                                              (- (point) (length prefix) 1)
                                            1))
                     (char (buffer-substring-no-properties point-before-prefix (1+ point-before-prefix))))
                (string= char ".")))
      (funcall fn command arg)))

  ;; TODO: maybe show snippets at first?
  (defun fk/company-enable-snippets ()
    "Enable snippet suggestions in company by adding ':with
company-yasnippet' to all company backends."
    (interactive)
    (setq company-backends (mapcar 'fk/company-backend-with-yas company-backends))
    (advice-add 'company-yasnippet :around 'fk/company-smart-snippets))

  (fk/company-enable-snippets))
#+END_SRC

*** Company Box
#+BEGIN_SRC emacs-lisp
(use-package company-box
  :straight (company-box :host github :repo "gcentauri/company-box")
  :custom
  (company-box-show-single-candidate t)
  (company-box-backends-colors nil) ;; Same colors for all backends
  :custom-face
  (company-box-selection ((t (:inherit company-tooltip-selection :extend t))))
  :hook (company-mode . company-box-mode))
#+END_SRC

*** Company Statistics
#+BEGIN_SRC emacs-lisp
(use-package company-statistics
  :hook (company-mode . company-statistics-mode))
#+END_SRC

** YASnippet (Snippet Completion)
#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  ;; Expand snippets with `C-j', not with `TAB'. Use `TAB' to always
  ;; jump to next field, even when company window is active. If there
  ;; is need to complete company's selection, use `C-s'
  ;; (`company-complete-selection').
  :defer nil
  :custom
  (yas-indent-line nil)
  :custom-face
  (yas-field-highlight-face ((t (:inherit region))))
  :bind*
  (("C-j" . yas-expand)
   :map yas-minor-mode-map
   ("TAB" . nil)
   ("<tab>" . nil)
   :map yas-keymap
   ("TAB" . (lambda () (interactive) (company-abort) (yas-next-field)))
   ("<tab>" . (lambda () (interactive) (company-abort) (yas-next-field))))
  :hook
  (snippet-mode . (lambda () (setq-local require-final-newline nil)))
  :config
  (yas-global-mode))
#+END_SRC

** [[#emmet-mode][Emmet*]] (Snippet Completion for HTML & CSS)
* Search & Navigation
** Better Defaults
#+BEGIN_SRC emacs-lisp
(global-subword-mode)  ; navigationInCamelCase

(setq-default
 recenter-positions '(middle 0.15 top 0.85 bottom)  ; C-l positions
 scroll-conservatively 10000)                       ; Smooth scrolling
#+END_SRC

** Custom Functions
*** find-config
#+BEGIN_SRC emacs-lisp
(defun fk/find-config ()
  "Open config file."
  (interactive)
  (find-file config-org))
#+END_SRC

*** go-scratch
#+BEGIN_SRC emacs-lisp
(defun fk/scratch ()
  "Switch to scratch buffer."
  (interactive)
  (switch-to-buffer "*scratch*"))
#+END_SRC

*** go-messages
#+BEGIN_SRC emacs-lisp
(defun fk/messages ()
  "Switch to Messages buffer."
  (interactive)
  (switch-to-buffer "*Messages*"))
#+END_SRC

*** [[#emacs-dashboard][go-home*]]
*** split-window-and-switch
#+BEGIN_SRC emacs-lisp
(defun fk/split-window-below-and-switch ()
  "Split the window horizontally, then switch to the new window."
  (interactive)
  (split-window-below)
  (other-window 1))

(defun fk/split-window-right-and-switch ()
  "Split the window vertically, then switch to the new window."
  (interactive)
  (split-window-right)
  (other-window 1))
#+END_SRC

*** generate-random-scratch
#+BEGIN_SRC emacs-lisp
(defun fk/generate-random-scratch ()
  "Create and switch to a temporary scratch buffer with a random name."
  (interactive)
  (switch-to-buffer (make-temp-name "scratch-"))
  (emacs-lisp-mode))
#+END_SRC

** Keybindings
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "<F1>") 'help-command)
(global-set-key (kbd "C-x c") 'fk/find-config)
(global-set-key (kbd "M-o") 'other-window)
(global-set-key (kbd "C-x C-k") 'kill-current-buffer)
(global-set-key (kbd "M-l") 'move-to-window-line-top-bottom)
;; Split & Switch
(global-set-key (kbd "C-x 2") 'fk/split-window-below-and-switch)
(global-set-key (kbd "C-x 3") 'fk/split-window-right-and-switch)
;; Scroll less than default
(global-set-key (kbd "C-v") (lambda () (interactive) (scroll-up-command 15)))
(global-set-key (kbd "M-v") (lambda () (interactive) (scroll-down-command 15)))

(bind-keys*
 :map files
 ("c" . fk/find-config))

(bind-keys*
 :map buffers
 ("s" . fk/scratch)
 ("r" . fk/generate-random-scratch)
 ("h" . fk/home)
 ("m" . fk/messages))
#+END_SRC

** Recentf (Recent Files)
#+BEGIN_SRC emacs-lisp
(use-package recentf
  ;; Use with `helm-recentf'
  :straight (:type built-in)
  :custom
  ;;(recentf-exclude '("^/tmp/" "^/usr/"))
  (recentf-max-saved-items 200))
#+END_SRC

** Winner Mode
#+BEGIN_SRC emacs-lisp
(use-package winner
  :straight (:type built-in)
  :bind
  (("M-u" . winner-undo)
   ("M-U" . winner-redo)
   :map windows
   ("u" . winner-undo)
   ("r" . winner-redo))
  :config
  (winner-mode))
#+END_SRC

** Ace Window
#+BEGIN_SRC emacs-lisp
(use-package ace-window
  :straight
  (ace-window :host github
              :repo "KaratasFurkan/ace-window"
              :branch "feature/posframe")
  :custom
  (aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
  (aw-ignore-current t)
  :bind*
  (
   :map windows
   ("w" . ace-window)
   ("d" . delete-window)
   ("D" . ace-delete-window)
   ("s" . ace-swap-window)
   ("b" . balance-windows))
  :config
  (ace-window-posframe-mode)
  :custom-face
  (aw-leading-char-face ((t (:height 1000 :foreground "red")))))
#+END_SRC

*** Dependents
Those packages should load after ace-window to not install ace-window
from melpa.
**** Helm Icons
#+BEGIN_SRC emacs-lisp
(use-package helm-icons
  :straight (helm-icons :host github :repo "yyoncho/helm-icons")
  :after helm
  :config
  (treemacs-resize-icons fk/default-icon-size)
  (helm-icons-enable))
#+END_SRC

** Winum
#+BEGIN_SRC emacs-lisp
(use-package winum
  :bind*
  (("M-1" . winum-select-window-1)
   ("M-2" . winum-select-window-2)
   ("M-3" . winum-select-window-3)
   ("M-4" . winum-select-window-4)
   ("M-5" . winum-select-window-5)
   ("M-6" . winum-select-window-6)
   ("M-7" . winum-select-window-7)
   ("M-8" . winum-select-window-8)
   ("M-9" . winum-select-window-9))
  :config
  (winum-mode))
#+END_SRC

** Mwim (Move Where I Mean)
#+BEGIN_SRC emacs-lisp
(use-package mwim
  :bind
  (("C-a" . mwim-beginning-of-code-or-line)
   ("C-e" . mwim-end-of-code-or-line)))
#+END_SRC

** Helm Projectile
#+BEGIN_SRC emacs-lisp
(use-package helm-projectile
  :bind
  ("C-x f" . helm-projectile)
  :hook
  (projectile-mode . helm-projectile-on))
#+END_SRC

** Helm Ag
#+BEGIN_SRC emacs-lisp
(use-package helm-ag
  :custom
  (helm-ag-base-command
   "rg -S --no-heading --color=never --line-number --max-columns 200")
  :config
  (defun fk/helm-do-ag-project-root-or-current-dir ()
    "If in a project call `helm-do-ag-project-root', else call
`helm-do-ag' with current directory."
    (interactive)
    (if (projectile-project-p)
        (helm-do-ag-project-root)
      (helm-do-ag default-directory)))
  :bind
  ("C-M-s" . fk/helm-do-ag-project-root-or-current-dir))
#+END_SRC

** Helm Xref
#+BEGIN_SRC emacs-lisp
;; TODO: bunu incele, xref diye up ayarla
(use-package helm-xref
  :custom
  (xref-prompt-for-identifier nil)
  :bind
  ("C-M-r" . xref-find-references))
#+END_SRC

** Helm Swoop
#+BEGIN_SRC emacs-lisp
(use-package helm-swoop
  :custom
  (helm-swoop-speed-or-color t)
  (helm-swoop-split-window-function 'display-buffer)
  (helm-swoop-min-overlay-length 0)
  (helm-swoop-use-fuzzy-match t)
  :custom-face
  (helm-swoop-target-line-face ((t (:background "black" :foreground nil :inverse-video nil :extend t))))
  (helm-swoop-target-word-face ((t (:inherit lazy-highlight :foreground nil))))
  :bind
  (("M-s" . helm-swoop)
   :map isearch-mode-map
   ("M-s" . helm-swoop-from-isearch)
   :map helm-swoop-map
   ("M-s" . helm-multi-swoop-all-from-helm-swoop)
   :map helm-swoop-edit-map
   ("C-c C-c" . helm-swoop--edit-complete)
   ("C-c C-k" . helm-swoop--edit-cancel)))
#+END_SRC

** Deadgrep
#+BEGIN_SRC emacs-lisp
(use-package deadgrep
  :commands deadgrep
  :bind
  (
   :map deadgrep-mode-map
   ("C-c C-e" . deadgrep-edit-mode)))
#+END_SRC

** Avy
#+BEGIN_SRC emacs-lisp
(use-package avy
  :bind
  (("M-j" . avy-goto-word-or-subword-1)
   ("C-M-u" . avy-pop-mark)))
#+END_SRC

** Treemacs
*** Treemacs
#+BEGIN_SRC emacs-lisp
(use-package treemacs
  :custom
  (treemacs-width 20)
  :bind
  ("M-0" . treemacs-select-window)
  ;;:config
  ;;(treemacs-resize-icons 'fk/default-icon-size)
  :hook
  (treemacs-mode . (lambda ()
                     (face-remap-add-relative 'default :height .75)
                     (face-remap-add-relative 'mode-line-inactive :background fk/dark-color)
                     (face-remap-add-relative 'mode-line :background fk/dark-color)
                     (face-remap-add-relative 'hl-line :background fk/background-color)
                     (fk/darken-background))))
#+END_SRC

*** Treemacs Projectile
#+BEGIN_SRC emacs-lisp
(use-package treemacs-projectile
  :after treemacs projectile)
#+END_SRC

** Persp Mode
#+BEGIN_SRC emacs-lisp
(use-package persp-mode
  :defer t
  :config
  (persp-mode))
#+END_SRC

** [[#dired-sidebar][Dired Sidebar*]]
** [[#ibuffer-sidebar][IBuffer Sidebar*]]
* Text Editing
** Better Defaults
#+BEGIN_SRC emacs-lisp
(delete-selection-mode)
(electric-pair-mode)

(setq-default
 fill-column 80
 sentence-end-double-space nil
 indent-tabs-mode nil)  ; Use spaces instead of tabs
#+END_SRC

** Custom Functions
*** backward-kill-word-or-region
#+BEGIN_SRC emacs-lisp
(defun fk/backward-kill-word-or-region ()
  "Calls `kill-region' when a region is active and `backward-kill-word'
otherwise."
  (interactive)
  (call-interactively (if (region-active-p)
                          'kill-region
                        'backward-kill-word)))
#+END_SRC

** Keybindings
#+BEGIN_SRC emacs-lisp
(keyboard-translate ?\C-h ?\C-?)  ; C-h as DEL, (F1 as `help-command')
(global-set-key (kbd "C-w") 'fk/backward-kill-word-or-region)
(global-set-key (kbd "C-u") 'undo)
#+END_SRC

** Trailing White Space
#+BEGIN_SRC emacs-lisp
(use-package whitespace
  :straight (:type built-in)
  :custom
  (show-trailing-whitespace t)  ; not from whitespace.el
  :custom-face
  (trailing-whitespace ((t (:background ,fk/light-color7))))  ; not from whitespace.el
  :hook
  (before-save . whitespace-cleanup))
#+END_SRC

** Case Switching
#+BEGIN_SRC emacs-lisp
(put 'upcase-region 'disabled nil)
(put 'downcase-region 'disabled nil)

;; built-in functions
(bind-keys*
 :prefix-map text
 :prefix "M-m t"
 ("u" . upcase-dwim)
 ("d" . downcase-dwim)
 ("c" . capitalize-dwim))

(use-package string-inflection
  :bind*
  (
   :map text
   ("t" . string-inflection-all-cycle)))
#+END_SRC

** Paren
#+BEGIN_SRC emacs-lisp
(use-package paren
  :straight (:type built-in)
  :custom-face
  (show-paren-match ((t (:background nil :weight bold :foreground "white"))))
  :config
  (show-paren-mode))
#+END_SRC

** Multiple Cursors
#+BEGIN_SRC emacs-lisp
(use-package multiple-cursors
  :custom
  (mc/always-run-for-all t)
  :bind
  (("C-M-n" . mc/mark-next-like-this)
   ("C-M-p" . mc/mark-previous-like-this)
   ("C-M-S-n" . mc/skip-to-next-like-this)
   ("C-M-S-p" . mc/skip-to-previous-like-this)
   ("C-S-n" . mc/unmark-previous-like-this)
   ("C-S-p" . mc/unmark-next-like-this)
   ("C-M-<mouse-1>" . mc/add-cursor-on-click)))
#+END_SRC

** Wrap Region
#+BEGIN_SRC emacs-lisp
(use-package wrap-region
  :config
  (wrap-region-global-mode)
  (wrap-region-add-wrapper "=" "=" nil 'org-mode)
  (wrap-region-add-wrapper "*" "*" nil 'org-mode)
  (wrap-region-add-wrapper "_" "_" nil 'org-mode)
  (wrap-region-add-wrapper "/" "/" nil 'org-mode)
  (wrap-region-add-wrapper "+" "+" nil 'org-mode)
  (wrap-region-add-wrapper "~" "~" nil 'org-mode))
#+END_SRC

** Fill-Unfill Paragraph
#+BEGIN_SRC emacs-lisp
(use-package unfill
  :bind ("M-q" . unfill-toggle))
#+END_SRC

** Expand Region
#+BEGIN_SRC emacs-lisp
(use-package expand-region
  :custom
  (expand-region-fast-keys-enabled nil)
  (expand-region-subword-enabled t)
  :bind
  ("C-t" . er/expand-region))
#+END_SRC

* TODO Programming
** General
*** Better Defaults
#+BEGIN_SRC emacs-lisp
(define-key prog-mode-map (kbd "M-.") 'xref-find-definitions)
#+END_SRC

*** Custom Functions
**** align-comments
#+BEGIN_SRC emacs-lisp
(defun fk/align-comments (beginning end)
  "Align comments in region."
  (interactive "*r")
  (align-regexp beginning end (concat "\\(\\s-*\\)"
                                      (regexp-quote comment-start)) nil 2))
#+END_SRC

**** indent-buffer
#+BEGIN_SRC emacs-lisp
(defun fk/indent-buffer ()
  "Indent buffer."
  (interactive)
  (indent-region (point-min) (point-max)))
#+END_SRC

**** comment-or-uncomment-region
#+BEGIN_SRC emacs-lisp
(defun fk/comment-or-uncomment-region ()
  "Comment or uncomment region with just a character (e.g. '/'). If a region is
active call comment-or-uncomment-region, otherwise just insert the given char."
  (interactive)
  (call-interactively (if (region-active-p)
                          'comment-or-uncomment-region
                        'self-insert-command)))
#+END_SRC

*** [[#fill-column-indicator][Fill Column Indicator*]]
*** [[#line-numbers][Line Numbers*]]
*** Comments
#+BEGIN_SRC emacs-lisp
(use-package newcomment
  :straight (:type built-in)
  :custom
  (comment-column 0)
  (comment-inline-offset 2)
  :bind*
  (
   :map comments
   ("c" . comment-dwim)
   ("k" . comment-kill)
   ("l" . comment-line)
   ("n" . (lambda () (interactive) (next-line) (comment-indent)))
   ("N" . comment-indent-new-line)
   ("b" . comment-box)
   ("a" . fk/align-comments))
  :hook
  (emacs-lisp-mode . (lambda ()
                       (setq-local comment-start "; ")
                       (setq-local comment-column 0))))
#+END_SRC

*** [[#yasnippet-snippet-completion][YASnippet*]]
*** Projectile
#+BEGIN_SRC emacs-lisp
(use-package projectile
  :config
  (projectile-mode))
#+END_SRC

*** Flycheck
#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :custom (flycheck-idle-change-delay 2))
#+END_SRC

*** Language Server Protocol
**** Eglot
***** Eglot
#+BEGIN_SRC emacs-lisp
(use-package eglot
  :commands eglot
  ;;:init
  ;;(load-library "project")  ; FIXME
  :custom
  (eglot-ignored-server-capabilites '(:documentHighlightProvider
                                      :signatureHelpProvider
                                      :hoverProvider))
  (eglot-stay-out-of '(flymake))
  :hook
  (eglot-managed-mode . fk/company-enable-snippets)
  (eglot-managed-mode . (lambda () (flymake-mode 0))))
#+END_SRC

***** Eldoc Box
#+BEGIN_SRC emacs-lisp
(use-package eldoc-box
  :commands (eldoc-box-hover-mode eldoc-box-hover-at-point-mode)
  :custom
  (eldoc-box-clear-with-C-g t))
#+END_SRC

**** TODO LSP Mode
*** YASnippet-snippets
#+BEGIN_SRC emacs-lisp
;; TODO: do not override my snippets
(use-package yasnippet-snippets
  :after yasnippet)
#+END_SRC

*** Rainbow Delimiters
#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))
#+END_SRC

** Emacs Lisp
*** Elisp Slime Nav
#+BEGIN_SRC emacs-lisp
(use-package elisp-slime-nav
  :bind
  (
   :map emacs-lisp-mode-map
   ("M-." . elisp-slime-nav-find-elisp-thing-at-point)))
#+END_SRC

*** Aggressive Indent
#+BEGIN_SRC emacs-lisp
;; TODO: try in other languages (html, css, js, c)
(use-package aggressive-indent
  :hook (emacs-lisp-mode . aggressive-indent-mode))
#+END_SRC

** Python
*** Python
#+BEGIN_SRC emacs-lisp
(use-package python
  :straight (:type built-in)
  :custom
  (python-shell-interpreter "ipython")
  (python-shell-interpreter-args "-i --simple-prompt")
  (python-indent-guess-indent-offset-verbose nil)
  :hook
  ;; pip install python-language-server pyls-black pyls-isort flake8
  ;; NOTE: these hooks runs in reverse order
  (python-mode . flycheck-mode)
  (python-mode . (lambda () (setq-local fill-column 88)))
  (python-mode . importmagic-mode)
  ;;(python-mode . (lambda () (fk/add-local-hook 'before-save-hook 'eglot-format-buffer)))
  (python-mode . eglot-ensure)
  (python-mode . fk/activate-pyvenv))
#+END_SRC

*** Pyvenv
#+BEGIN_SRC emacs-lisp
(use-package pyvenv
  :after python
  :config
  (defun fk/activate-pyvenv ()
    "Activate python environment according to the `.venv' file."
    (interactive)
    (pyvenv-mode)
    (let* ((pdir (projectile-project-root)) (pfile (concat pdir ".venv")))
      (if (file-exists-p pfile)
          (pyvenv-workon (with-temp-buffer
                           (insert-file-contents pfile)
                           (nth 0 (split-string (buffer-string)))))))))
#+END_SRC

*** Import Magic
#+BEGIN_SRC emacs-lisp
(use-package importmagic
  ;; pip install importmagic epc
  :commands importmagic-mode
  :custom (importmagic-python-interpreter "python"))
#+END_SRC

*** Blacken
#+BEGIN_SRC emacs-lisp
(use-package blacken
  :commands blacken-mode)
#+END_SRC

** TODO Web Mode
TODO: seperate sections (html, css..)
*** Web Mode
#+BEGIN_SRC emacs-lisp
(use-package web-mode
  :custom
  (css-indent-offset 2)
  (web-mode-markup-indent-offset 2)
  (web-mode-enable-auto-pairing nil)
  (web-mode-engines-alist '(("django" . "\\.html\\'")))
  :mode ;; Copied from spacemacs
  (("\\.phtml\\'"      . web-mode)
   ("\\.tpl\\.php\\'"  . web-mode)
   ("\\.twig\\'"       . web-mode)
   ("\\.xml\\'"        . web-mode)
   ("\\.html\\'"       . web-mode)
   ("\\.htm\\'"        . web-mode)
   ("\\.[gj]sp\\'"     . web-mode)
   ("\\.as[cp]x?\\'"   . web-mode)
   ("\\.eex\\'"        . web-mode)
   ("\\.erb\\'"        . web-mode)
   ("\\.mustache\\'"   . web-mode)
   ("\\.handlebars\\'" . web-mode)
   ("\\.hbs\\'"        . web-mode)
   ("\\.eco\\'"        . web-mode)
   ("\\.ejs\\'"        . web-mode)
   ("\\.svelte\\'"     . web-mode)
   ("\\.djhtml\\'"     . web-mode))
  :hook
  (web-mode . (lambda () (fk/add-local-hook 'before-save-hook 'fk/indent-buffer))))
#+END_SRC

*** Emmet Mode
**** Emmet Mode
#+BEGIN_SRC emacs-lisp
(use-package emmet-mode
  :custom
  (emmet-move-cursor-between-quotes t)
  :custom-face
  (emmet-preview-input ((t (:inherit lazy-highlight))))
  :bind
  (
   :map emmet-mode-keymap
   ([remap yas-expand] . emmet-expand-line)
   ("M-n"  . emmet-next-edit-point)
   ("M-p"  . emmet-prev-edit-point)
   ("C-c p" . emmet-preview-mode))
  :hook
  ;;(rjsx-mode . (lambda () (setq emmet-expand-jsx-className? t)))
  (web-mode . emmet-mode)
  (css-mode . emmet-mode))
#+END_SRC

**** Helm Emmet
#+BEGIN_SRC emacs-lisp
(use-package helm-emmet
  :after helm emmet)
#+END_SRC

*** Company Web
#+BEGIN_SRC emacs-lisp
(use-package company-web
  :after web-mode
  :config
  (add-to-list 'company-backends '(company-web-html :with company-yasnippet)))
#+END_SRC

*** Json Mode
#+BEGIN_SRC emacs-lisp
(use-package json-mode
  :defer t)
(use-package json-navigator
  :after json-mode)
#+END_SRC

*** Prettier
#+BEGIN_SRC emacs-lisp
(use-package prettier-js
  :hook
  ;;(web-mode . prettier-js-mode) ;; breaks django templates
  (css-mode . prettier-js-mode)
  (json-mode . prettier-js-mode))
#+END_SRC

*** Auto Rename Tag
#+BEGIN_SRC emacs-lisp
(use-package auto-rename-tag
  :hook
  (web-mode . auto-rename-tag-mode))
#+END_SRC

* TODO Tools
** Dired
*** Dired
#+BEGIN_SRC emacs-lisp
(use-package dired
  :straight (:type built-in)
  :custom
  (dired-listing-switches "-lAhp --group-directories-first")
  (dired-dwim-target t)
  (mouse-1-click-follows-link nil)
  :bind
  (
   :map dired-mode-map
   ("H" . dired-hide-details-mode)
   ("C-M-u" . dired-up-directory)
   ("O" . browse-url-of-dired-file)             ; open with associated app
   ("<mouse-1>" . fk/dired-left-click)          ; left click
   ("<mouse-2>" . dired-up-directory)           ; middle click
   ("<mouse-3>" . (lambda (event) (interactive "e")  ; right click
                    (mouse-set-point event)
                    (dired-subtree-toggle)))
   ;;("RET" . fk/dired-smart-open)
   ("C-c C-e" . wdired-change-to-wdired-mode))
  :config
  (defun fk/dired-left-click (event)
    "When file is a directory, open directory in dired. Otherwise, open file
with associated application."
    (interactive "e")
    (mouse-set-point event)
    (let ((file (dired-get-file-for-visit)))
      (if (file-directory-p file)
          (dired-mouse-find-file event)
        (browse-url-of-dired-file))))

  ;; TODO: change this to "open video (maybe some other types too) files with
  ;; associated apps".
  (defun fk/dired-smart-open ()
    "If file size bigger than 50mb, open with associated system application,
else call `dired-find-file'"
    (interactive)
    (if (> (file-attribute-size (file-attributes (dired-file-name-at-point)))
           50000000)
        (browse-url-of-dired-file)
      (dired-find-file)))
  :hook
  (dired-mode . dired-hide-details-mode))
#+END_SRC

*** Dired-X
#+BEGIN_SRC emacs-lisp
(use-package dired-x
  :straight (:type built-in)
  :after dired
  :custom
  (dired-omit-files "^\\..*$")
  :bind
  (
   :map dired-mode-map
   ("h" . dired-omit-mode)))
#+END_SRC

*** Dired Icons
#+BEGIN_SRC emacs-lisp
(use-package all-the-icons-dired
  :init
  (add-to-list 'all-the-icons-icon-alist
               '("\\.mkv" all-the-icons-faicon "film"
                 :face all-the-icons-blue))
  (add-to-list 'all-the-icons-icon-alist
               '("\\.srt" all-the-icons-octicon "file-text"
                 :v-adjust 0.0 :face all-the-icons-dcyan))
  :config
  ;; Turn off all-the-icons-dired-mode before wdired-mode
  (defadvice wdired-change-to-wdired-mode (before turn-off-icons activate)
    (all-the-icons-dired-mode -1))
  (defadvice wdired-change-to-dired-mode (after turn-on-icons activate)
    (all-the-icons-dired-mode 1))
  :hook (dired-mode . all-the-icons-dired-mode))
#+END_SRC

*** Dired Subtree
#+BEGIN_SRC emacs-lisp
(use-package dired-subtree
  :after dired
  :custom
  (dired-subtree-use-backgrounds nil)
  :bind
  (
   :map dired-mode-map
   ("TAB" . dired-subtree-toggle))
   ("<tab>" . dired-subtree-toggle)
  :config
  ;; Fix "no icons in subtree" issue.
  (defadvice dired-subtree-toggle
      (after add-icons activate) (revert-buffer)))
#+END_SRC

*** Dired Sidebar
#+BEGIN_SRC emacs-lisp
(use-package dired-sidebar
  :commands dired-sidebar-toggle-sidebar
  :bind*
  (
   :map windows
   ("t" . sidebar-toggle))
  :config
  (defun sidebar-toggle ()
    "Toggle both `dired-sidebar' and `ibuffer-sidebar'."
    (interactive)
    (dired-sidebar-toggle-sidebar)
    (ibuffer-sidebar-toggle-sidebar)))
#+END_SRC

*** IBuffer Sidebar
#+BEGIN_SRC emacs-lisp
(use-package ibuffer-sidebar
  :commands ibuffer-sidebar-toggle-sidebar
  :bind
  (
   :map ibuffer-mode-map
   ("M-o" . nil)))
#+END_SRC

*** Dired Show Readme
#+BEGIN_SRC emacs-lisp
(use-package dired-show-readme
  :straight
  (dired-show-readme :host gitlab :repo "kisaragi-hiu/dired-show-readme")
  :hook
  (dired-mode . dired-show-readme-mode))
#+END_SRC

** TODO Org
*** Org
#+BEGIN_SRC emacs-lisp
;; TODO: clean up this section, choose built-in or upstream
(use-package org
  :straight (:type built-in)
  :init
  (setq org-agenda-files '("~/Org/agenda.org")
        org-confirm-babel-evaluate nil
        org-ellipsis "↴" ;; ↴, ▼, ▶, ⤵
        org-src-window-setup 'current-window
        org-startup-indented t
        org-startup-with-inline-images t
        org-image-actual-width '(400)
        org-hierarchical-todo-statistics nil
        org-src-preserve-indentation t
        org-adapt-indentation nil
        org-tags-column 0
        org-imenu-depth 20)
  :bind (
         :map org-mode-map
         ("C-c C-e" . org-edit-special)
         ("M-n" . org-next-visible-heading)
         ("M-p" . org-previous-visible-heading)
         ("C-c C-f". fk/org-imenu)
         ;; ("" . org-shiftright) TODO: find proper keybinding
         ;; ("" . org-shiftleft)
         ;; ("" . org-metaright)
         ;; ("" . org-metaleft)
         ;; ("" . org-metaup)
         ;; ("" . org-metadown
         :map org-src-mode-map
         ("C-c C-c" . org-edit-src-exit))
  :config
  (set-face-attribute 'org-block nil :extend t)
  (set-face-attribute 'org-ellipsis nil :foreground nil :inherit 'font-lock-comment-face :weight 'normal)
  (set-face-attribute 'org-checkbox nil :foreground "white")
  (set-face-attribute 'org-block-begin-line nil :extend t)
  (set-face-attribute 'org-block-end-line nil :extend t)
  (org-babel-do-load-languages 'org-babel-load-languages '((python . t)
                                                           (C . t)
                                                           (emacs-lisp . t)
                                                           (js . t)
                                                           (shell . t)))
  ;; Beautify org mode
  (use-package org-bullets
    :custom
    (org-bullets-bullet-list '("⁖"))
    :hook (org-mode . org-bullets-mode))

  (font-lock-add-keywords 'org-mode
                          '(("^ *\\([-]\\) "
                             (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))
  (font-lock-add-keywords 'org-mode
                          '(("^ *\\([+]\\) "
                             (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "◦"))))))
  (defface org-checkbox-done-text
    '((t (:inherit 'font-lock-comment-face :strike-through t)))
    "Face for the text part of a checked org-mode checkbox.")

  ;; (font-lock-add-keywords
  ;;  'org-mode
  ;;  `(("^[ \t]*\\(?:[-+*]\\|[0-9]+[).]\\)[ \t]+\\(\\(?:\\[@\\(?:start:\\)?[0-9]+\\][ \t]*\\)?\\[\\(?:X\\|\\([0-9]+\\)/\\2\\)\\][^\n]*\n\\)"
  ;;     1 'org-checkbox-done-text prepend))
  ;;  'append)
  :hook
  ;; TODO: bunlar yerine prettify + box face'i ile yap
  (org-mode . (lambda () (setq prettify-symbols-alist
                               '(("[ ]" . "☐")
                                 ("[X]" . "☑") ;; ✔
                                 ("[-]" . "⬕"))))) ;; ◪, ⬔
  (org-babel-after-execute . org-redisplay-inline-images))


;; (use-package org-table-auto-align-mode
;;   :load-path (lambda () (concat user-emacs-directory "load/org-table-auto-align-mode"))
;;   :hook org-mode)

(use-package toc-org
  :straight
  (:host github :repo "KaratasFurkan/toc-org" :branch "insert-silently")
  :custom
  (toc-org-max-depth 10)
  (toc-org-insert-silent t)
  :hook (org-mode . toc-org-mode))
#+END_SRC

*** org-imenu
#+BEGIN_SRC emacs-lisp
(defun fk/org-imenu ()
  "Go to a heading with helm-imenu and expand the heading."
  (interactive)
  (helm-imenu)
  (show-subtree))
#+END_SRC

*** org-screenshot
#+BEGIN_SRC emacs-lisp
(with-eval-after-load 'org
  (defun fk/org-screenshot ()
    ;; fork from: https://delta.re/org-screenshot/
    ;; https://github.com/kadircancetin/.emacs.d
    "Take a screenshot into a time stamped unique-named file in the
  same directory as the org-buffer and insert a link to this file."
    (interactive)
    (when (eq major-mode 'org-mode)
      (suspend-frame)
      (run-at-time
       "500 millisec" nil ;; I have animation when minimize window
       (lambda ()
         (org-display-inline-images)
         (setq filename
               (concat
                (make-temp-name
                 (concat (file-name-nondirectory (buffer-file-name))
                         "_imgs/"
                         (format-time-string "%Y%m%d_%H%M%S_")) ) ".png"))
         (unless (file-exists-p (file-name-directory filename))
           (make-directory (file-name-directory filename)))
                                        ; take screenshot
         (if (eq system-type 'darwin)
             (call-process "screencapture" nil nil nil "-i" filename))
         (if (eq system-type 'gnu/linux)
             (call-process "import" nil nil nil filename))
                                        ; insert into file if correctly taken
         (if (file-exists-p filename)
             (insert (concat "[[file:" filename "]]")))
         (org-remove-inline-images)
         (org-display-inline-images)
         (other-frame 0))))))
#+END_SRC

*** org-indent-src-block
#+BEGIN_SRC emacs-lisp
(defun fk/org-indent-src-block ()
  (interactive)
  (org-edit-special)
  (fk/indent-buffer)
  (org-edit-src-exit))
#+END_SRC

*** ob-async
#+BEGIN_SRC emacs-lisp
(use-package ob-async
  :after org)
#+END_SRC

** Version Control
*** Magit
**** Magit
#+BEGIN_SRC emacs-lisp
(use-package magit
  :commands magit
  :config
  :bind*
  (
   :map version-control
   ("v" . magit-status)
   ("s" . magit-status)
   ("t" . helm-magit-todos)))
#+END_SRC

**** Magit Todos
#+BEGIN_SRC emacs-lisp
(use-package magit-todos
  :commands helm-magit-todos
  :hook (magit-mode . magit-todos-mode))  ; TODO: does it run some functions every time ???
                                          ; maybe :after magit, :config magit-todos-mode ???
#+END_SRC

**** Magit Forge
Pull Requests, Issues etc.
#+BEGIN_SRC emacs-lisp
(use-package forge
  :after magit)  ; TODO: will slow loading magit?
#+END_SRC

*** diff-hl
#+BEGIN_SRC emacs-lisp
(use-package diff-hl
  :custom
  (diff-hl-global-modes '(not org-mode))
  :custom-face
  (diff-hl-insert ((t (:background "#224022"))))
  (diff-hl-change ((t (:background "#492949" :foreground "mediumpurple1"))))
  (diff-hl-delete ((t (:background "#492929" :foreground "orangered2"))))
  :config
  (global-diff-hl-mode)
  :hook
  (after-init . diff-hl-mode)
  (diff-hl-mode . diff-hl-flydiff-mode))
#+END_SRC

** Terminal Emulation
*** Vterm
#+BEGIN_SRC emacs-lisp
(use-package vterm
  :custom-face
  ;; match with fk/darken-background
  (vterm-color-default ((t (:background ,fk/dark-color))))
  :bind
  (
   :map vterm-mode-map
   ("C-c C-e" . vterm-copy-mode)
   ("M-m" . nil)
   ("/" . vterm--self-insert)
   :map vterm-copy-mode-map
   ("C-c C-e" . vterm-copy-mode)
   ("C-c C-c" . vterm-copy-mode))
  :config
  :hook
  (vterm-mode . (lambda () (setq-local global-hl-line-mode nil
                                       show-trailing-whitespace nil)))
  (vterm-copy-mode . (lambda ()
                       (face-remap-add-relative 'hl-line :background fk/background-color)
                       (call-interactively 'hl-line-mode))))
#+END_SRC

*** Shell Pop
#+BEGIN_SRC emacs-lisp
(use-package shell-pop
  :custom
  (shell-pop-shell-type '("vterm" "*vterm*" (lambda () (vterm))))
  (shell-pop-full-span t)
  :bind*
  (("M-t" . shell-pop))
  :hook
  (vterm-mode . fk/darken-background))
#+END_SRC

** Restclient
*** Restclient
#+BEGIN_SRC emacs-lisp
(use-package restclient
  :mode ("\\.http\\'" . restclient-mode)
  :custom
  (restclient-log-request nil))
#+END_SRC

*** Company Restclient
#+BEGIN_SRC emacs-lisp
(use-package company-restclient
  :after company restclient
  :config
  (add-to-list 'company-backends 'company-restclient))
#+END_SRC

*** ob-restclient
#+BEGIN_SRC emacs-lisp
(use-package ob-restclient
  :after org
  :config
  (org-babel-do-load-languages 'org-babel-load-languages '((restclient . t))))
#+END_SRC

** TODO EAF
#+BEGIN_SRC emacs-lisp
;; FIXME: does not load with straight
;;(use-package eaf
;;  :straight
;;  (:host github :repo "manateelazycat/emacs-application-framework" :depth 1))
#+END_SRC

* Fun
** Play Free Software Song
#+BEGIN_SRC emacs-lisp
(defun fk/play-free-software-song ()
  "Play Richard Stallman's free software song."
  (interactive)
  (call-process-shell-command
   "youtube-dl -f 251 'https://www.youtube.com/watch?v=9sJUDx7iEJw' -o - | ffplay -nodisp -autoexit -i -" nil 0))

;;(add-hook 'after-init-hook 'play-free-software-song)
#+END_SRC

** Selectric Mode
#+BEGIN_SRC emacs-lisp
(use-package selectric-mode
  :commands selectric-mode)
#+END_SRC

** Fireplace
#+BEGIN_SRC emacs-lisp
(use-package fireplace
  :commands fireplace)
#+END_SRC

** Pacmacs
#+BEGIN_SRC emacs-lisp
(use-package pacmacs
  :commands pacmacs)
#+END_SRC

** 2048
#+BEGIN_SRC emacs-lisp
(use-package 2048-game
  :commands 2048-game)
#+END_SRC

* Packages I almost never use but want to keep
** Turkish Mode
#+BEGIN_SRC emacs-lisp
(use-package turkish
  :commands turkish-mode)
#+END_SRC

** Minimap
#+BEGIN_SRC emacs-lisp
(use-package minimap
  :commands minimap-mode)
#+END_SRC

** Olivetti
#+BEGIN_SRC emacs-lisp
(use-package olivetti
  :commands olivetti-mode
  :custom
  (olivetti-body-width 95)
  (olivetti-enable-visual-line-mode nil)
  :bind*
  (
   :map windows
   ("c" . olivetti-mode)
   ("v" . visual-line-mode)))
#+END_SRC

** Helm System Packages
#+BEGIN_SRC emacs-lisp
(use-package helm-system-packages
  :commands helm-system-packages)
#+END_SRC

** Dimmer
#+BEGIN_SRC emacs-lisp
(use-package dimmer
  :commands dimmer-mode
  :custom
  (dimmer-fraction 0.7))
#+END_SRC

* TODOs
- :defer nil or :hook after-init?
** Explore
*** Packages
- https://github.com/jojojames/dired-sidebar
- https://github.com/raxod502/selectrum
  + https://github.com/raxod502/prescient.el
  + https://github.com/oantolin/orderless
- https://github.com/emacsorphanage/quickrun
- https://github.com/pashinin/workgroups2
- https://github.com/Bad-ptr/persp-mode.el
- https://github.com/hrs/engine-mode
- https://github.com/cyrus-and/zoom

*** Blog posts
- https://joshrollinswrites.com/help-desk-head-desk/20200611/

* Some Other Emacs Configurations
| https://emacs.christianbaeuerlein.com/                                           |
| https://emacs.nasy.moe/                                                          |
| https://emacs.zeef.com/ehartc                                                    |
| https://github.com/alhassy/ElispCheatSheet (elisp cheatsheet)                    |
| https://github.com/alhassy/emacs.d                                               |
| https://github.com/angrybacon/dotemacs                                           |
| https://github.com/Atman50/emacs-config                                          |
| https://github.com/belak/dotfiles/tree/master/emacs.d                            |
| https://github.com/caisah/emacs.dz (a list of emacs config files)                |
| https://github.com/codemac/config/tree/master/emacs.d                            |
| https://github.com/dakra/dmacs                                                   |
| https://github.com/emacs-tw/awesome-emacs (awesome emacs)                        |
| https://github.com/hrs/dotfiles/tree/master/emacs/.emacs.d                       |
| https://github.com/ianpan870102/.personal-emacs.d                                |
| https://github.com/ianpan870102/yay-evil-emacs                                   |
| https://github.com/iqss/IQSS.emacs                                               |
| https://github.com/jamiecollinson/dotfiles/blob/master/config.org/               |
| https://github.com/jonathanchu/dotemacs                                          |
| https://github.com/kadircancetin/.emacs.d                                        |
| https://github.com/MatthewZMD/.emacs.d                                           |
| https://github.com/mrvdb/emacs-config                                            |
| https://github.com/novoid/dot-emacs                                              |
| https://github.com/redguardtoo/emacs.d                                           |
| https://github.com/rememberYou/.emacs.d                                          |
| https://github.com/sachac/.emacs.d/                                              |
| https://github.com/zarkone/literally.el/blob/master/literally.org                |
| https://github.com/zzamboni/dot-emacs/blob/master/init.org                       |
| https://gitlab.com/protesilaos/dotfiles/tree/master/emacs/.emacs.d               |
| https://medium.com/@suvratapte/configuring-emacs-from-scratch-intro-3157bed9d040 |
| https://sam217pa.github.io/2016/09/02/how-to-build-your-own-spacemacs/           |
| https://ladicle.com/post/config/                                                 |
