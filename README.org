* About This Configuration
** Find This File First of All
#+BEGIN_SRC emacs-lisp
(defun find-config ()
  "Open config file"
  (interactive)
  (find-file config-org))
(global-set-key (kbd "C-x c") 'find-config)
#+END_SRC

** Applying Changes
To decrease startup time, I use a hook to export code blocks from my
literate config file every time on save. Yes it is bad to run the
function below even with unrelated files every time but I could not
find a better solution (I tried file local variables but it ask
permission to eval local variables every time). Since condition
checking executes in microseconds, it does not bother me.
#+BEGIN_SRC emacs-lisp
  (defun tangle-config ()
    "Export code blocks from my literate config file."
    (when (equal (buffer-file-name) config-org)
      (org-babel-tangle-file config-org config-el)))

  (add-hook 'after-save-hook 'tangle-config)
#+END_SRC

* Package Manager
** Package Repositories
*** Initialize package repositories
#+BEGIN_SRC emacs-lisp
(require 'package)
(setq package-archives '(("gnu" . "https://elpa.gnu.org/packages/")
			 ("melpa" . "https://melpa.org/packages/")
			 ("org" . "https://orgmode.org/elpa/")))
(package-initialize)
#+END_SRC

** use-package
*** Install use-package if not installed
#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
#+END_SRC

*** Always install packages if not installed
#+BEGIN_SRC emacs-lisp
(require 'use-package-ensure)
(setq use-package-always-ensure t)
#+END_SRC

*** Always compile packages, and use the newest version available.
#+BEGIN_SRC emacs-lisp
(use-package auto-compile
  :config (auto-compile-on-load-mode))
(setq load-prefer-newer t)
#+END_SRC

* Better Defaults
- TODO: this part is a mess, i'll tidy up.
** Disable
#+BEGIN_SRC emacs-lisp
  (setq ring-bell-function 'ignore)
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (blink-cursor-mode -1)
#+END_SRC

** Enable
#+BEGIN_SRC emacs-lisp
  (delete-selection-mode 1)
  (show-paren-mode 1)
  (global-subword-mode 1)
  (global-hl-line-mode)
  (winner-mode 1)
#+END_SRC

** Other
#+BEGIN_SRC emacs-lisp
  (setq-default custom-file (concat user-emacs-directory ".custom.el"))
  (load custom-file)
  (set-face-attribute 'default nil
		    :family "Source Code Pro")
  (defalias 'yes-or-no-p 'y-or-n-p)
  (setq frame-resize-pixelwise t)
  ;; Use shell-like backspace C-h, rebind help to C-?
  (define-key key-translation-map [?\C-h] [?\C-?])
  (global-set-key (kbd "C-?") 'help-command)
  (global-set-key (kbd "M-o") 'other-window)
  ;; Undo
  (global-set-key (kbd "C-u") 'undo)
  ;; Recenter positions values (C-l)
  (setq recenter-positions '(middle 0.2 top 0.8 bottom))
  (global-set-key (kbd "M-u") 'winner-undo)
  (global-set-key (kbd "M-U") 'winner-redo)
#+END_SRC

* Packages
** Helm
#+BEGIN_SRC emacs-lisp
  (use-package helm
    :bind
    ("M-x" . helm-M-x)
    ("C-x C-f" . helm-find-files)
    ("C-x C-b" . helm-buffers-list)
    ("C-x b" . helm-buffers-list))
#+END_SRC

** Company
#+BEGIN_SRC emacs-lisp
  (use-package company
    :config
    (global-company-mode))
#+END_SRC

** Company Box
- TODO: icon & font sizes are broken.
#+BEGIN_SRC emacs-lisp
  (use-package company-box
    :hook (company-mode . company-box-mode))
#+END_SRC

** Projectile
#+BEGIN_SRC emacs-lisp
(use-package projectile)
#+END_SRC

** LSP Mode
** Eglot
#+BEGIN_SRC emacs-lisp
  (use-package eglot
    :defer t)
#+END_SRC

** Magit
#+BEGIN_SRC emacs-lisp
(use-package magit)
#+END_SRC

** Doom Modeline
#+BEGIN_SRC emacs-lisp
  (use-package doom-modeline
    :init
    (doom-modeline-mode 1))
#+END_SRC

** Multiple Cursors
#+BEGIN_SRC emacs-lisp
(use-package multiple-cursors
  :init (setq mc/always-run-for-all t)
  :bind (("C-M-n" . mc/mark-next-word-like-this)
	 ("C-M-p" . 'mc/mark-previous-like-this)
	 ("C-M-S-n" . mc/skip-to-next-like-this)
	 ("C-M-S-p" . mc/skip-to-previous-like-this)
	 ("C-S-n" . mc/unmark-previous-like-this)
	 ("C-S-p" . mc/unmark-next-like-this)
	 ("C-M-<mouse-1>" . mc/add-cursor-on-click)))
#+END_SRC

** Which Key
- TODO: Paging keybinding does not work.
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :config
    (which-key-mode))
#+END_SRC

** hl-todo
#+BEGIN_SRC emacs-lisp
(use-package hl-todo
  :init
  (global-hl-todo-mode))
#+END_SRC

** Beacon
- TODO: investigate beacon-push-mark.
#+BEGIN_SRC emacs-lisp
  (use-package beacon
    :init
    (setq beacon-color "#D18770")
    (beacon-mode 1))
#+END_SRC

* Theme
** Disable all themes before loading a theme
#+BEGIN_SRC emacs-lisp
  (defun disable-all-themes ()
    "disable all active themes."
    (dolist (theme custom-enabled-themes)
      (disable-theme theme)))

  (defadvice load-theme (before disable-themes-first activate)
    (disable-all-themes))
#+END_SRC

** I use doom-spacegrey
#+BEGIN_SRC emacs-lisp
(use-package doom-themes
  :config
  (load-theme 'doom-spacegrey t))
#+END_SRC

** A light emacs theme that's well suited for org-mode
#+BEGIN_SRC emacs-lisp
  (use-package poet-theme
    :defer t)
#+END_SRC

* Programming Languages
** Python
* Fun
* Experimental
#+BEGIN_SRC emacs-lisp
(add-hook 'emacs-lisp-mode-hook
	  (lambda ()
	    (use-package elisp-slime-nav
	      :bind (("M-." . elisp-slime-nav-find-elisp-thing-at-point)
		     ("M-รง" . pop-tag-mark)))))
#+END_SRC
