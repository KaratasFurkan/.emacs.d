* Table of Contents :TOC_5:
- [[#about-this-configuration][About This Configuration]]
  - [[#applying-changes][Applying Changes]]
- [[#package-manager][Package Manager]]
  - [[#package-repositories][Package Repositories]]
    - [[#initialize-package-repositories][Initialize package repositories]]
  - [[#use-package][Use Package]]
    - [[#install-use-package-if-not-installed][Install use-package if not installed]]
    - [[#always-install-packages-if-not-installed][Always install packages if not installed]]
    - [[#always-compile-packages-and-use-the-newest-version-available][Always compile packages, and use the newest version available.]]
- [[#better-defaults][Better Defaults]]
  - [[#early-initel][early-init.el]]
  - [[#disable][Disable]]
  - [[#enable][Enable]]
  - [[#other][Other]]
- [[#custom-functions][Custom Functions]]
- [[#theme][Theme]]
  - [[#disable-all-themes-before-loading-a-theme][Disable all themes before loading a theme]]
  - [[#i-use-doom-spacegrey][I use doom-spacegrey]]
  - [[#a-light-emacs-theme-thats-well-suited-for-org-mode][A light emacs theme that's well suited for org-mode]]
- [[#packages][Packages]]
  - [[#org][Org]]
  - [[#helm][Helm]]
    - [[#helm-1][Helm]]
    - [[#helm-projectile][Helm Projectile]]
    - [[#helm-ag][Helm Ag]]
    - [[#helm-xref][Helm Xref]]
  - [[#shackle][Shackle]]
  - [[#company][Company]]
  - [[#company-box][Company Box]]
  - [[#projectile][Projectile]]
  - [[#lsp-mode][LSP Mode]]
  - [[#eglot][Eglot]]
  - [[#magit][Magit]]
  - [[#expand-region][Expand Region]]
  - [[#doom-modeline][Doom Modeline]]
  - [[#multiple-cursors][Multiple Cursors]]
  - [[#which-key][Which Key]]
  - [[#hl-todo][hl-todo]]
  - [[#beacon][Beacon]]
  - [[#toc-org][toc-org]]
  - [[#vterm][vterm]]
  - [[#emacs-dashboard][Emacs Dashboard]]
  - [[#yasnippet][YASnippet]]
  - [[#yasnippet-snippets][YASnippet-snippets]]
  - [[#winum][Winum]]
  - [[#deadgrep][Deadgrep]]
  - [[#avy][Avy]]
- [[#programming-languages][Programming Languages]]
  - [[#python][Python]]
- [[#keybindings][Keybindings]]
  - [[#spacemacs-better-defaults-layer][Spacemacs' "Better Defaults" layer]]
  - [[#global-key-bindings][Global Key Bindings]]
  - [[#spacemacs-like-menu-map][Spacemacs-like Menu Map]]
- [[#fun][Fun]]
- [[#custom-faces][Custom Faces]]
- [[#experimental][Experimental]]
  - [[#elisp][Elisp]]
  - [[#restclient][Restclient]]
  - [[#dired-icons][Dired icons]]
  - [[#wrap-region][wrap-region]]
  - [[#garbage-collect-threshold][Garbage Collect Threshold]]

* About This Configuration
** Applying Changes
To decrease startup time, I use a hook to export code blocks from my
literate config file every time on save. Yes it is bad to run the
function below even with unrelated files every time but I could not
find a better solution (I tried file local variables but it ask
permission to eval local variables every time). Since condition
checking executes in microseconds, it does not bother me.
#+BEGIN_SRC emacs-lisp
  (defun tangle-config ()
    "Export code blocks from my literate config file."
    (when (equal (buffer-file-name) config-org)
      (org-babel-tangle-file config-org config-el)))

  (add-hook 'after-save-hook 'tangle-config)
#+END_SRC

* Package Manager
** Package Repositories
*** Initialize package repositories
#+BEGIN_SRC emacs-lisp
  (require 'package)
  (setq package-archives '(("gnu" . "https://elpa.gnu.org/packages/")
			   ("melpa" . "https://melpa.org/packages/")
			   ("org" . "https://orgmode.org/elpa/")))
  (package-initialize)
#+END_SRC

** Use Package
*** Install use-package if not installed
#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
#+END_SRC

*** Always install packages if not installed
#+BEGIN_SRC emacs-lisp
(require 'use-package-ensure)
(setq use-package-always-ensure t
;;      use-package-always-defer t
)
#+END_SRC

*** Always compile packages, and use the newest version available.
#+BEGIN_SRC emacs-lisp
(use-package auto-compile
  :config (auto-compile-on-load-mode))
(setq load-prefer-newer t)
#+END_SRC

* Better Defaults
** early-init.el
#+begin_src emacs-lisp :tangle early-init.el
  (add-hook 'post-gc-hook
	'(lambda ()
	   (message "%s %s" "GC COLLECT" (format-time-string "%-I:%M"))))
  (setq gc-cons-threshold most-positive-fixnum
	gc-cons-percentage 1)
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (set-face-attribute 'default nil :family "Source Code Pro" :height 90)
#+end_src

** Disable
#+BEGIN_SRC emacs-lisp
  (blink-cursor-mode -1)
  (setq ring-bell-function 'ignore
    tab-bar-show nil
    inhibit-startup-message t
    initial-scratch-message nil
    create-lockfiles nil)
#+END_SRC

** Enable
#+BEGIN_SRC emacs-lisp
  (delete-selection-mode)
  (show-paren-mode)
  (global-subword-mode)
  (global-hl-line-mode)
  (winner-mode)
  (save-place-mode)
  (column-number-mode)
  (global-page-break-lines-mode)
  (global-auto-revert-mode)
#+END_SRC

** Other
#+BEGIN_SRC emacs-lisp
  (setq
   custom-file (concat user-emacs-directory ".custom.el") ; Don't load
   save-place-file (concat user-emacs-directory ".places")
   backup-directory-alist `(("." . ,(concat user-emacs-directory ".backups")))
   auto-save-file-name-transforms `((".*" ,(concat user-emacs-directory ".saves") t))
   recenter-positions '(middle 0.2 top 0.8 bottom) ; C-l positions
   truncate-lines t
   frame-resize-pixelwise t
   backup-by-copying t
   sentence-end-double-space nil
   require-final-newline t
   scroll-conservatively 10000 ; Smooth scrolling
   indent-tabs-mode nil
   show-trailing-whitespace t
   frame-title-format '("%b [%m]") ; file name and major mode
   recentf-exclude '("/\\.config/emacs/elpa/" "^/tmp/" "^/usr/")
   dired-listing-switches "-lhpa")

  (defalias 'yes-or-no-p 'y-or-n-p)

  (add-hook 'before-save-hook 'whitespace-cleanup)
  (add-hook 'prog-mode-hook 'display-line-numbers-mode)
  ;;(add-hook 'prog-mode-hook 'display-fill-column-indicator-mode)
#+END_SRC

* Custom Functions
#+begin_src emacs-lisp
  (defun fk/find-config ()
    "Open config file."
    (interactive)
    (find-file config-org))
#+end_src
#+begin_src emacs-lisp
  (defun fk/disable-all-themes ()
    "Disable all active themes."
    (dolist (theme custom-enabled-themes)
      (disable-theme theme)))
#+end_src
#+begin_src emacs-lisp
  (defun fk/company-backend-with-yas (backend)
    "Add ':with company-yasnippet' to the given company backend."
    (if (and (listp backend) (member 'company-yasnippet backend))
    backend
      (append (if (consp backend)
	  backend
	(list backend))
	  '(:with company-yasnippet))))
#+end_src
#+begin_src emacs-lisp
  (defun fk/company-enable-snippets ()
    "Enable snippet suggestions in company by adding
  ':with company-yasnippet' to all company backends."
    (interactive)
    (setq company-backends
      (mapcar 'fk/company-backend-with-yas company-backends)))
#+end_src
#+begin_src emacs-lisp
  (defun fk/activate-pyvenv ()
    "Activate python environment according to the `.venv' file."
    (interactive)
    (let* ((pdir (projectile-project-root)) (pfile (concat pdir ".venv")))
      (if (file-exists-p pfile)
      (pyvenv-workon (with-temp-buffer
	   (insert-file-contents pfile)
	   (nth 0 (split-string (buffer-string))))))))
#+end_src
#+begin_src emacs-lisp
  (defun fk/split-window-below-and-switch ()
    "Split the window horizontally, then switch to the new window."
    (interactive)
    (split-window-below)
    (other-window 1))

  (defun fk/split-window-right-and-switch ()
    "Split the window vertically, then switch to the new window."
    (interactive)
    (split-window-right)
    (other-window 1))
#+end_src
#+begin_src emacs-lisp
  ;; source: spacemacs' better default layer
  (defun fk/backward-kill-word-or-region ()
    "Calls `kill-region' when a region is active and
    `backward-kill-word' otherwise."
    (interactive)
    (if (region-active-p)
    (call-interactively 'kill-region)
      (backward-kill-word 1)))
#+end_src
#+begin_src emacs-lisp
  (defun fk/helm-do-ag-project-root-or-current-dir ()
    "If in a project call `helm-do-ag-project-root', else call
  `helm-do-ag' with current directory."
    (interactive)
    (if (projectile-project-p)
    (helm-do-ag-project-root)
      (helm-do-ag default-directory)))
#+end_src

* Theme
** Disable all themes before loading a theme
#+BEGIN_SRC emacs-lisp
  (defadvice load-theme (before disable-themes-first activate)
    (fk/disable-all-themes))
#+END_SRC

** I use doom-spacegrey
#+BEGIN_SRC emacs-lisp
(use-package doom-themes
  :config
  (load-theme 'doom-spacegrey t))
#+END_SRC

** A light emacs theme that's well suited for org-mode
#+BEGIN_SRC emacs-lisp
  (use-package poet-theme
    :defer t)
#+END_SRC

* Packages
** Org
- TODO: use-package ile yapÄ±labilir.
#+begin_src emacs-lisp
  (use-package org
    :init
    (setq org-confirm-babel-evaluate nil)
    :bind (
       :map org-mode-map
       ("C-c C-e" . org-edit-special)
       ("M-n" . org-next-visible-heading)
       ("M-p" . org-previous-visible-heading)
       :map org-src-mode-map
       ("C-c C-c" . org-edit-src-exit)))
#+end_src

** Helm
*** Helm
#+BEGIN_SRC emacs-lisp
  (use-package helm
    :init
    (setq
     helm-M-x-always-save-history t
     helm-M-x-input-history t)
    :bind
    (("M-x" . helm-M-x)
     ("C-x C-f" . helm-find-files)
     ("C-x C-b" . helm-buffers-list)
     ("C-x b" . helm-buffers-list)
     ("C-x C-r" . helm-recentf)
     ("C-x i" . helm-imenu-in-all-buffers) ; FIXME: does not work.
     ("C-x C-i" . helm-imenu)
     ("M-y" . helm-show-kill-ring)
     ;;:map helm-find-files-map
     ;;("<tab>" . helm-ff-RET)
     ))
#+END_SRC

*** Helm Projectile
#+BEGIN_SRC emacs-lisp
 (use-package helm-projectile
   :bind (("C-x f" . helm-projectile)))
#+END_SRC

*** Helm Ag
#+begin_src emacs-lisp
  (use-package helm-ag
    :init
    (setq
     helm-ag-base-command
     "rg -S --no-heading --color=never --line-number --max-columns 200")
    :bind ("C-M-s" . fk/helm-do-ag-project-root-or-current-dir))
#+end_src

*** Helm Xref
#+begin_src emacs-lisp
  (use-package helm-xref
    :init
    (setq xref-prompt-for-identifier nil)
    :bind
    (("M-r" . xref-find-references)))
#+end_src

** Shackle
#+BEGIN_SRC emacs-lisp
  (use-package shackle
    :defer 0.2
    :config
    (shackle-mode 1)
    (setq shackle-rules
      '(("\\`\\*helm.*?\\*\\'" :regexp t :align t :size 0.3))))
#+END_SRC

** Company
#+BEGIN_SRC emacs-lisp
  (use-package company
    :init
    (setq company-idle-delay 0
	  company-minimum-prefix-length 1
	  company-tooltip-align-annotations t
	  ;; Disable single-candidate and echo-area frontends:
	  company-frontends '(company-box-frontend))
    :config
    (global-company-mode)
    (fk/company-enable-snippets))
#+END_SRC

** Company Box
- TODO: icon & font sizes are broken.
#+BEGIN_SRC emacs-lisp
  (use-package company-box
    :hook (company-mode . company-box-mode)
    :config
    (setq company-box-show-single-candidate t
	  company-box-icons-alist 'company-box-icons-all-the-icons
	  company-box-icons-all-the-icons
	  (let ((all-the-icons-scale-factor 1)
		(all-the-icons-default-adjust 0))
	    `((Unknown       . ,(all-the-icons-octicon "file-text" :face 'all-the-icons-purple))
	      (Text          . ,(all-the-icons-faicon "file-text-o" :face 'all-the-icons-green))
	      (Method        . ,(all-the-icons-faicon "cube" :face 'all-the-icons-blue))
	      (Function      . ,(all-the-icons-faicon "cube" :face 'all-the-icons-blue))
	      (Constructor   . ,(all-the-icons-faicon "cube" :face 'all-the-icons-blue))
	      (Field         . ,(all-the-icons-faicon "tag" :face 'all-the-icons-red))
	      (Variable      . ,(all-the-icons-faicon "tag" :face 'all-the-icons-blue))
	      (Class         . ,(all-the-icons-faicon "cog" :face 'all-the-icons-red))
	      (Interface     . ,(all-the-icons-faicon "cogs" :face 'all-the-icons-red))
	      (Module        . ,(all-the-icons-alltheicon "less" :face 'all-the-icons-red))
	      (Property      . ,(all-the-icons-faicon "wrench" :face 'all-the-icons-red))
	      (Unit          . ,(all-the-icons-faicon "tag" :face 'all-the-icons-red))
	      (Value         . ,(all-the-icons-faicon "tag" :face 'all-the-icons-red))
	      (Enum          . ,(all-the-icons-faicon "file-text-o" :face 'all-the-icons-red))
	      (Keyword       . ,(all-the-icons-material "format_align_center" :face 'all-the-icons-red))
	      (Snippet       . ,(all-the-icons-material "content_paste" :face 'all-the-icons-red))
	      (Color         . ,(all-the-icons-material "palette" :face 'all-the-icons-red))
	      (File          . ,(all-the-icons-faicon "file" :face 'all-the-icons-red))
	      (Reference     . ,(all-the-icons-faicon "tag" :face 'all-the-icons-red))
	      (Folder        . ,(all-the-icons-faicon "folder" :face 'all-the-icons-red))
	      (EnumMember    . ,(all-the-icons-faicon "tag" :face 'all-the-icons-red))
	      (Constant      . ,(all-the-icons-faicon "tag" :face 'all-the-icons-red))
	      (Struct        . ,(all-the-icons-faicon "cog" :face 'all-the-icons-red))
	      (Event         . ,(all-the-icons-faicon "bolt" :face 'all-the-icons-red))
	      (Operator      . ,(all-the-icons-faicon "tag" :face 'all-the-icons-red))
	      (TypeParameter . ,(all-the-icons-faicon "cog" :face 'all-the-icons-red))
	      (Template      . ,(all-the-icons-octicon "file-code" :face 'all-the-icons-green))))))
#+END_SRC

** Projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :config
    (projectile-mode))
#+END_SRC

** LSP Mode
** Eglot
#+BEGIN_SRC emacs-lisp
  (use-package eglot
    :defer t
    :config
    (add-hook 'eglot-managed-mode-hook 'fk/company-enable-snippets))
#+END_SRC

** Magit
#+BEGIN_SRC emacs-lisp
(use-package magit)
#+END_SRC

** Expand Region
#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :init
    (setq expand-region-fast-keys-enabled nil
	  expand-region-subword-enabled t)
    :bind (("C-t" . er/expand-region)))
#+END_SRC

** Doom Modeline
#+BEGIN_SRC emacs-lisp
  (use-package doom-modeline
    :init
    (setq doom-modeline-buffer-encoding nil)
    (doom-modeline-mode 1))
#+END_SRC

** Multiple Cursors
#+BEGIN_SRC emacs-lisp
  (use-package multiple-cursors
    :init (setq mc/always-run-for-all t)
    :bind (("C-M-n" . mc/mark-next-like-this)
	   ("C-M-p" . mc/mark-previous-like-this)
	   ("C-M-S-n" . mc/skip-to-next-like-this)
	   ("C-M-S-p" . mc/skip-to-previous-like-this)
	   ("C-S-n" . mc/unmark-previous-like-this)
	   ("C-S-p" . mc/unmark-next-like-this)
	   ("C-M-<mouse-1>" . mc/add-cursor-on-click)))
#+END_SRC

** Which Key
- TODO: Paging keybinding does not work.
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :init
    (setq which-key-idle-secondary-delay 0)
    :config
    (which-key-mode))
#+END_SRC

** hl-todo
#+BEGIN_SRC emacs-lisp
(use-package hl-todo
  :init
  (global-hl-todo-mode))
#+END_SRC

** Beacon
- TODO: investigate beacon-push-mark.
#+BEGIN_SRC emacs-lisp
  (use-package beacon
    :init
    (setq beacon-color "#D18770"
	  beacon-blink-when-point-moves-vertically 10)
    (beacon-mode 1))
#+END_SRC

** toc-org
#+BEGIN_SRC emacs-lisp
  (use-package toc-org
    :config
    (add-hook 'org-mode-hook 'toc-org-mode))
#+END_SRC

** vterm
#+BEGIN_SRC emacs-lisp
  (use-package vterm)
#+END_SRC

** Emacs Dashboard
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :defer nil
    :init
    (setq dashboard-startup-banner 'logo
	  dashboard-set-heading-icons t
	  dashboard-set-file-icons t
	  dashboard-items '((recents  . 10)
			    (projects . 5)))
    :config
    (dashboard-setup-startup-hook))
#+END_SRC

** YASnippet
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :config
    (yas-global-mode)
    (add-hook 'snippet-mode-hook (lambda () (setq require-final-newline nil))))
#+END_SRC

** YASnippet-snippets
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet-snippets)
#+END_SRC

** Winum
#+begin_src emacs-lisp
  (use-package winum
    :init
    (setq winum-keymap
      (let ((map (make-sparse-keymap)))
	(define-key map (kbd "M-0") 'winum-select-window-0-or-10)
	(define-key map (kbd "M-1") 'winum-select-window-1)
	(define-key map (kbd "M-2") 'winum-select-window-2)
	(define-key map (kbd "M-3") 'winum-select-window-3)
	(define-key map (kbd "M-4") 'winum-select-window-4)
	(define-key map (kbd "M-5") 'winum-select-window-5)
	(define-key map (kbd "M-6") 'winum-select-window-6)
	(define-key map (kbd "M-7") 'winum-select-window-7)
	(define-key map (kbd "M-8") 'winum-select-window-8)
	(define-key map (kbd "M-9") 'winum-select-window-9)
	map))
    :config
    (winum-mode))
#+end_src

** Deadgrep
#+begin_src emacs-lisp
  (use-package deadgrep
    :bind
    (("C-c C-e" . deadgrep-edit-mode)))
#+end_src

** Avy
#+begin_src emacs-lisp
  (use-package avy
    :bind
    (("M-j" . avy-goto-word-or-subword-1)
     ("C-M-u" . avy-pop-mark)))
#+end_src

* Programming Languages
** Python
#+BEGIN_SRC emacs-lisp
  (use-package python
    :bind (
	   :map python-mode-map
	   ("M-." . xref-find-definitions))
    :config
    (use-package pyvenv)
    (add-hook 'python-mode-hook 'eglot-ensure)
    (add-hook 'python-mode-hook 'fk/activate-pyvenv)
    (add-hook 'before-save-hook 'eglot-format-buffer))
#+END_SRC

* Keybindings
** Spacemacs' "Better Defaults" layer
#+begin_src emacs-lisp
  (use-package unfill
    :bind (("M-q" . unfill-toggle)))

  (use-package mwim
    :bind (("C-a" . mwim-beginning-of-code-or-line)
       ("C-e" . mwim-end-of-code-or-line)))

  (global-set-key (kbd "C-w") 'fk/backward-kill-word-or-region)
#+end_src
** Global Key Bindings
#+BEGIN_SRC emacs-lisp
  (keyboard-translate ?\C-h ?\C-?) ;; Use shell-like backspace C-h
  (global-set-key (kbd "C-?") 'help-command)
  (global-set-key (kbd "C-x c") 'fk/find-config)
  (global-set-key (kbd "M-o") 'other-window)
  (global-set-key (kbd "C-u") 'undo)
  (global-set-key (kbd "M-u") 'winner-undo)
  (global-set-key (kbd "M-U") 'winner-redo)
  (global-set-key (kbd "C-x C-k") 'kill-current-buffer)
  (global-set-key (kbd "C-x k") 'kill-buffer-and-window)
  (global-set-key (kbd "M-l") 'move-to-window-line-top-bottom)
  (global-set-key (kbd "M-s") 'isearch-forward-symbol-at-point)
  (global-set-key (kbd "C-x 2") 'fk/split-window-below-and-switch)
  (global-set-key (kbd "C-x 3") 'fk/split-window-right-and-switch)
  (global-set-key (kbd "C-v") (lambda () (interactive) (scroll-up-command 15)))
  (global-set-key (kbd "M-v") (lambda () (interactive) (scroll-down-command 15)))
#+END_SRC

** Spacemacs-like Menu Map
- TODO: improve this section.
#+begin_src emacs-lisp
  (bind-keys :prefix-map fk/menu-map
	 :prefix "M-m"
	 ("f f" . helm-find-files)
	 ("f r" . helm-recentf)
	 ("f c" . fk/find-config)
	 ("u" . universal-argument))
#+end_src

* Fun
* Custom Faces
#+begin_src emacs-lisp
  (set-face-attribute 'highlight nil :underline t :weight 'bold :background nil :foreground nil)
  (set-face-attribute 'show-paren-match nil :background nil :weight 'bold :foreground "white")
  (set-face-attribute 'doom-modeline-buffer-path nil :inherit 'font-lock-comment-face)
  (set-face-attribute 'doom-modeline-project-parent-dir nil :inherit 'font-lock-comment-face)
  (set-face-attribute 'font-lock-function-name-face nil :foreground "LightGoldenrod1")
  (set-face-attribute 'font-lock-string-face nil :foreground "PeachPuff3")
  (set-face-attribute 'mode-line nil :height 80 :background "#262b35")
  (set-face-attribute 'yas-field-highlight-face nil :inherit 'region)
#+end_src

* Experimental
** Elisp
#+BEGIN_SRC emacs-lisp
  (add-hook 'emacs-lisp-mode-hook
	    (lambda ()
	      (use-package elisp-slime-nav
		:bind (("M-." . elisp-slime-nav-find-elisp-thing-at-point)
		       ("M-Ã§" . pop-tag-mark)))))

  (use-package aggressive-indent
      :diminish
      :hook (emacs-lisp-mode . aggressive-indent-mode))
#+END_SRC

** Restclient
   #+BEGIN_SRC emacs-lisp
     (use-package restclient
       :init
       (add-to-list 'auto-mode-alist '("\\(\\.http\\'\\)" . restclient-mode))
       :config
       (add-to-list 'company-backends 'company-restclient))

     (use-package company-restclient
       :after (company restclient))
   #+END_SRC

** Dired icons
#+BEGIN_SRC emacs-lisp
 (use-package all-the-icons-dired
   :hook (dired-mode . all-the-icons-dired-mode))
#+END_SRC

** wrap-region
#+BEGIN_SRC emacs-lisp
  (use-package wrap-region
    :defer 1
    :config
    (wrap-region-global-mode t))
#+END_SRC
** Garbage Collect Threshold
#+begin_src emacs-lisp
  (defun fk/setup-gc ()
    "Garbage collection settings to speed-up emacs."
    (setq gc-cons-threshold (* 1024 1024 20))
    (setq gc-cons-percentage 0.6))

  (add-hook 'after-init-hook 'fk/setup-gc)
#+end_src
