#+TITLE: My Literate Emacs Config
#+STARTUP: overview

* TODO Screenshots
* Table of Contents :TOC:
- [[#screenshots][Screenshots]]
- [[#about][About]]
  - [[#installation][Installation]]
  - [[#literate-configuration][Literate Configuration]]
  - [[#early-initel][early-init.el]]
  - [[#synchronizing-changes][Synchronizing Changes]]
- [[#package-management][Package Management]]
  - [[#packageel][package.el]]
  - [[#use-package][use-package]]
- [[#performance-optimizations][Performance Optimizations]]
  - [[#my-tricky-method-of-delaying-package-loads][My tricky method of delaying package loads]]
  - [[#garbage-collection][Garbage Collection]]
  - [[#file-handler][File Handler]]
  - [[#others][Others]]
  - [[#utils][Utils]]
    - [[#measure-time][measure-time]]
    - [[#time-since-startup][time-since-startup]]
    - [[#time-since-last-check][time-since-last-check]]
- [[#better-defaults][Better Defaults]]
  - [[#file-locations][File Locations]]
  - [[#helpful][Helpful]]
  - [[#menu-style-keybindings][Menu Style Keybindings]]
  - [[#others-1][Others]]
- [[#appearance][Appearance]]
  - [[#better-defaults-1][Better Defaults]]
    - [[#remove-ui-elements-that-i-dont-use][Remove UI elements that I don't use]]
    - [[#window-dividers][Window Dividers]]
    - [[#trailing-whitespace][Trailing Whitespace]]
    - [[#others-2][Others]]
  - [[#utils-1][Utils]]
    - [[#fkdarken-background][fk/darken-background]]
  - [[#font][Font]]
  - [[#theme][Theme]]
  - [[#modeline][Modeline]]
    - [[#doom-modeline][Doom Modeline]]
    - [[#global-modeline][Global Modeline]]
    - [[#anzu][Anzu]]
  - [[#page-break-lines][Page Break Lines]]
  - [[#highlight-todos][Highlight TODOs]]
  - [[#beacon][Beacon]]
  - [[#indent-bars][Indent Bars]]
  - [[#breadcrumb][Breadcrumb]]
  - [[#dashboard][Dashboard]]
  - [[#fill-column-indicator][Fill Column Indicator]]
  - [[#line-numbers][Line Numbers]]
  - [[#perfect-margin][Perfect Margin]]
  - [[#goggles-mode-highlight-changes][Goggles Mode (Highlight Changes)]]
  - [[#redacted-mode-blur-text-for-screenshots][Redacted Mode (Blur text for screenshots)]]
- [[#completion][Completion]]
  - [[#better-defaults-2][Better Defaults]]
  - [[#which-key-keybinding-completion][Which Key (Keybinding Completion)]]
  - [[#vertico-generic-completion--selection][Vertico (Generic Completion & Selection)]]
    - [[#vertico][Vertico]]
    - [[#vertico-posframe][Vertico Posframe]]
  - [[#embark-actions-on-selected-candidates][Embark (Actions on Selected Candidates)]]
  - [[#corfu-in-buffer-completion-eg-code-completion][Corfu (In-buffer Completion e.g. code completion)]]
    - [[#corfu][Corfu]]
    - [[#cape][Cape]]
    - [[#nerd-icons-corfu][Nerd Icons Corfu]]
  - [[#yasnippet-snippet-completion][YASnippet (Snippet Completion)]]
    - [[#yasnippet][YASnippet]]
    - [[#yasnippet-capf][YASnippet Capf]]
  - [[#orderless][Orderless]]
- [[#search--navigation][Search & Navigation]]
  - [[#better-defaults-3][Better Defaults]]
  - [[#utils-2][Utils]]
    - [[#find-config][find-config]]
    - [[#open-messages][open messages]]
    - [[#generate-scratch-buffers][generate scratch buffers]]
    - [[#get-selected-text][get-selected-text]]
    - [[#switch-last-window][switch-last-window]]
  - [[#keybindings][Keybindings]]
  - [[#recentf-recent-files][Recentf (Recent Files)]]
  - [[#winner-mode][Winner Mode]]
  - [[#ace-window][Ace Window]]
  - [[#mwim-move-where-i-mean][Mwim (Move Where I Mean)]]
  - [[#consult][Consult]]
  - [[#xref][Xref]]
  - [[#dumb-jump][Dumb Jump]]
  - [[#deadgrep][Deadgrep]]
  - [[#avy][Avy]]
  - [[#perspective][Perspective]]
  - [[#block-nav][Block Nav]]
  - [[#god-mode][God Mode]]
  - [[#pixel-scroll][Pixel Scroll]]
- [[#text-editing][Text Editing]]
  - [[#better-defaults-4][Better Defaults]]
  - [[#utils-3][Utils]]
    - [[#backward-kill-word-or-region][backward-kill-word-or-region]]
    - [[#newline-below][newline-below]]
    - [[#remove-hypens-and-underscores-region][remove-hypens-and-underscores-region]]
    - [[#unfill-toggle][unfill-toggle]]
  - [[#keybindings-1][Keybindings]]
  - [[#whitespace-cleanup][Whitespace Cleanup]]
  - [[#case-switching][Case Switching]]
  - [[#paren][Paren]]
  - [[#wrap-region][Wrap Region]]
  - [[#expand-region][Expand Region]]
  - [[#wgrep-writable-grep][Wgrep (Writable Grep)]]
- [[#programming][Programming]]
  - [[#common][Common]]
    - [[#electric-indent-mode][Electric Indent Mode]]
    - [[#comments][Comments]]
    - [[#project][Project]]
    - [[#eglot-lsp][Eglot (LSP)]]
    - [[#treesitter][TreeSitter]]
    - [[#rainbow-delimiters][Rainbow Delimiters]]
    - [[#color-identifiers-mode][Color Identifiers Mode]]
    - [[#symbol-overlay][Symbol Overlay]]
    - [[#rainbow-mode][Rainbow Mode]]
    - [[#bug-reference-mode][Bug Reference Mode]]
  - [[#emacs-lisp][Emacs Lisp]]
    - [[#elisp-slime-nav][Elisp Slime Nav]]
    - [[#aggressive-indent][Aggressive Indent]]
    - [[#lisp-data-mode][Lisp Data Mode]]
  - [[#python][Python]]
    - [[#python-1][Python]]
    - [[#pyvenv][Pyvenv]]
    - [[#black][Black]]
    - [[#isort][Isort]]
    - [[#django][Django]]
- [[#tools][Tools]]
  - [[#org][Org]]
    - [[#org-1][Org]]
    - [[#org-super-agenda][Org Super Agenda]]
    - [[#org-ql][Org QL]]
    - [[#custom-functions][Custom Functions]]
      - [[#org-screenshot][org-screenshot]]
      - [[#org-indent-src-block][org-indent-src-block]]
      - [[#org-sort-by-priority][org-sort-by-priority]]
      - [[#org-agenda-posframe][org-agenda-posframe]]
    - [[#org-bullets][Org Bullets]]
    - [[#toc-org][Toc Org]]
    - [[#org-babel-async][Org Babel Async]]
    - [[#org-pomodoro][Org Pomodoro]]
    - [[#org-roam][Org Roam]]
    - [[#org-fancy-priorities][Org Fancy Priorities]]
    - [[#org-tree-slide][Org Tree Slide]]
    - [[#org-export-twitter-bootstrap][Org Export Twitter Bootstrap]]
    - [[#org-appear][Org Appear]]
    - [[#org-rainbow-tags][Org Rainbow Tags]]
  - [[#version-control][Version Control]]
    - [[#magit][Magit]]
      - [[#magit-1][Magit]]
      - [[#magit-todos][Magit Todos]]
      - [[#magit-forge][Magit Forge]]
      - [[#magit-delta][Magit Delta]]
    - [[#diff-hl][diff-hl]]
    - [[#git-link][Git Link]]
    - [[#git-timemachine][Git Timemachine]]
    - [[#git-blame-vc-msg][Git Blame (vc-msg)]]
    - [[#git-blame][Git Blame]]
    - [[#dired-git-info][Dired Git Info]]
  - [[#keycast][Keycast]]
  - [[#terminal-emulation][Terminal Emulation]]
    - [[#eat-terminal-emulator][Eat (Terminal Emulator)]]
    - [[#shell-pop][Shell Pop]]
  - [[#restclient][Restclient]]
    - [[#restclient-1][Restclient]]
    - [[#ob-restclient][ob-restclient]]
    - [[#password-mode][Password Mode]]
- [[#file-modes][File Modes]]
- [[#some-random-must-have-settings][Some random must have settings]]
- [[#---local-variables---][-- Local Variables --]]

* About
** Installation

Clone this repository to ~/.emacs.d or ~/.config/emacs
#+BEGIN_SRC sh :tangle no
git clone https://github.com/KaratasFurkan/.emacs.d.git
#+END_SRC

Open Emacs and let the configuration install necessary packages.

Note: This configuration is *not* intended to be directly used by others, but it
can be useful to get inspired or copy some parts of it. I use *Emacs 29.1.90* but
most of this configuration will probably work in older versions too.

** Literate Configuration

This *README.org* file is the actual main configuration file. I use [[file:init.el][init.el]] just
to load the tangled/exported elisp file or generate it if it doesn't exist yet.

init.el:
#+BEGIN_SRC emacs-lisp :tangle init.el
(defconst config-org (locate-user-emacs-file "README.org"))
(defconst config-el (locate-user-emacs-file "config.el"))

(unless (file-exists-p config-el)
  (require 'org)
  (org-babel-tangle-file config-org config-el))

(load-file config-el)
#+END_SRC

Initialization flow:
#+BEGIN_SRC artist :tangle no
   +-------+
   | Emacs |
   +-------+                               open  +----------+
       |     if config.el doesn't exist  /-----> |README.org|
       v                     /-----------        +----------+
   +-------+     /-----------                          |  tangle/export elisp blocks
   |init.el| ----                                      |
   +-------+     \-----------                          v  load
                             \-----------  load  +----------+
                 if config.el exists     \-----> |config.el |
                                                 +----------+
#+END_SRC

** early-init.el

Note that a few of the code blocks (mostly UI related) in this configuration
tangle to =early-init.el= instead of =config.el= (which is the elisp file generated
by this org file) to get the effects in the very beginning of the
initialization.

** Synchronizing Changes

The simplest solution is running =(org-babel-tangle-file config-org config-el)=.
However, it hangs Emacs when there are a lot of code blocks. So I created the
=fk/tangle-config= command below to make it asynchronous.

It can be called manually with =M-x fk/tangle-config RET= but I prefer to call it
automatically after each time I save this =README.org= file. To achieve this, I
added an =after-save-hook= in the [[#---local-variables---][-- Local Variables --]] section.
#+BEGIN_SRC emacs-lisp
(defun fk/tangle-config ()
  "Export code blocks from the literate config file asynchronously."
  (interactive)
  (make-process
   :command `("emacs" ,config-org "--batch" "--eval"
              ,(format "(org-babel-tangle nil \"%s\")" config-el))
   :name "tangle-process"
   :filter (lambda (process output) (message (string-trim output)))))

;; prevent emacs from killing itself until the tangle-process finished
(add-to-list 'kill-emacs-query-functions
             (lambda ()
               (or (not (process-live-p (get-process "tangle-process")))
                   (y-or-n-p "\"fk/tangle-config\" is running; kill it? "))))
#+END_SRC

* Package Management
** package.el

I was actually using =straight.el= but since installing from remote (e.g. =github=)
support came to =package.el= in Emacs 29, I want to give it a shot. I know that
this is not the only feature of =straight.el= but it was the main one for me.

#+BEGIN_SRC emacs-lisp
;; TODO: check package-quickstart and other optimization related stuff
(use-package package
  :config
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t))
#+END_SRC

** use-package

I mainly use =use-package= for everything in my configuration. I'm glad to have it
built-in in Emacs 29. Unfortunately, the =vc-use-package= support will be shipped
with Emacs 30, though. So I install that extension manually.
#+BEGIN_SRC emacs-lisp
(use-package use-package
  :config
  ;; add :vc keyword to `use-package'
  ;; example:
  ;; (use-package modus-themes
  ;;   :vc (modus-themes :url "https://github.com/protesilaos/modus-themes"
  ;;                     :branch "main"
  ;;                     :rev "284433625ed7cd3b19d2e34589c3041e16dd0deb"))  ; TODO: doesn't work
  ;; this will be built-in in Emacs 30
  (unless (package-installed-p 'vc-use-package)
    (package-vc-install "https://github.com/slotThe/vc-use-package")))

(use-package use-package-ensure
  :custom
  (use-package-always-ensure t))  ; install packages if not installed yet
#+END_SRC

* Performance Optimizations

A very nice source: https://github.com/hlissner/doom-emacs/blob/develop/docs/faq.org#how-does-doom-start-up-so-quickly

** My tricky method of delaying package loads

In my configuration, you will see lots of =dashboard-after-initialize-hook=
hooks. I use these hooks for almost all the packages that I want to load
immediately after Emacs starts.

The trick is these hooks run after the dashboard is fully initialized, and since
I spend a few seconds to check my dashboard every time I open Emacs, packages
can be loaded during that time without me even noticing. Thanks to the deferred
loads, my configuration is already fast enough for me even without this trick
but it feels much better to see the dashboard instantly.

Fun fact: I'm actually the one who [[https://github.com/emacs-dashboard/emacs-dashboard/pull/258][added]] this feature to [[https://github.com/emacs-dashboard/emacs-dashboard/][emacs-dashboard]], thanks
to the maintainers for accepting it :)

Lastly, I like to see a success message in the echo area after all packages are
loaded. So let's add it at the end of =dashboard-after-initialize-hook=.
#+BEGIN_SRC emacs-lisp
(add-hook 'dashboard-after-initialize-hook
          (lambda ()
            (message "Emacs started successfully.")) 100)
#+END_SRC

** Garbage Collection

Make startup faster by reducing the frequency of garbage collection. Set
gc-cons-threshold (the default is 800 kilobytes) to maximum value available, to
prevent any garbage collection from happening during load time.

Note: tangle to early-init.el to make startup even faster
#+BEGIN_SRC emacs-lisp :tangle early-init.el
(defun fk/defer-garbage-collection ()
  (setopt gc-cons-threshold most-positive-fixnum))

(fk/defer-garbage-collection)
#+END_SRC

Restore it to reasonable value after init. Also stop garbage collection during
minibuffer interaction (e.g. helm, vertico).
#+BEGIN_SRC emacs-lisp
(defconst 1mb 1048576)
(defconst 20mb 20971520)
(defconst 30mb 31457280)
(defconst 50mb 52428800)
(defconst 100mb 104857600)

(defun fk/restore-garbage-collection ()
  (run-at-time 1 nil (lambda () (setopt gc-cons-threshold 30mb))))

(add-hook 'emacs-startup-hook 'fk/restore-garbage-collection 100)
(add-hook 'minibuffer-setup-hook 'fk/defer-garbage-collection -100)
(add-hook 'minibuffer-exit-hook 'fk/restore-garbage-collection 100)

(setopt read-process-output-max 1mb)  ; useful with external processes e.g. LSP

;; TODO: check doom-emacs' optimizations
#+END_SRC

** File Handler

Similar to garbage collection optimization.

(Note: ":tangle early-init.el")
#+BEGIN_SRC emacs-lisp :tangle early-init.el
(defvar default-file-name-handler-alist file-name-handler-alist)
(setopt file-name-handler-alist nil)

(add-hook 'emacs-startup-hook
          (lambda ()
            (setopt file-name-handler-alist default-file-name-handler-alist)) 100)
#+END_SRC

** Others

(Note: ":tangle early-init.el")
#+BEGIN_SRC emacs-lisp :tangle early-init.el
(setopt
 frame-inhibit-implied-resize t  ; inhibit frame resize at startup
 inhibit-startup-screen t
 initial-major-mode 'fundamental-mode)
#+END_SRC

** Utils
*** measure-time

#+BEGIN_SRC emacs-lisp
(defmacro fk/measure-time (&rest body)
  "Measure the time it takes to evaluate BODY."
  `(let ((time (current-time)))
     ,@body
     (message "%s" (float-time (time-since time)))))
#+END_SRC

*** time-since-startup

(Note: ":tangle early-init.el")
#+BEGIN_SRC emacs-lisp :tangle early-init.el
(defun fk/time-since-startup (&optional prefix)
  "Display the time that past since emacs startup. Add PREFIX if given at the
start of message for debug purposes."
  (interactive)
  (let* ((prefix (or prefix ""))
         (time (float-time (time-since before-init-time)))
         (str (format "%s%s seconds" prefix time)))
    (if (or (not (string-empty-p prefix))
            (called-interactively-p 'interactive))
        (message str)
      str)))
#+END_SRC

*** time-since-last-check

(Note: ":tangle early-init.el")
#+BEGIN_SRC emacs-lisp :tangle early-init.el
(defvar fk/time-last-check nil)
(defvar fk/time-threshold 0)

(defun fk/time-since-last-check (&optional prefix)
  "Display the time that past since last check. Add PREFIX if given at the
start of message for debug purposes."
  (interactive)
  (let* ((prefix (or prefix ""))
         (time (float-time (time-since (or fk/time-last-check before-init-time))))
         (str (format "%s%s seconds" prefix time)))
    (setopt fk/time-last-check (current-time))
    (if (or (not (string-empty-p prefix))
            (called-interactively-p 'interactive))
        (when (> time fk/time-threshold) (message "%s" str))
      str)))
#+END_SRC

* Better Defaults
** File Locations

#+BEGIN_SRC emacs-lisp
(use-package no-littering
  :custom
  (custom-file (no-littering-expand-etc-file-name "custom.el"))
  :config
  (no-littering-theme-backups)  ; this setups auto-save, backup and undo-tree files
  (load custom-file t))  ; to load `safe-local-variable-values'
#+END_SRC

** Helpful

A better, more detailed *help* buffer.
#+BEGIN_SRC emacs-lisp
(use-package helpful
  :bind
  ( :map emacs-lisp-mode-map
    ("C-c C-d" . helpful-at-point))
  :hook
  (dashboard-after-initialize . fk/setup-helpful)
  :config
  (defun fk/setup-helpful ()
    "Override `describe-*' commands with appropriate `helpful-*' commands."
    (advice-add 'describe-function :override 'helpful-callable)
    (advice-add 'describe-variable :override 'helpful-variable)
    (advice-add 'describe-command :override 'helpful-command)
    (advice-add 'describe-symbol :override 'helpful-symbol)
    (advice-add 'describe-key :override 'helpful-key)))
#+END_SRC

** Menu Style Keybindings

Menu style keybindings like in *Spacemacs*.
#+BEGIN_SRC emacs-lisp
(bind-keys*
 ("M-h" . help-command)
 ("M-h M-h" . help-for-help)
 ("M-r" . repeat)
 :map global-map  :prefix-map fk/menu-map     :prefix "M-m"
 ("M-h" . help-command)
 ("M-u" . universal-argument)
 :map fk/menu-map :prefix-map buffers         :prefix "b"
 :map fk/menu-map :prefix-map comments        :prefix "c"
 :map fk/menu-map :prefix-map django          :prefix "d"
 :map fk/menu-map :prefix-map errors          :prefix "e"
 :map fk/menu-map :prefix-map files           :prefix "f"
 :map fk/menu-map :prefix-map org             :prefix "o"
 ;; :map fk/menu-map :prefix-map project         :prefix "p"  ; TODO: decide project or perspective
 :map fk/menu-map :prefix-map text            :prefix "t"
 :map fk/menu-map :prefix-map version-control :prefix "v"
 :map fk/menu-map :prefix-map windows         :prefix "w")
#+END_SRC

** Others

#+BEGIN_SRC emacs-lisp
(setopt
 ;; no need for a message in scratch buffer
 initial-scratch-message nil
 ;; .#locked-file-name
 create-lockfiles nil
 ;; exit emacs without asking to kill processes
 confirm-kill-processes nil
 ;; don't break linked files
 backup-by-copying t
 ;; always end files with a newline
 require-final-newline t
 ;; don't ask to delete old backup files
 delete-old-versions t
 ;; `revert-buffer' without confirmation
 revert-without-query '(".*")
 ;; non-unique buffer name display: unique-part/non-unique-filename
 uniquify-buffer-name-style 'forward
 ;; supposed to make scrolling faster on hold
 fast-but-imprecise-scrolling t
 ;; correctly resize windows by pixels (e.g. in `split-window' functions)
 window-resize-pixelwise t
 ;; disable annoying native-comp popus
 native-comp-async-report-warnings-errors 'silent
 ;; disable annoying "ad-handle-definition: 'something' got redefined" warnings
 ad-redefinition-action 'accept
 ;; use `y-or-n-p' instead of `yes-or-no-p'
 use-short-answers t
 ;; perform autoload if docs are missing from autoload objects.
 help-enable-symbol-autoload t
 ;; don't ask on `xref' jump: "Symbolic link ... follow link? (y or n)"
 vc-follow-symlinks t)

;; TODO: configure these modes separately in use-package forms for each
;; `revert-buffer' when the associated file changes on disk
(global-auto-revert-mode)
;; save cursor place for files and start from there when revisited
(save-place-mode)
;; prevents emacs from hanging when visiting files with long lines e.g. minified
(global-so-long-mode)

;; Make sure to focus when a new emacsclient frame created. TODO: check if this necessary
;; (add-hook 'server-after-make-frame-hook (lambda () (select-frame-set-input-focus (selected-frame))))
#+END_SRC

* Appearance
** Better Defaults
*** Remove UI elements that I don't use

(Note: ":tangle early-init.el")
#+BEGIN_SRC emacs-lisp :tangle early-init.el
;; TODO: try to configure these with use-package
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)

(setopt mode-line-format nil)  ; hide modeline until `doom-modeline' is loaded
#+END_SRC

*** Window Dividers

Change default window dividers to a better built-in alternative.
(Note: ":tangle early-init.el")
#+BEGIN_SRC emacs-lisp :tangle early-init.el
(setopt
 window-divider-default-places t  ; bottom and right
 window-divider-default-bottom-width 1
 window-divider-default-right-width 1)

(window-divider-mode)
#+END_SRC

*** Trailing Whitespace

#+BEGIN_SRC emacs-lisp
(defun fk/setup-trailing-whitespace ()
  "Setup trailing whitespace feature."
  (setopt show-trailing-whitespace t)
  (set-face-attribute 'trailing-whitespace nil :background fk/light-color7)
  ;; Disable `show-trailing-whitespace' when in non-file buffer
  (add-hook 'after-change-major-mode-hook
            (lambda ()
              (unless (buffer-file-name)
                (setq-local show-trailing-whitespace nil)))))

(add-hook 'dashboard-after-initialize-hook 'fk/setup-trailing-whitespace)
#+END_SRC

*** Others

#+BEGIN_SRC emacs-lisp
(setopt
 frame-title-format '("Emacs | %b")  ; "Emacs | buffer-name"
 truncate-lines t                    ; don't wrap long lines into multiple lines
 frame-resize-pixelwise t)           ; fit maximized emacs to screen correctly

;; TODO: configure these modes separately in use-package forms for each
(global-hl-line-mode)
(blink-cursor-mode 0)

;; clear enabled themes before loading a new one
(advice-add 'load-theme :before (lambda (&rest _)
                                  (dolist (theme custom-enabled-themes)
                                    (disable-theme theme))))
#+END_SRC

** Utils
*** fk/darken-background

I use this to darken some non-file buffers like eshell, vertico etc.
#+BEGIN_SRC emacs-lisp
(defun fk/darken-background ()
  "Darken the background of the current buffer."
  (interactive)
  (face-remap-add-relative 'default :background fk/dark-color))
#+END_SRC

** Font

#+BEGIN_SRC emacs-lisp :tangle early-init.el
(defconst fk/fixed-pitch-font-family "Iosevka")
(defconst fk/variable-pitch-font-family "Sans Serif")
(defconst fk/font-size 100)

(set-face-attribute 'default nil :family fk/fixed-pitch-font-family :height fk/font-size)
(set-face-attribute 'variable-pitch nil :family fk/variable-pitch-font-family :height fk/font-size)

;; `global-text-scale-adjust' has kinda magic, it adjust font according to the pressed key:
;;  '+', '=' Globally increase the height of the default face
;;  '-'      Globally decrease the height of the default face
;;  '0'      Globally reset the height of the default face
(keymap-global-set "C-=" 'global-text-scale-adjust)
(keymap-global-set "C--" 'global-text-scale-adjust)
(keymap-global-set "C-0" 'global-text-scale-adjust)
#+END_SRC

** Theme

#+BEGIN_SRC emacs-lisp
(use-package doom-themes
  :custom-face
  (font-lock-string-face ((t (:foreground "PeachPuff3"))))
  (font-lock-function-name-face ((t (:foreground "LightGoldenrod"))))
  (lazy-highlight ((t (:box (:line-width -1) :background unspecified :foreground unspecified))))
  :config
  (load-theme 'doom-spacegrey t)
  (defconst fk/cursor-color     (face-background 'cursor))
  (defconst fk/font-color       (face-foreground 'default))
  (defconst fk/background-color (face-background 'default))
  (defconst fk/dark-color       (doom-darken  fk/background-color 0.15))
  (defconst fk/dark-color1      (doom-darken  fk/background-color 0.01))
  (defconst fk/dark-color2      (doom-darken  fk/background-color 0.02))
  (defconst fk/dark-color3      (doom-darken  fk/background-color 0.03))
  (defconst fk/dark-color4      (doom-darken  fk/background-color 0.04))
  (defconst fk/dark-color5      (doom-darken  fk/background-color 0.05))
  (defconst fk/dark-color6      (doom-darken  fk/background-color 0.06))
  (defconst fk/dark-color7      (doom-darken  fk/background-color 0.07))
  (defconst fk/dark-color8      (doom-darken  fk/background-color 0.08))
  (defconst fk/dark-color9      (doom-darken  fk/background-color 0.09))
  (defconst fk/light-color      (doom-lighten fk/background-color 0.15))
  (defconst fk/light-color1     (doom-lighten fk/background-color 0.09))
  (defconst fk/light-color2     (doom-lighten fk/background-color 0.08))
  (defconst fk/light-color3     (doom-lighten fk/background-color 0.07))
  (defconst fk/light-color4     (doom-lighten fk/background-color 0.06))
  (defconst fk/light-color5     (doom-lighten fk/background-color 0.05))
  (defconst fk/light-color6     (doom-lighten fk/background-color 0.04))
  (defconst fk/light-color7     (doom-lighten fk/background-color 0.03))
  (defconst fk/light-color8     (doom-lighten fk/background-color 0.02))
  (defconst fk/light-color9     (doom-lighten fk/background-color 0.01)))
#+END_SRC

** Modeline
*** Doom Modeline

#+BEGIN_SRC emacs-lisp
(use-package doom-modeline  ; TODO: configure after checking up to date repo
  :init
  ;; show doom-modeline at the same time with dashboard
  (add-hook 'emacs-startup-hook 'doom-modeline-mode -100)  ; TODO: check if this necessary after adding all packages
  :custom-face
  (mode-line-active ((t (:background ,fk/dark-color))))
  (mode-line-inactive ((t (:background ,fk/dark-color5))))
  :hook
  (dashboard-after-initialize . column-number-mode))  ; built-in mode
#+END_SRC

*** TODO Global Modeline

#+BEGIN_SRC emacs-lisp

#+END_SRC

*** Anzu

I use this to display =[current/total]= counts when searching with =isearch=.
#+BEGIN_SRC emacs-lisp
(use-package anzu
  :hook
  (dashboard-after-initialize . global-anzu-mode))
#+END_SRC

** Page Break Lines

Note that page break characters can be inserted with =M-x quoted-insert RET C-l=.
#+BEGIN_SRC emacs-lisp
(use-package page-break-lines
  :hook
  (dashboard-after-initialize . global-page-break-lines-mode)
  :config
  (add-to-list 'page-break-lines-modes 'c-mode))
#+END_SRC

** Highlight TODOs

#+BEGIN_SRC emacs-lisp
;; TODO: check the repo readme, it has good commands and integrations
(use-package hl-todo
  :custom
  (hl-todo-keyword-faces '(("TODO"  . "#DC752F")
                           ("NOTE"  . "#B1951D")
                           ("HACK"  . "#B1951D")
                           ("TEMP"  . "#B1951D")
                           ("FIXME" . "#DC752F")
                           ("XXX+"  . "#dc752f")))
  :hook
  (dashboard-after-initialize . global-hl-todo-mode))
#+END_SRC

** Beacon
#+BEGIN_SRC emacs-lisp
(use-package beacon
  :disabled  ; TODO: it's buggy, try to fix or only blink on selected commands or try pulsar
  :custom
  ;; beacon-mode doesn't work properly with same color as cursor
  (beacon-color (doom-darken fk/cursor-color 0.001))
  (beacon-blink-when-point-moves-vertically 10)
  (beacon-blink-when-point-moves-horizontally 50)
  (beacon-dont-blink-major-modes '(dashboard-mode minibuff))
  :hook
  (dashboard-after-initialize . beacon-mode))
#+END_SRC

** Indent Bars

#+BEGIN_SRC emacs-lisp
(use-package indent-bars  ; TODO: doesn't work
  :vc (indent-bars :url "https://github.com/jdtsmith/indent-bars")
  :commands indent-bars-mode)
#+END_SRC

** Breadcrumb

#+BEGIN_SRC emacs-lisp
(use-package breadcrumb  ; TODO: setup for python and emacs source codes
  :commands breadcrumb-local-mode)
#+END_SRC

** Dashboard

#+BEGIN_SRC emacs-lisp
(use-package dashboard
  :custom
  (dashboard-startup-banner (locate-user-emacs-file "static/splash-images/emacs-e-medium.png"))
  (dashboard-init-info (format "Emacs started in %s\n\n" (fk/time-since-startup)))
  (dashboard-center-content t)
  (dashboard-items '((agenda . 0)  ; Custom section
                     ;;(todo-items . 0)  ; Custom section
                     (inbox-entries . 0)  ; Custom section
                     (habit-tracker . 0)))  ; Custom section
  :custom-face
  (dashboard-heading ((t (:height 1.2))))
  (dashboard-banner-logo-title ((t (:family "AV Qest" :height 2.5 :weight bold :foreground "#8583C7"))))
  :bind
  ( :map buffers
    ("h" . (lambda () (interactive) (if (get-buffer dashboard-buffer-name)
                                        (switch-to-buffer dashboard-buffer-name)
                                      (dashboard-open)))))
  :hook
  (dashboard-mode . (lambda () (setq-local cursor-type nil)))
  :config
  (dashboard-setup-startup-hook)

  ;; Run the hooks even if dashboard initialization is skipped
  (when (> (length command-line-args) 1)
    (add-hook 'emacs-startup-hook (lambda () (run-hooks 'dashboard-after-initialize-hook))))

  (defun fk/dashboard-get-section (expression)
    "Get expression output from Emacs daemon. Faster than reading it
in normal way if required libraries are already loaded in
daemon."
    (let* ((output-buffer (generate-new-buffer "*dashboard-temp*"))
           (exit-status (call-process "emacsclient" nil output-buffer nil
                                      "--eval" expression)))
      (if (zerop exit-status)
          (let* ((output (with-current-buffer output-buffer
                           (buffer-substring-no-properties (point-min) (point-max))))
                 (clean-output (string-trim (string-replace "#<marker" "<marker" output)))
                 (propertized-output (car (read-from-string clean-output))))
            (kill-buffer output-buffer)
            propertized-output)
        "Emacs server (daemon) is not running, Section couldn't loaded.")))

  ;; TODO: convert these string codes to normal code, investigate how emacs-async do that
  (defun fk/dashboard-get-agenda ()
    "Get a copy of the agenda buffer from Emacs daemon."
    (fk/dashboard-get-section
     "(progn
        (setopt org-agenda-span 2)
        (org-agenda-list)
        (read-only-mode -1)
        (goto-char (point-min))
        (kill-line 2)
        (buffer-string))"))

  (defun fk/dashboard-insert-agenda (&rest _)
    "Insert a copy of org-agenda buffer."
    (insert (nerd-icons-faicon "nf-fa-calendar" :v-adjust 0.12 :face 'dashboard-heading)
     (propertize " Agenda:\n\n" 'face 'dashboard-heading)
     (fk/dashboard-get-agenda)))

  (defun fk/dashboard-get-inbox-entries ()
    ;; TODO: appearance is not consistent, seems like there is some sort of caching
    "Get inbox entry list from Emacs daemon."
    (fk/dashboard-get-section
     "(let* ((file (expand-file-name \"inbox.org\" org-directory))
             (file-buffer (find-file-noselect file))
             (file-content (with-current-buffer file-buffer (buffer-string)))
             (temp-buffer (generate-new-buffer \"*dashboard-temp*\"))
             (bullet (propertize \"⁖\" 'face 'org-level-1)))
        (with-current-buffer temp-buffer
          (kill-buffer file-buffer)
          (org-mode)
          (insert file-content)
          (delete-non-matching-lines \"^*\" (point-min) (point-max))
          (string-replace \"*\" (format \"  %s\" bullet) (string-replace \"**\" (format \"   %s\" bullet) (buffer-string)))))"))

  (defun fk/dashboard-insert-inbox-entries (&rest _)
    "Insert inbox entries items."
    (insert (nerd-icons-octicon "nf-oct-pin" :v-adjust 0.07 :face 'dashboard-heading)
            (propertize " Inbox Entries:\n" 'face 'dashboard-heading 'line-spacing 10)
            (fk/dashboard-get-inbox-entries)))

  (defun fk/dashboard-get-todo-items ()
    "Get high priority todo items from Emacs daemon."
    (fk/dashboard-get-section
     "(let* ((file (expand-file-name \"todos.org\" org-directory))
             (file-buffer (find-file-noselect file))
             (file-content (with-current-buffer file-buffer (buffer-string)))
             (temp-buffer (generate-new-buffer \"*dashboard-temp*\"))
             (bullet (propertize \"⁖\" 'face 'org-level-1)))
        (with-current-buffer temp-buffer
          (kill-buffer file-buffer)
          (org-mode)
          (insert file-content)
          (delete-matching-lines (regexp-quote \"[#B]\") (point-min) (point-max))
          (delete-matching-lines (regexp-quote \"[#C]\") (point-min) (point-max))
          (delete-non-matching-lines \"^*\" (point-min) (point-max))
          (string-replace \"*\" (format \"  %s\" bullet) (string-replace \"**\" (format \"   %s\" bullet) (buffer-string)))))"))

  (defun fk/dashboard-insert-todo-items (&rest _)
    "Insert high priority todo items."
    (insert (nerd-icons-octicon "nf-oct-checklist" :v-adjust 0.04 :face 'dashboard-heading)
     (propertize " TODOs:\n" 'face 'dashboard-heading 'line-spacing 10)
     (fk/dashboard-get-todo-items)))

  (defun fk/dashboard-get-habit-tracker ()
    "Get habit tracker from Emacs daemon."
    (fk/dashboard-get-section
     "(let* ((file (expand-file-name \"20220427233506-habits.org\" \"~/org/roam/\"))
             (file-buffer (find-file-noselect file))
             (file-content (with-current-buffer file-buffer (buffer-string)))
             (temp-buffer (generate-new-buffer \"*dashboard-temp*\"))
             (bullet (propertize \"⁖\" 'face 'org-level-1)))
        (with-current-buffer temp-buffer
          (kill-buffer file-buffer)
          (org-mode)
          (insert file-content)
          (goto-char (point-min))
          (search-forward \"Current Month for Habit Tracker\")
          (next-line 2)
          (org-narrow-to-element)
          (buffer-string)))"))

  (defun fk/dashboard-insert-habit-tracker (&rest _)
    "Insert habit tracker."
    (insert (nerd-icons-faicon "nf-fa-chain" :v-adjust 0.07 :face 'dashboard-heading)
     (propertize " Habit Tracker:\n" 'face 'dashboard-heading 'line-spacing 10)
     (fk/dashboard-get-habit-tracker)))

  ;; TODO: setopt gives error about wrong type
  (setq dashboard-item-generators '((agenda        . fk/dashboard-insert-agenda)
                                    (inbox-entries . fk/dashboard-insert-inbox-entries)
                                    (todo-items    . fk/dashboard-insert-todo-items)
                                    (habit-tracker . fk/dashboard-insert-habit-tracker)))

  ;; Colorize org entries even if org.el or org-agenda.el hasn't loaded.
  ;; Note: defining faces is enough, color values comes from propertized string
  (defmacro fk/defface-nil (&rest faces)
    "Macro for defining nil faces. Instead of:
`(defface org-level-1 nil nil)'"
    `(progn ,@(cl-loop for face in faces
                       collect `(defface ,face nil nil))))

  (fk/defface-nil
   org-agenda-calendar-event
   org-agenda-current-time
   org-agenda-date
   org-agenda-date-today
   org-agenda-date-weekend
   org-agenda-date-weekend
   org-agenda-date-weekend-today
   org-agenda-structure
   org-checkbox-statistics-todo
   org-habit-alert-face
   org-habit-clear-future-face
   org-habit-overdue-future-face
   org-habit-ready-face
   org-hide
   org-imminent-deadline
   org-level-1
   org-level-2
   org-link
   org-scheduled
   org-scheduled-today
   org-super-agenda-header
   org-table
   org-tag
   org-time-grid
   org-upcoming-deadline
   org-upcoming-distant-deadline
   org-warning))
#+END_SRC

** Fill Column Indicator

#+BEGIN_SRC emacs-lisp
(use-package display-fill-column-indicator
  :custom-face
  (fill-column-indicator ((t (:foreground ,fk/light-color7))))
  :hook
  (dashboard-after-initialize . global-display-fill-column-indicator-mode)
  ;; :config  ; TODO: doesn't play well with org-indent-mode
  ;; (defun fk/current-fill-column (orig-func &rest args)
  ;;   "`current-fill-column' with `org-indent-mode' support."
  ;;   (let ((column (apply orig-func args)))
  ;;     (if org-indent-mode
  ;;         (+ column (* org-indent-indentation-per-level (org-current-level)))
  ;;       column)))

  ;; (advice-add 'current-fill-column :around 'fk/current-fill-column)
  )
#+END_SRC

** Line Numbers

#+BEGIN_SRC emacs-lisp
(use-package display-line-numbers
  :custom
  (display-line-numbers-width-start t)  ; to fix alignment in org-mode
  :custom-face
  (line-number ((t (:foreground ,fk/light-color1))))
  (line-number-current-line ((t (:foreground ,fk/light-color))))
  :hook
  (org-mode . display-line-numbers-mode)
  (prog-mode . display-line-numbers-mode))
#+END_SRC

** Perfect Margin

#+BEGIN_SRC emacs-lisp
(use-package perfect-margin
  :preface
  (defvar fk/perfect-margin-visible-width 140)
  (defvar fk/perfect-margin-visible-width-large 180)
  :custom
  (perfect-margin-visible-width fk/perfect-margin-visible-width)
  (perfect-margin-ignore-regexps '("^minibuf" "[mM]inibuf-[0-9]+" " *which-key*" "*dashboard*"))
  :bind
  ("C-1" . fk/smart-C-x-1)
  :hook
  (dashboard-after-initialize . perfect-margin-mode)
  :config
  (defun fk/smart-C-x-1 ()
    "When there are more than one window, it behaves like the default `C-x 1',
otherwise cycles between 'enable perfect-margin-mode' > 'enlarge it' >
'disable perfect-margin-mode' > 'enable perf..'"
    (interactive)
    (if (= (count-windows) 1)
        (if (and perfect-margin-mode
                 (= perfect-margin-visible-width fk/perfect-margin-visible-width))
            (progn
              (setopt perfect-margin-visible-width fk/perfect-margin-visible-width-large)
              (perfect-margin-margin-windows))
          (call-interactively 'perfect-margin-mode)
          (setopt perfect-margin-visible-width fk/perfect-margin-visible-width))
      (delete-other-windows))))
#+END_SRC

** Goggles Mode (Highlight Changes)

#+BEGIN_SRC emacs-lisp
(use-package goggles
  :hook
  (dashboard-after-initialize . global-goggles-mode)
  :config
  (goggles-define delete delete-region delete-active-region)
  (define-globalized-minor-mode global-goggles-mode
    goggles-mode goggles-mode))
#+END_SRC

** Redacted Mode (Blur text for screenshots)

#+BEGIN_SRC emacs-lisp
(use-package redacted
  :commands redacted-mode
  :hook
  (redacted-mode . (lambda () (read-only-mode (if redacted-mode 1 -1)))))
#+END_SRC

* Completion
** Better Defaults

#+BEGIN_SRC emacs-lisp
(setopt completion-ignore-case t
        read-buffer-completion-ignore-case t
        read-file-name-completion-ignore-case t)

;; (setopt completion-styles '(basic substring partial-completion flex))  NOTE: I use `orderless'
#+END_SRC

** Which Key (Keybinding Completion)

#+BEGIN_SRC emacs-lisp
(use-package which-key  ; TODO: fix trailing whitespace issue
  :custom
  (which-key-idle-delay 2)
  (which-key-idle-secondary-delay 0)
  (which-key-popup-type 'minibuffer)  ; default value `'side-window' makes windows move
  (which-key-ellipsis "..")  ; TODO: try to fix wide unicode ellipsis issue
  :config
  (which-key-mode))
#+END_SRC

** Vertico (Generic Completion & Selection)
*** Vertico

#+BEGIN_SRC emacs-lisp
(use-package vertico
  ;; built-in alternative:
  ;; (fido-vertical-mode)
  ;; (setopt icomplete-max-delay-chars 0)
  :custom
  (vertico-count 20)
  :bind
  ( :map vertico-map
    ("C-l" . vertico-directory-up))
  :hook
  (dashboard-after-initialize . vertico-mode)
  (dashboard-after-initialize . vertico-multiform-mode))  ; to use different UIs for certain commands
#+END_SRC

*** Vertico Posframe

#+BEGIN_SRC emacs-lisp
(use-package vertico-posframe
  :custom
  (vertico-posframe-parameters '((left-fringe . 5) (right-fringe . 5)))
  (vertico-posframe-width 150)
  (vertico-multiform-commands
   '((fk/consult-line-dwim (:not posframe))
     (consult-org-heading (:not posframe))
     (consult-imenu (:not posframe))
     (fk/consult-ripgrep-dwim (:not posframe))
     ("fk/django-search-*" (:not posframe))
     (t posframe)))
  :hook
  (vertico-mode . vertico-posframe-mode))
#+END_SRC

** Embark (Actions on Selected Candidates)

#+BEGIN_SRC emacs-lisp
(use-package embark
  :bind
  ( :map minibuffer-local-map
    ("M-o" . fk/embark-become-project-switch-project)
    ("C-c C-e" . embark-export))
  :config
  (defun fk/embark-become-project-switch-project ()
    "Read candidates for `project-switch-project' if the current
command is `project-find-file' and this command is called."
    (interactive)
    (when (memq embark--command '(project-find-file fk/project-find-file-or-switch-project))
      (embark--become-command 'project-switch-project (minibuffer-contents)))))

(use-package embark-consult
  :hook
  (embark-collect-mode . consult-preview-at-point-mode))  ; TODO: check what is this
#+END_SRC

** Corfu (In-buffer Completion e.g. code completion)
*** Corfu

#+BEGIN_SRC emacs-lisp
(use-package corfu
  :custom
  (corfu-auto t)
  (corfu-auto-prefix 1)
  (corfu-auto-delay 0)
  (corfu-preview-current nil)
  (corfu-popupinfo-delay '(1.0 . 0.5))
  (corfu-on-exact-match 'show)  ; the default value `insert' does not play well with `yasnippet-capf'
  :custom-face
  (corfu-current ((t (:background ,fk/light-color3))))
  :bind
  ( :map corfu-map
    ("RET" . nil)
    ("C-w" . nil))
  :hook
  (dashboard-after-initialize . global-corfu-mode)
  (dashboard-after-initialize . corfu-popupinfo-mode)
  (minibuffer-setup . fk/corfu-enable-in-minibuffer)
  :config
  (add-to-list 'corfu-auto-commands 'backward-delete-char-untabify)

  (defun fk/corfu-enable-in-minibuffer ()
    "Enable Corfu in the minibuffer on `eval-expression', `shell-command' etc."
    (when (local-variable-p 'completion-at-point-functions)
      (setq-local corfu-echo-delay nil)  ; disable minibuffer messages
      (corfu-mode))))

(use-package nerd-icons-corfu
  :after corfu
  :config
  (add-to-list 'corfu-margin-formatters 'nerd-icons-corfu-formatter))
#+END_SRC

*** Cape

#+BEGIN_SRC emacs-lisp
(use-package cape  ; TODO: Configure
  :hook
  (dashboard-after-initialize . fk/setup-global-cape)
  (eglot-managed-mode . fk/setup-eglot-yasnippet-capf)
  (emacs-lisp-mode . fk/setup-emacs-lisp-mode-capf)
  :config
  (defun fk/setup-global-cape ()
    "Setup `cape' by adding its functions to `completion-at-point-functions'."
    ;; (add-to-list 'completion-at-point-functions 'cape-dabbrev)
    ;; (add-to-list 'completion-at-point-functions 'cape-file)
    ;; (add-to-list 'completion-at-point-functions 'cape-elisp-symbol)
    (add-to-list 'completion-at-point-functions 'cape-elisp-block)  ; good for literate configs
    ;; (add-to-list 'completion-at-point-functions 'cape-history)
    ;; (add-to-list 'completion-at-point-functions 'cape-keyword)
    ;; (add-to-list 'completion-at-point-functions 'cape-tex)
    ;; (add-to-list 'completion-at-point-functions 'cape-sgml)
    ;; (add-to-list 'completion-at-point-functions 'cape-rfc1345)
    ;; (add-to-list 'completion-at-point-functions 'cape-abbrev)
    ;; (add-to-list 'completion-at-point-functions 'cape-dict)
    ;; (add-to-list 'completion-at-point-functions 'cape-line)
    )

  (defun fk/setup-eglot-yasnippet-capf ()
    "Combine `eglot-completion-at-point' with `yasnippet-capf'."
    (setq-local completion-at-point-functions
                (list (cape-capf-super
                       'eglot-completion-at-point
                       'yasnippet-capf))))

  (defun fk/setup-emacs-lisp-mode-capf ()
    "Combine `elisp-completion-at-point' with `cape-elisp-symbol'. It's
especially useful for `use-package' forms. Also add `yasnippet-capf'."
    (setq-local completion-at-point-functions
                (list (cape-capf-super
                       'elisp-completion-at-point
                       'cape-elisp-symbol
                       'yasnippet-capf)))))
#+END_SRC

*** Nerd Icons Corfu

#+BEGIN_SRC emacs-lisp
(use-package nerd-icons-corfu
  :after corfu
  :config
  (add-to-list 'corfu-margin-formatters 'nerd-icons-corfu-formatter))
#+END_SRC

** YASnippet (Snippet Completion)
*** YASnippet

#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :custom
  (yas-indent-line 'fixed)
  (yas-inhibit-overlay-modification-protection t)  ; TODO: test this
  :custom-face
  ;; this is actually default but doesn't work without defining again
  (yas-field-highlight-face ((t (:inherit region))))
  :bind
  ( :map yas-minor-mode-map
    ("C-j" . yas-expand)
    ("TAB" . nil)  ; don't expand snippets with tab
    ("<tab>" . nil))  ; TODO: test if only one of the tabs enough
  :hook
  (dashboard-after-initialize . yas-global-mode))
#+END_SRC

*** YASnippet Capf

#+BEGIN_SRC emacs-lisp
(use-package yasnippet-capf
  :defer)
#+END_SRC

** Orderless

#+BEGIN_SRC emacs-lisp
(use-package orderless  ; TODO: configure
  :custom
  (completion-styles '(orderless basic substring partial-completion flex)))
#+END_SRC

* Search & Navigation
** Better Defaults

#+BEGIN_SRC emacs-lisp
(global-subword-mode)  ; navigationInCamelCase

(setopt recenter-positions '(middle 0.15 top 0.85 bottom)  ; `C-l' positions
        scroll-conservatively 101)                         ; smooth scrolling

;; scroll less than default
(defvar fk/default-scroll-lines 15)

(defun fk/scroll (orig-func &optional arg)
  "Scroll up `fk/default-scroll-lines' lines (probably less than default)."
  (apply orig-func (list (or arg fk/default-scroll-lines))))

(advice-add 'scroll-up :around 'fk/scroll)
(advice-add 'scroll-down :around 'fk/scroll)

;; jump to the new window after splitting windows
(advice-add 'split-window :after (lambda (&rest _) (interactive) (other-window 1)))
#+END_SRC

** Utils
*** find-config

#+BEGIN_SRC emacs-lisp
(defun fk/find-config ()
  "Open config file."
  (interactive)
  (find-file config-org))

(defun fk/persp-switch-config ()  ; TODO: move to perspective section
  "Open config file in a dedicated perspective."
  (interactive)
  (persp-switch "config")
  (fk/find-config))
#+END_SRC

*** open messages

#+BEGIN_SRC emacs-lisp
(defun fk/messages ()
  "Switch to Messages buffer."
  (interactive)
  (switch-to-buffer "*Messages*"))
#+END_SRC

*** generate scratch buffers

#+BEGIN_SRC emacs-lisp
(defmacro fk/define-scratch-command (major-mode)
    "Define scratch commands and keybindings. Usage:
`(fk/define-scratch-command emacs-lisp-mode)' generates:
`fk/generate-emacs-lisp-mode-scratch' command."
    `(progn
       (defun ,(intern (format "fk/generate-%s-scratch" major-mode)) ()
         ,(format "Create and switch to a temporary scratch buffer with a random name and `%s' activated."
                  major-mode)
         (interactive)
         (switch-to-buffer (make-temp-name ,(format "scratch-%s-" major-mode)))
         (,major-mode))))

(fk/define-scratch-command org-mode)  ; fk/generate-org-mode-scratch
(fk/define-scratch-command text-mode)
(fk/define-scratch-command python-ts-mode)
(fk/define-scratch-command emacs-lisp-mode)
(fk/define-scratch-command fundamental-mode)
#+END_SRC

*** get-selected-text

#+BEGIN_SRC emacs-lisp
(defun fk/get-selected-text ()
  "Return selected text if region is active, else nil."
  (when (region-active-p)
    (let ((text (buffer-substring-no-properties (region-beginning) (region-end))))
      (deactivate-mark) text)))
#+END_SRC

*** switch-last-window

#+BEGIN_SRC emacs-lisp
(defun fk/switch-last-window ()
  (interactive)
  (when-let ((last-win (get-mru-window nil nil t)))
    (select-window last-win)))
#+END_SRC

** Keybindings

#+BEGIN_SRC emacs-lisp
(bind-keys*
 ("C-2"     . split-window-below)
 ("C-3"     . split-window-right)
 ("M-g M-g" . beginning-of-buffer)
 ("M-l"     . move-to-window-line-top-bottom)
 ("C-x C-k" . kill-current-buffer)
 ("C-x c"   . fk/persp-switch-config)
 ("C-q"     . fk/switch-last-window)
 ("C-M-u"   . pop-global-mark))

(bind-keys*
 :map files
 ("c" . fk/find-config)
 ("C" . fk/persp-switch-config))

(bind-keys*
 :map buffers
 ("s" . scratch-buffer)
 ("m" . fk/messages)
 ("o" . fk/generate-org-mode-scratch)
 ("t" . fk/generate-text-mode-scratch)
 ("p" . fk/generate-python-ts-mode-scratch)
 ("e" . fk/generate-emacs-lisp-mode-scratch)
 ("f" . fk/generate-fundamental-mode-scratch))

(bind-keys*
 :map windows
 ("b" . balance-windows)
 ("d" . delete-window)
 ("k" . kill-buffer-and-window)
 ("l" . fk/switch-last-window))
#+END_SRC

** Recentf (Recent Files)

#+BEGIN_SRC emacs-lisp
(use-package recentf
  :preface
  (setopt recentf-max-saved-items 200)
  :custom
  (recentf-exclude `(,(recentf-expand-file-name no-littering-var-directory)
                     ,(recentf-expand-file-name no-littering-etc-directory)
                     ,(recentf-expand-file-name "~/org/roam/")  ; TODO: org-roam-directory gives error since it's not defined yet
                     ,(recentf-expand-file-name "~/emacs.*/src/")
                     ,(recentf-expand-file-name "~/emacs.*/lisp/")
                     ,(recentf-expand-file-name "~/.virtualenvs")
                     ,(locate-user-emacs-file "eln-cache/")
                     ,(locate-user-emacs-file "elpa/")
                     "/usr/share/emacs/"
                     "/usr/local/share/emacs/"
                     "/usr/lib/node_modules/"
                     "/tmp/"))
  :hook
  (dashboard-after-initialize . recentf-mode))
#+END_SRC

** Winner Mode

Undo/redo window&buffer states.
#+BEGIN_SRC emacs-lisp
(use-package winner
  :bind
  (("M-u" . winner-undo)
   ("M-U" . winner-redo)
   :map windows
   ("u" . winner-undo)
   ("r" . winner-redo))
  :hook
  (dashboard-after-initialize . winner-mode))
#+END_SRC

** Ace Window

#+BEGIN_SRC emacs-lisp
(use-package ace-window
  :custom
  (aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
  (aw-background nil)
  (aw-dispatch-when-more-than 3)
  :custom-face
  (aw-leading-char-face ((t (:height 15.0 :foreground "orangered2"))))
  :bind
  (("M-o" . ace-window)
   :map windows
   ("w" . ace-window)
   ("D" . ace-delete-window)
   ("s" . ace-swap-window))
  :hook
  (dashboard-after-initialize . ace-window-posframe-mode))

;; TODO: transparent background in child frames flickers for some reason
;; (defun fk/aw--lead-overlay-posframe (path leaf)
;;   (let* ((wnd (cdr leaf))
;;          (str (format "%s" (apply #'string path)))
;;          ;; It's important that buffer names are not unique across
;;          ;; multiple invocations: posframe becomes very slow when
;;          ;; creating new frames, and so being able to reuse old ones
;;          ;; makes a huge difference. What defines "able to reuse" is
;;          ;; something like: a frame exists which hasn't been deleted
;;          ;; (with posframe-delete) and has the same configuration as
;;          ;; the requested new frame.
;;          (bufname (format " *aw-posframe-buffer-%s*" path)))
;;     (with-selected-window wnd
;;       (push bufname aw--posframe-frames)
;;       (posframe-show bufname
;;                      :string str
;;                      :poshandler aw-posframe-position-handler
;;                      :font (face-font 'aw-leading-char-face)
;;                      :foreground-color (face-foreground 'aw-leading-char-face nil t)
;;                      :override-parameters '((alpha-background . 0))))))
;;
;; (advice-add 'aw--lead-overlay-posframe :override 'fk/aw--lead-overlay-posframe)
#+END_SRC

** Mwim (Move Where I Mean)

#+BEGIN_SRC emacs-lisp
(use-package mwim
  :bind
  ("C-a" . mwim-beginning-of-code-or-line)
  ("C-e" . mwim-end-of-line-or-code))
#+END_SRC

** Consult

#+BEGIN_SRC emacs-lisp
(use-package consult  ; TODO: has lots of custom variables and features to check
  :init
  ;; load this macros even if `consult' is not loaded yet
  (defmacro fk/consult-ripgrep-define-search-command (name keymap kbd &optional glob initial)
    "Define search commands and keybindings with predefined glob and initial.
Usage:
(fk/consult-ripgrep-define-search-command
 \"search-emacs-macros\" global-map \"C-M-s\" \"*.el\" \"defmacro\")"
    `(progn
       (require 'consult)
       (defun ,(intern (concat "fk/" name)) ()
         (interactive)
         (let ((consult-ripgrep-args (concat consult-ripgrep-args " --glob " ,glob)))
           (fk/consult-ripgrep-dwim ,initial)))
       (keymap-set ,keymap ,kbd ',(intern (concat "fk/" name)))
       (consult-customize ,(intern (concat "fk/" name)) :preview-key '(:debounce 0.3 any))))

  (defmacro fk/consult-ripgrep-define-search-commands (&rest args)
    "Define multiple search command at once. Usage:
(fk/consult-ripgrep-define-search-commands
 \"search-emacs-macros\" global-map \"C-M-s\" \"*.el\" \"defmacro\")
 \"search-emacs-functions\" global-map \"C-M-f\" \"*.el\" \"defun\"))"
    `(progn ,@(cl-loop for expr in args
                       collect `(fk/consult-ripgrep-define-search-command ,@expr))))
  :bind
  (("C-x b"   . consult-buffer)
   ("C-x C-b" . consult-buffer)
   ("M-y"     . consult-yank-pop)
   ("M-g g"   . consult-goto-line)
   ("C-M-s"   . fk/consult-ripgrep-dwim)
   ("M-s"     . fk/consult-line-dwim)
   ("C-x C-j" . consult-imenu)
   ("C-x C-r" . consult-recent-file)
   :map files
   ("r" . consult-recent-file)
   :map isearch-mode-map
   ("M-s" . consult-line)
   :map minibuffer-local-map
   ("C-r" . consult-history)
   ("C-s" . consult-history))
  :config
  (consult-customize
   fk/consult-ripgrep-dwim consult-recent-file consult-xref consult-buffer
   :preview-key '(:debounce 0.3 any))  ; delay previews

  (with-eval-after-load 'org
    (keymap-set org-mode-map "C-x C-j" 'consult-org-heading))

  (defun fk/consult-line-dwim (&optional initial)
    "If region is active, use the selected text as the `initial' arg."
    (interactive)
    (consult-line (or initial (fk/get-selected-text))))

  (defun fk/consult-ripgrep-dwim (&optional initial)
    "If region is active, use the selected text as the `initial' arg."
    (interactive)
    (consult-ripgrep nil (or initial (fk/get-selected-text)))))
#+END_SRC

** Xref

#+BEGIN_SRC emacs-lisp
(use-package xref
  :custom
  (xref-prompt-for-identifier nil)
  (xref-show-definitions-function 'consult-xref)  ; alternative: `'xref-show-definitions-completing-read'
  (xref-show-xrefs-function 'consult-xref)  ; alternative: `'xref-show-definitions-completing-read'
  (xref-search-program 'ripgrep)
  :bind
  ("C-M-j" . xref-find-definitions)
  ("C-M-k" . xref-go-back)
  ("C-M-r" . xref-find-references))
#+END_SRC

** Dumb Jump

#+BEGIN_SRC emacs-lisp
(use-package dumb-jump
  :custom
  (dumb-jump-prefer-searcher 'rg)  ; still uses git-grep if it's a git project
  :hook                            ; because it's supposed to be faster
  (dashboard-after-initialize . fk/setup-dumb-jump)
  :config
  (defun fk/setup-dumb-jump ()
    "Add `dumb-jump-xref-activate' to `xref-backend-functions'. This adds
`dumb-jump' to the global value of `xref-backend-functions' which is used if its
local value ends with a `t' and all the functions before the `t' returns nil."
    ;; it's more like `add-to-list' but `add-hook' recommended for some reason
    (add-hook 'xref-backend-functions 'dumb-jump-xref-activate)
    (with-eval-after-load 'eglot
      (fk/setup-eglot+dumb-jump-xref-backend)))

  (defun fk/setup-eglot+dumb-jump-xref-backend ()
    "Combine `eglot' and `dumb-jump' xref backends as a workaround for the issue
of xref does not use the next backends after `eglot-xref-backend' fails. Source:
https://github.com/joaotavora/eglot/issues/420#issuecomment-1257247512"
    (cl-defmethod xref-backend-identifier-at-point ((_backend (eql eglot+dumb-jump)))
      (cons (xref-backend-identifier-at-point 'eglot)
            (xref-backend-identifier-at-point 'dumb-jump)))

    (cl-defmethod xref-backend-identifier-completion-table ((_backend (eql eglot+dumb-jump)))
      (xref-backend-identifier-completion-table 'eglot))

    (cl-defmethod xref-backend-definitions ((_backend (eql eglot+dumb-jump)) identifier)
      (or (xref-backend-definitions 'eglot (car identifier))
          (xref-backend-definitions 'dumb-jump (cdr identifier))))

    (cl-defmethod xref-backend-references ((_backend (eql eglot+dumb-jump)) identifier)
      (or (xref-backend-references 'eglot (car identifier))
          (xref-backend-references 'dumb-jump (cdr identifier))))

    (cl-defmethod xref-backend-apropos ((_backend (eql eglot+dumb-jump)) pattern)
      (xref-backend-apropos 'eglot pattern))

    (defun xref-eglot+dumb-jump-backend () 'eglot+dumb-jump)

    (advice-add 'eglot-xref-backend :override 'xref-eglot+dumb-jump-backend)))
#+END_SRC

** Deadgrep

#+BEGIN_SRC emacs-lisp
(use-package deadgrep
  :commands deadgrep
  :bind
  ( :map deadgrep-mode-map
    ("C-c C-e" . deadgrep-edit-mode)))
#+END_SRC

** Avy

#+BEGIN_SRC emacs-lisp
(use-package avy
  :bind
  ("M-j" . avy-goto-word-or-subword-1))
#+END_SRC

** Perspective

#+BEGIN_SRC emacs-lisp
(use-package perspective  ; TODO: try tab-bar tab-spaces etc.
  :preface
  (defcustom persp-project-name nil "Should be set as directory local variable.")  ; TODO: setup hooks
  :custom
  (persp-mode-prefix-key (kbd "M-m p"))
  (persp-modestring-dividers `(,(format "[%s " (nerd-icons-codicon "nf-cod-vm")) "]" " • "))
  :custom-face
  (persp-selected-face ((t (:foreground unspecified :inherit 'warning))))
  :bind*
  ( :map persp-mode-map
    ("C-M-o" . persp-next)
    ("C-x p" . persp-switch)
    ("C-x C-p" . persp-switch-quick)
    ("M-q" . persp-switch-last)
    :map perspective-map
    ("p" . persp-switch)
    ("k" . persp-kill)
    ("l" . persp-switch-last)
    ("q" . persp-switch-quick)
    ("n" . (lambda () (interactive) (persp-switch (make-temp-name "p-")))))
  :hook
  (dashboard-after-initialize . persp-mode))
#+END_SRC

** Block Nav

#+BEGIN_SRC emacs-lisp
(use-package block-nav
  :config
  (defmacro fk/bind-block-nav (library keymap)
    "Bind block-nav commands to KEYMAP after the LIBRARY is loaded."
    `(progn
       (with-eval-after-load ',library
         (keymap-set ,keymap "M-n" 'block-nav-next-block)
         (keymap-set ,keymap "M-p" 'block-nav-previous-block))))

  (fk/bind-block-nav prog-mode prog-mode-map)
  (fk/bind-block-nav yaml-mode yaml-mode-map))
#+END_SRC

** God Mode

#+BEGIN_SRC emacs-lisp
(use-package god-mode  ; TODO: get used to it
  :preface
  (setopt god-mode-cursor-color "#FFF8DC")
  :bind
  (("C-;" . god-mode-all)
   :map god-local-mode-map
   ("j" . avy-goto-word-or-subword-1))
  :hook
  (god-mode-enabled . (lambda ()
                        (set-face-attribute 'cursor nil :background god-mode-cursor-color)
                        ;; beacon-mode doesn't work properly with same color as cursor
                        (setopt beacon-color (doom-darken god-mode-cursor-color 0.001))))
  (god-mode-disabled . (lambda ()
                         (set-face-attribute 'cursor nil :background fk/cursor-color)
                         ;; beacon-mode doesn't work properly with same color as cursor
                         (setopt beacon-color (doom-darken fk/cursor-color 0.001)))))
#+END_SRC

** Pixel Scroll

#+BEGIN_SRC emacs-lisp
(use-package pixel-scroll
  :ensure nil  ; don't try to install it since it's a built-in module
  :custom
  (pixel-scroll-precision-interpolate-page t)
  (pixel-scroll-precision-interpolation-total-time 0.2)
  ;; :bind  ; TODO: setup these only for normal buffers, not minibuffer, corfu etc.
  ;; (("C-v". (lambda () (interactive)
  ;;            (pixel-scroll-precision-interpolate (- (window-text-height nil t))
  ;;                                                nil .3)))
  ;;  ("M-v". (lambda () (interactive)
  ;;            (pixel-scroll-precision-interpolate (window-text-height nil t)
  ;;                                                nil .3))))
  :hook
  (dashboard-after-initialize . pixel-scroll-precision-mode))
#+END_SRC

* Text Editing
** Better Defaults

#+BEGIN_SRC emacs-lisp
(delete-selection-mode)  ; TODO: setup with use-package
(electric-pair-mode)  ; TODO: setup with use-package

(setopt fill-column 80
        sentence-end-double-space nil
        indent-tabs-mode nil  ; Use spaces instead of tabs
        tab-width 4)
#+END_SRC

** Utils
*** backward-kill-word-or-region

#+BEGIN_SRC emacs-lisp
(defun fk/backward-kill-word-or-region ()
  "Calls `kill-region' when a region is active and `backward-kill-word'
otherwise."
  (interactive)
  (call-interactively (if (region-active-p) 'kill-region 'backward-kill-word)))
#+END_SRC

*** newline-below

#+BEGIN_SRC emacs-lisp
(defun fk/newline-below ()
  "Insert newline below the current line. Like the default \\`C-o' but doesn't
cut the current line."
  (interactive)
  (save-excursion (end-of-line) (open-line 1)))
#+END_SRC

*** remove-hypens-and-underscores-region

I use this mostly to generate commit messages from branch names.
#+BEGIN_SRC emacs-lisp
(defun fk/remove-hypens-and-underscores-region (beg end)
  "Remove hypens and underscores from region."
  (interactive "*r")
  (replace-regexp-in-region (rx (or "_" "-")) " " beg end))
#+END_SRC

*** unfill-toggle

#+BEGIN_SRC emacs-lisp
(defun fk/unfill-toggle ()
  "Toggle filling/unfilling of the current region.
Operates on the current paragraph if no region is active.
Copied from: https://github.com/purcell/unfill"
  (interactive)
  (let (deactivate-mark
        (fill-column
         (if (eq last-command this-command)
             (progn (setq this-command nil)
                    most-positive-fixnum)
           fill-column)))
    (call-interactively 'fill-paragraph)))
#+END_SRC

** Keybindings
#+BEGIN_SRC emacs-lisp
(keyboard-translate ?\C-h ?\C-?)  ; C-h as DEL, (I use F1 and M-h as `help-command')
;; (add-hook 'server-after-make-frame-hook (lambda () (keyboard-translate ?\C-h ?\C-?)))  ; Fix emacs --daemon  ; TODO check if this still necessary
(keymap-global-set "C-w" 'fk/backward-kill-word-or-region)
(keymap-global-set "C-o" 'fk/newline-below)

(bind-keys*
 :map text
 ("s" . sort-lines)
 ("f" . fk/unfill-toggle)
 ("r" . fk/remove-hypens-and-underscores-region))
#+END_SRC

** Whitespace Cleanup

#+BEGIN_SRC emacs-lisp
(use-package whitespace-cleanup-mode
  :hook
  (dashboard-after-initialize . global-whitespace-cleanup-mode))
#+END_SRC

** Case Switching

#+BEGIN_SRC emacs-lisp
;; built-in commands
(bind-keys
 :map text
 ("u" . upcase-dwim)
 ("d" . downcase-dwim)
 ("c" . capitalize-dwim))

(use-package string-inflection
  :bind
  ( :map text
    ("t" . fk/case-style-cycle)
    ("k" . string-inflection-kebab-case))
  :config
  (defun fk/case-style-cycle ()
    "Cycle between case styles e.g. FOO_BAR => FooBar => fooBar"
    (interactive)
    (cond
     ((eq major-mode 'python-mode)
      (string-inflection-python-style-cycle))
     (t
      (string-inflection-all-cycle)))))
#+END_SRC

** Paren

#+BEGIN_SRC emacs-lisp
(use-package paren
  :custom
  (show-paren-when-point-inside-paren t)
  :custom-face
  (show-paren-match ((t (:background unspecified :foreground "white"))))
  :hook
  (dashboard-after-initialize . show-paren-mode))
#+END_SRC

** Wrap Region

#+BEGIN_SRC emacs-lisp
(use-package wrap-region
  :hook
  (dashboard-after-initialize . wrap-region-global-mode)
  :config
  (wrap-region-add-wrapper "=" "=" nil 'org-mode)
  (wrap-region-add-wrapper "*" "*" nil 'org-mode)
  (wrap-region-add-wrapper "_" "_" nil 'org-mode)
  (wrap-region-add-wrapper "/" "/" nil 'org-mode)
  (wrap-region-add-wrapper "+" "+" nil 'org-mode)
  (wrap-region-add-wrapper "~" "~" nil 'org-mode)
  (wrap-region-add-wrapper "#" "#" nil 'org-mode)
  (wrap-region-add-wrapper "`" "`" nil 'org-mode)
  (wrap-region-add-wrapper "`" "`" nil 'markdown-mode))
#+END_SRC

** Expand Region

#+BEGIN_SRC emacs-lisp
(use-package expand-region
  :custom
  (expand-region-fast-keys-enabled nil)
  (expand-region-subword-enabled t)
  :bind*
  ("C-t" . er/expand-region))
#+END_SRC

** Wgrep (Writable Grep)

#+BEGIN_SRC emacs-lisp
(use-package wgrep
  :custom
  (wgrep-auto-save-buffer t)
  :bind
  ( :map grep-mode-map
    ("C-c C-e" . wgrep-change-to-wgrep-mode)))
#+END_SRC

* Programming
** Common
*** Electric Indent Mode

#+BEGIN_SRC emacs-lisp
(use-package electric
  :bind
  ( :map prog-mode-map
    ("C-M-m" . electric-indent-just-newline))  ; "C-M-m" equals to "M-RET"
  :hook
  (dashboard-after-initialize . electric-indent-mode))
#+END_SRC

*** Comments

#+BEGIN_SRC emacs-lisp
(use-package newcomment
  :ensure nil  ; don't try to install it since it's a built-in org module
  :custom
  (comment-column 0)
  (comment-inline-offset 2)
  :bind
  ( :map comments
    ("c" . comment-dwim)
    ("k" . comment-kill)
    ("l" . comment-line)
    ("n" . (lambda () (interactive) (next-line) (comment-indent)))
    ("N" . comment-indent-new-line)
    ("b" . comment-box))
  :hook
  (emacs-lisp-mode . (lambda ()
                       (setq-local comment-start "; ")
                       (setq-local comment-column 0))))
#+END_SRC

*** Project

#+BEGIN_SRC emacs-lisp
(use-package project
  ;; TODO: do something like: (projectile-project-search-path (directory-files "~/projects" t "[^.]"))
  :commands project-find-file project-switch-project  ; TODO: combine these two
  :bind
  ("C-x f" . fk/project-find-file-or-switch-project)
  :custom
  (project-switch-commands 'magit-project-status)
  :config
  (defun fk/project-find-file-or-switch-project ()
    "Run `project-find-file' if in a project, else `project-switch-project'.
This command is created because `project-find-file' does not respoect the value
of `project-switch-commands' when selecting a project."
    (interactive)
    (call-interactively (if (project-current)
                            'project-find-file
                          'project-switch-project))))
#+END_SRC

*** Eglot (LSP)

#+BEGIN_SRC emacs-lisp
(use-package eglot
  :commands eglot
  :init
  (setopt eglot-stay-out-of '(flymake))  ; should be set before it's loaded
  :custom
  (eglot-ignored-server-capabilites '(:documentHighlightProvider)))
#+END_SRC

*** TreeSitter

#+BEGIN_SRC emacs-lisp
(use-package treesit
  :ensure nil  ; don't try to install it since it's a built-in module
  :custom
  (treesit-extra-load-path `(,(no-littering-expand-etc-file-name "tree-sitter/")))
  (treesit-language-source-alist  ; TODO: doesn't set on load, maybe because it's not a defcustom?
   ;; taken from https://www.masteringemacs.org/article/how-to-get-started-tree-sitter
   ;; install with `M-x treesit-install-language-grammar'
   '((bash       "https://github.com/tree-sitter/tree-sitter-bash")
     (css        "https://github.com/tree-sitter/tree-sitter-css")
     (elisp      "https://github.com/Wilfred/tree-sitter-elisp")
     (go         "https://github.com/tree-sitter/tree-sitter-go")
     (html       "https://github.com/tree-sitter/tree-sitter-html")
     (javascript "https://github.com/tree-sitter/tree-sitter-javascript" "master" "src")
     (json       "https://github.com/tree-sitter/tree-sitter-json")
     (python     "https://github.com/tree-sitter/tree-sitter-python")
     (toml       "https://github.com/tree-sitter/tree-sitter-toml")
     (tsx        "https://github.com/tree-sitter/tree-sitter-typescript" "master" "tsx/src")
     (typescript "https://github.com/tree-sitter/tree-sitter-typescript" "master" "typescript/src")
     (yaml       "https://github.com/ikatyang/tree-sitter-yaml")))
  (major-mode-remap-alist
   '((bash-mode       . bash-ts-mode)
     (css-mode        . css-ts-mode)
     ;; (emacs-lisp-mode . elisp-ts-mode)
     (go-mode         . go-ts-mode)
     ;; (html-mode       . html-ts-mode)
     (js-mode         . js-ts-mode)
     (json-mode       . json-ts-mode)
     (python-mode     . python-ts-mode)
     (toml-mode       . toml-ts-mode)
     (tsx-mode        . tsx-ts-mode)
     (typescript-mode . typescript-ts-mode)
     (yaml-mode       . yaml-ts-mode)))
  (treesit-font-lock-level 4)  ; maximum
  :custom-face
  (font-lock-property-use-face ((t (:inherit font-lock-type-face))))
  (font-lock-function-call-face ((t (:inherit font-lock-type-face))))
  (font-lock-variable-use-face ((t (:inherit default)))))
#+END_SRC

*** Rainbow Delimiters

#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
  :hook
  (prog-mode . rainbow-delimiters-mode))
#+END_SRC

*** Color Identifiers Mode

#+BEGIN_SRC emacs-lisp
(use-package color-identifiers-mode
  :commands color-identifiers-mode)
#+END_SRC

*** Symbol Overlay

#+BEGIN_SRC emacs-lisp
(use-package symbol-overlay  ; TODO; check if I can achieve same thing with only built-in packages
  :commands (symbol-overlay-mode symbol-overlay-put fk/highlight-occurrences)
  :custom-face
  (symbol-overlay-default-face ((t (:underline t :weight bold :background unspecified))))
  :bind
  ( :map symbol-overlay-mode-map
    ("C-c C-n" . symbol-overlay-jump-next)
    ("C-c C-p" . symbol-overlay-jump-prev))
  :hook
  (emacs-lisp-mode . symbol-overlay-mode)
  (python-ts-mode . symbol-overlay-mode)
  :config
  (defun fk/highlight-occurrences ()
    "Put highlight to the occurrences of the symbol at point or the
string in the region. Uses `hi-lock' to highlight,
`symbol-overlay' to generate a random face. To remove highlights,
use `hi-lock-unface-buffer' or disable `hi-lock-mode'."
    ;; TODO: `hl-line' breaks background color
    (interactive)
    (let ((str (fk/get-selected-text))
          (face (nth (random (length symbol-overlay-faces)) symbol-overlay-faces)))
      (if str
          (highlight-regexp (regexp-quote str) face)
        (hi-lock-face-symbol-at-point))))

  (defalias 'fk/highlight-remove (lambda () (interactive) (hi-lock-unface-buffer t)))
  (defalias 'fk/highlight-remove-one-by-one 'hi-lock-unface-buffer))
#+END_SRC

*** Rainbow Mode

#+BEGIN_SRC emacs-lisp
(use-package rainbow-mode
  ;; This minor mode sets background color to strings that match color names, e.g.
  ;; #0000ff is displayed in white with a blue background.
  :hook
  (prog-mode . rainbow-mode))
#+END_SRC

*** Bug Reference Mode

#+BEGIN_SRC emacs-lisp
(use-package bug-reference
  :hook
  (dashboard-after-initialize . bug-reference-mode))
#+END_SRC

** Emacs Lisp
*** Elisp Slime Nav

This package find definitions better than default. For example
=xref-find-definitions= cannot find definitions of variables in =:custom=
section of the =use-package=.
#+BEGIN_SRC emacs-lisp
(use-package elisp-slime-nav
  ;; NOTE: an alternative could be configuring `elisp-xref-find-def-functions'
  ;; but it seems a little hard
  :bind
  ( :map emacs-lisp-mode-map
    ([remap xref-find-definitions] . elisp-slime-nav-find-elisp-thing-at-point)))
#+END_SRC

*** Aggressive Indent

#+BEGIN_SRC emacs-lisp
(use-package aggressive-indent
  :hook
  (emacs-lisp-mode . aggressive-indent-mode))
#+END_SRC

*** Lisp Data Mode

#+BEGIN_SRC emacs-lisp
(use-package lisp-mode
  :ensure nil  ; don't try to install it since it's a built-in module
  :hook
  (lisp-data-mode . (lambda ()  ; align data to make it look better
                      ;; NOTE: `emacs-lisp-mode' derives from `lisp-data-mode'
                      ;; so `lisp-data-mode-hook' also runs in
                      ;; `emacs-lisp-mode', we need to make sure that the
                      ;; major-mode is `lisp-data-mode'.
                      (when (eq major-mode 'lisp-data-mode)
                        (add-hook 'before-save-hook
                                  (lambda ()
                                    (align-regexp (point-min) (point-max) "\\(\\s-*\\). (")
                                    (indent-region (point-min) (point-max)))
                                  nil t)))))
#+END_SRC

** Python
*** Python

#+BEGIN_SRC emacs-lisp
(use-package python
  :custom
  (python-indent-guess-indent-offset-verbose nil)
  ;; sudo npm install --global pyright
  ;; pip install flake8 black isort django-stubs djangorestframework-stubs
  :bind
  ( :map python-ts-mode-map
    ("C-c r" . python-indent-shift-right)
    ("C-c l" . python-indent-shift-left))
  :hook  ; NOTE: these hooks runs in reverse order (bottom first)
  (python-ts-mode . eglot-ensure)
  (python-ts-mode . fk/activate-pyvenv)  ; TODO: try emacs-pet
  (python-ts-mode . (lambda () (setq-local fill-column 120)))
  (python-ts-mode . fk/check-pyright-updates)
  :config
  ;; Make walrus operator (":=") more visible
  (font-lock-add-keywords
   'python-ts-mode
   '((":=" 0 'escape-glyph t))
   'set)

  ;; Temporary funny icon
  (font-lock-add-keywords
   'python-ts-mode
   '(("from \\(hipo_django_core\\).*import"
      (0 (prog1
             (put-text-property
              (match-beginning 1) (match-end 1) 'display
              `(,(find-image '((:file "~/hipo.png"))) (raise 0.2))))))))

  (defun fk/check-pyright-updates ()
    "Check if `pyright' has an update."
    (interactive)
    (make-process
     :command '("bash" "-c" "npm outdated -g | grep pyright | wc -l")
     :name "check-pyright-updates"
     :filter (lambda (process output)
               (pcase output
                 ("0\n" (message "Pyright is up to date."))
                 ("1\n" (message "A pyright update is available.")))))))
#+END_SRC

*** Pyvenv

#+BEGIN_SRC emacs-lisp
(use-package pyvenv
  :config
  (defun fk/get-venv-name ()
    "Get venv name of current python project."
    (when-let* ((root-dir (when-let ((project (project-current))) (project-root project)))
                (venv-file (concat root-dir ".venv"))
                (venv-exists (file-exists-p venv-file))
                (venv-name (with-temp-buffer
                             (insert-file-contents venv-file)
                             (nth 0 (split-string (buffer-string))))))
      venv-name))

  (defun fk/activate-pyvenv ()
    "Activate python environment according to the `project-root/.venv' file."
    (interactive)
    (when-let ((venv-name (fk/get-venv-name)))
      (pyvenv-mode)
      (pyvenv-workon venv-name)))

  (defun fk/open-venv-dir ()
    "Open the directory of installed libraries in `dired'."
    (interactive)
    (when-let* ((venv-name (fk/get-venv-name))
                (venv-dir (expand-file-name venv-name "~/.virtualenvs")))
      (dired (car (directory-files-recursively venv-dir "site-packages" t)))))

  ;; python-mode hook is not enough when more than one project's files are open.
  ;; It just re-activate pyvenv when a new file is opened, it should re-activate
  ;; on buffer or perspective switching too. NOTE: restarting lsp server is
  ;; heavy, so it should be done manually if needed.
  (add-hook 'window-configuration-change-hook 'fk/activate-pyvenv))
#+END_SRC

*** Black

#+BEGIN_SRC emacs-lisp
(use-package blacken
  :commands blacken-mode blacken-buffer)
#+END_SRC

*** Isort

#+BEGIN_SRC emacs-lisp
(use-package python-isort
  :commands python-isort-buffer python-isort-region python-isort-on-save-mode)
#+END_SRC

*** Django

#+BEGIN_SRC emacs-lisp
(defun fk/setup-django ()
  "Setup django."
  ;; Search functions for Django
  (fk/consult-ripgrep-define-search-commands
   ("django-search-models"      django "m" "models.py"        "^class ")
   ("django-search-factories"   django "f" "factories.py"     "^class ")
   ("django-search-views"       django "v" "views*.py"        "^class ")
   ("django-search-serializers" django "s" "*serializers*.py" "^class ")
   ("django-search-tests"       django "t" "*test*.py"        "^class ")
   ("django-search-settings"    django "S" "*/settings/*"     "")
   ("django-search-admins"      django "a" "admin.py"         "^class admin( ")
   ("django-search-permissions" django "p" "permissions.py"   "^class ")
   ("django-search-mixins"      django "x" "mixins.py"        "^class ")
   ("django-search-urls"        django "u" "*.py"             "path( "))

  ;; Highlighting of django template blocks
  (defvar django-block-regexp (rx "{%" (zero-or-more space)
                                  (zero-or-one "end") "block "
                                  (group (zero-or-more (not (any ?\n ?{)))) "%}"))

  (defface django-block-keyword-face
    '((t (:foreground "tomato" :bold t)))
    "Face for django template blocks.")

  (defface django-block-name-face
    '((t (:foreground "wheat" :bold t)))
    "Face for django template blocks.")

  (font-lock-add-keywords
   'web-mode
   `((,django-block-regexp 0 'django-block-keyword-face t)
     (,django-block-regexp 1 'django-block-name-face t))
   t)

  ;; Highlighting of django template comments
  (defvar django-comment-regexp
    (rx "{%" (zero-or-more space) "comment" (zero-or-more space) "%}"
        (zero-or-more (not (any "{%")))
        "{%" (zero-or-more space) "endcomment" (zero-or-more space) "%}"))

  (defface django-comment-face
    '((t (:inherit 'font-lock-comment-face)))
    "Face for django template comments.")

  (font-lock-add-keywords
   'web-mode
   `((,django-comment-regexp 0 'django-comment-face t))
   t))


;; Utility functions for Django

;; (defcustom fk/django-test-args "" "Should be set as directory local variable.")

;; (defun fk/django-get-module ()
;;   "pony-get-module originally."
;;   (let* ((root (projectile-project-root))
;;          (path (file-name-sans-extension (or buffer-file-name (expand-file-name default-directory)))))
;;     (when (string-match (projectile-project-root) path)
;;       (let ((path-to-class (substring path (match-end 0))))
;;         (mapconcat 'identity (split-string path-to-class "/") ".")))))

;; (defun fk/django-copy-path-of-test-at-point ()
;;   "Add path of the test at point to kill-ring. Returns the path."
;;   (interactive)
;;   (require 'which-func)
;;   (let* ((defuns (seq-subseq (split-string (which-function) "\\.") 0 2))
;;          (class (car defuns))
;;          (func (let ((f (-second-item defuns))) (and f (string-match "^test" f) f)))
;;          (module (fk/django-get-module))
;;          (path (concat module (and module class ".") class (and class func ".") func)))
;;     (kill-new path)))

;; (defun fk/django-run-test-at-point ()
;;   "Run test at point."
;;   (interactive)
;;   (fk/django-copy-path-of-test-at-point)
;;   (let ((vterm-buffer (save-window-excursion
;;                         (fk/projectile-vterm)
;;                         (current-buffer))))
;;     (if (window-live-p (get-buffer-window vterm-buffer))
;;         (select-window (get-buffer-window vterm-buffer))
;;       (fk/projectile-vterm)))
;;   (vterm-insert (format "python manage.py test --keepdb %s %s" fk/django-test-args
;;                         (substring-no-properties (pop kill-ring)))))

;; (bind-keys
;;  :map django
;;  ("c" . fk/django-copy-path-of-test-at-point)
;;  ("d" . fk/django-run-test-at-point))

;; djhtml indenter
;;
;; (with-eval-after-load 'web-mode
;;   (require 'reformatter)
;;   (reformatter-define djhtml
;;     ;; provides these commands:
;;     ;;
;;     ;; djhtml-buffer
;;     ;; djhtml-region
;;     ;; djhtml-on-save-mode
;;     :program "djhtml"
;;     :args `(,input-file "--tabwidth" "2")
;;     :stdin nil
;;     :stdout nil))

(add-hook 'dashboard-after-initialize-hook 'fk/setup-django)
#+END_SRC

* Tools
** Org
*** Org

#+BEGIN_SRC emacs-lisp
(use-package org  ; TODO: refactor org-mode config
  :init
  (setopt org-directory "~/org")  ; This is default already but lets declare it explicitly
  (setopt org-gtd-files  `(,(concat org-directory "/inbox.org")
                           ,(concat org-directory "/todos.org")
                           ,(concat org-directory "/someday.org")))
  :custom
  (org-confirm-babel-evaluate nil)
  (org-ellipsis "↴") ;; ↴, ▼, ▶, ⤵
  (org-src-window-setup 'current-window)
  (org-startup-indented t)
  (org-startup-folded 'content)  ; show only headlines (and sub headlines, recursively) at startup
  (org-startup-with-inline-images t)
  (org-image-actual-width '(400))
  (org-hierarchical-todo-statistics nil)
  (org-checkbox-hierarchical-statistics nil)
  (org-src-preserve-indentation t)
  (org-adapt-indentation nil)
  (org-tags-column -120)
  (org-imenu-depth 20)
  (org-hide-emphasis-markers t)
  (org-catch-invisible-edits 'show-and-error)
  (org-cycle-separator-lines 0)  ; Never leave empty lines between headings in collapsed view
  ;;;; Getting Things Done ;;;;
  (org-agenda-files `(,@org-gtd-files ,(concat org-directory "/agenda.org")))
  (org-complete-tags-always-offer-all-agenda-tags t)
  (org-agenda-start-on-weekday nil)
  (org-agenda-current-time-string "────────── now ──────────")
  (org-agenda-format-date (lambda (date) (concat "\n" (org-agenda-format-date-aligned date))))
  (org-agenda-prefix-format '((agenda  . "     %i %?-12t% s")
                              (todo  . " %i %-12:c")
                              (tags  . " %i %-12:c")
                              (search . " %i %-12:c")))
  (org-agenda-time-grid '((daily today require-timed remove-match)
                          (1000 1100 1200 1300 1400 1500 1600 1700 1800 1900 2000)
                          "" "················"))
  (org-deadline-warning-days 5)
  ;; (org-display-custom-times t)
  ;; (org-time-stamp-custom-formats '("<%d/%m/%Y %A>" . "<%d/%m/%Y %A %H:%M>"))
  (org-bookmark-names-plist '())  ; Do not create bookmarks
  (org-capture-templates '(("i" "Capture to inbox" entry
                            (file "inbox.org")
                            "* %?\nCREATED: %U"
                            :empty-lines 1)))
  (org-refile-targets '(("todos.org" :level . 1)
                        ("someday.org" :level . 1)
                        ("archive.org" :level . 1)
                        ("agenda.org" :level . 1)))
  (org-priority-default ?A)  ; Highest
  ;; (org-log-done 'time)
  (org-fontify-done-headline t)
  (org-log-into-drawer t)  ; Log TODO state changes into :LOGBOOK: drawer insted of directly adding lines to the subtree
  (org-todo-keywords '((sequence "TODO(t)" "WAIT(w)" "HOLD(h)" "STRT(s)"
                                 "WIP.(i)" "STAG(a)" "PROD(p)" "REPT(r)"
                                 "|" "DONE(d)" "CNCL(c)")))
  (org-todo-keyword-faces
   '(("TODO" :foreground "orangered2" :weight bold)
     ("WAIT" :foreground "goldenrod" :weight bold)
     ("HOLD" :foreground "#DC752F" :weight bold)
     ("STRT" :foreground "PaleGreen" :weight bold)
     ("WIP." :foreground "#86DC2F" :weight bold)
     ("REPT" :foreground "#939DA4" :weight bold)
     ("STAG" :foreground "DarkTurquoise" :weight bold)
     ("PROD" :foreground "DodgerBlue" :weight bold)))
  (org-use-fast-todo-selection 'expert)
  (org-clock-clocktable-default-properties '(:maxlevel 10))
  (org-extend-today-until 4)
  (org-clock-mode-line-total 'today)
  (org-clock-total-time-cell-format "%s")  ; remove styling to copy paste correctly
  (org-duration-format '((special . h:mm)))  ; to display 30 hours as 30:00 instead of 1d 6:00
  ;;;; Getting Things Done ;;;;
  :custom-face
  (org-ellipsis ((t (:foreground unspecified :inherit org-tag :weight light :height 0.9))))
  (org-checkbox ((t (:foreground "white"))))
  (org-level-1 ((t (:height 1.3  :weight normal))))
  (org-level-2 ((t (:height 1.2  :weight normal))))
  (org-level-3 ((t (:height 1.15 :weight normal))))
  (org-level-4 ((t (:height 1.1  :weight normal))))
  (org-level-5 ((t (:height 1.0  :weight normal))))
  (org-level-6 ((t (:height 1.0  :weight normal))))
  (org-level-7 ((t (:height 1.0  :weight normal))))
  (org-level-8 ((t (:height 1.0  :weight normal))))
  (org-drawer ((t (:foreground ,fk/light-color1))))
  (org-table ((t (:inherit org-block :foreground ,(face-foreground 'default)))))
  (org-document-title ((t (:family "AV Qest" :height 3.0))))
  (org-block-begin-line ((t (:foreground ,fk/light-color1 :background ,fk/background-color :extend t))))
  (org-document-info-keyword ((t (:foreground ,fk/background-color))))  ; Make #+TITLE: invisible
  (org-meta-line ((t (:foreground ,fk/light-color1))))  ; Less distractive
  (org-agenda-date ((t (:foreground "#ECBE7B"))))
  (org-agenda-date-today ((t (:foreground "LightGoldenrod"))))
  (org-agenda-current-time ((t (:foreground "LightGoldenrod"))))
  (org-agenda-calendar-event ((t (:weight bold))))
  :bind
  ( :map org
    ("a" . fk/org-agenda-posframe)
    ("f" . fk/org-directory-find-file)
    ("c" . (lambda () (interactive) (org-capture :keys "i")))
    ;; ("t" . fk/org-babel-tangle-block)
    ("d" . (lambda () (interactive) (org-todo "DONE")))
    :map org-mode-map
    ("C-c C-e" . org-edit-special)
    ("M-n" . org-next-visible-heading)
    ("M-p" . org-previous-visible-heading)
    ("C-x C-1" . outline-hide-other)
    ("C-c C-r" . org-refile-hydra/body)
    ("C-c C-a" . fk/org-refile-done)  ; "a" for archive
    ("C-c C-t" . fk/org-refile-trash)
    ("C-c t" . org-todo)
    ("C-c C-p" . org-priority-down)
    ("C-M-j" . org-open-at-point)
    ("C-c r" . org-shiftright)
    ("C-c l" . org-shiftleft)
    ("C-c u" . org-shiftup)
    ("C-c d" . org-shiftdown)
    ("C-c R" . org-metaright)
    ("C-c L" . org-metaleft)
    ("C-c U" . org-metaup)
    ("C-c D" . org-metadown)
    ("C-c C-x C-e" . org-set-effort)  ; ‘3:12’, ‘1:23:45’, or ‘1d3h5min’
    :map org-src-mode-map
    ("C-c C-c" . org-edit-src-exit)
    ;; Better, intuitive movement when selecting a date for schedule or deadline
    :map org-read-date-minibuffer-local-map  ; TODO: these may not be necessary anymore
    ("C-n". (lambda () (interactive) (org-eval-in-calendar '(calendar-forward-week 1))))
    ("C-p". (lambda () (interactive) (org-eval-in-calendar '(calendar-backward-week 1))))
    ("C-f". (lambda () (interactive) (org-eval-in-calendar '(calendar-forward-day 1))))
    ("C-b". (lambda () (interactive) (org-eval-in-calendar '(calendar-backward-day 1))))
    ("C-v". (lambda () (interactive) (org-eval-in-calendar '(calendar-forward-month 1))))
    ("M-v". (lambda () (interactive) (org-eval-in-calendar '(calendar-backward-month 1)))))
  :hook
  (org-babel-after-execute . org-redisplay-inline-images)
  (org-mode . (lambda () (add-hook 'before-save-hook 'org-redisplay-inline-images nil t)))
  (org-after-refile-insert . (lambda () (fk/org-sort-by-priority) (save-buffer)))
  (org-capture-mode . delete-other-windows)  ; make capture buffer fullscreen
  ;; (org-agenda-mode . (lambda () (require 'org-habit)))
  :config
  (add-to-list 'org-emphasis-alist '("#" (:box '(:line-width -1))))  ; FIXME: does not work.
  (setf (cdr (assoc "*" org-emphasis-alist)) '((:weight extra-bold :foreground "#DDDDDD")))

  (defun fk/org-directory-find-file ()
    "Call `find-file' in `org-directory'."
    (interactive)
    (let ((default-directory (concat org-directory "/")))
      (call-interactively 'find-file)))

  (defun fk/org-babel-load-languages ()
    "Load languages I use."
    (interactive)
    (org-babel-do-load-languages 'org-babel-load-languages '((python . t)
                                                             (emacs-lisp . t)
                                                             (shell . t))))

  (defun fk/org-babel-tangle-block()
    (interactive)
    (let ((current-prefix-arg '(4)))
      (call-interactively 'org-babel-tangle)))

  (with-eval-after-load 'org-agenda
    (bind-key "m" 'org-agenda-month-view org-agenda-mode-map))

  ;; Beautify org mode
  (font-lock-add-keywords 'org-mode
                          '(("^ *\\([-]\\) "
                             (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))
  (font-lock-add-keywords 'org-mode
                          '(("^ *\\([+]\\) "
                             (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "◦"))))))
  (defface org-checkbox-done-text
    '((t (:inherit 'font-lock-comment-face :slant normal)))
    "Face for the text part of a checked org-mode checkbox.")

  (font-lock-add-keywords
   'org-mode
   `(("^[ \t]*\\(?:[-+*]\\|[0-9]+[).]\\)[ \t]+\\(\\(?:\\[@\\(?:start:\\)?[0-9]+\\][ \t]*\\)?\\[\\(?:X\\|\\([0-9]+\\)/\\2\\)\\][^\n]*\n\\)"
      1 'org-checkbox-done-text prepend))
   'append)

  (defun fk/org-insert-created-time ()
    (interactive)
    (insert "CREATED: " (format-time-string (org-time-stamp-format t t) (current-time))))

  (defun fk/org-refile-fixed-location (file headline)
    "Refile headline without selecting from refile-targets."
    (let ((pos (save-window-excursion
                 (find-file file)
                 (org-find-exact-headline-in-buffer headline))))
      (org-refile nil nil (list headline file nil pos))))

  (defun fk/org-refile-fixed-location-with-closed-timestamp (file headline)
    "Refile headline without selecting from refile-targets. Add
    \"CLOSED\" timestamp info."
    (add-hook 'org-after-refile-insert-hook (lambda () (org-add-planning-info 'closed (org-current-effective-time))) -100)
    (fk/org-refile-fixed-location file headline)
    (remove-hook 'org-after-refile-insert-hook (lambda () (org-add-planning-info 'closed (org-current-effective-time)))))

  (defun fk/org-refile-done ()
    (interactive)
    (fk/org-refile-fixed-location-with-closed-timestamp "archive.org" "Done"))

  (defun fk/org-refile-trash ()
    (interactive)
    (fk/org-refile-fixed-location-with-closed-timestamp "archive.org" "Trash"))

  (set-face-attribute 'org-mode-line-clock nil :inherit 'default)

  ;; (defun fk/org-clock-update-mode-line (&optional _)
  ;;   "Display org-clock info in echo area. See `fk/minibuffer-modeline-update'."
  ;;   (if org-clock-effort
  ;;       (org-clock-notify-once-if-expired)
  ;;     (setq org-clock-task-overrun nil))
  ;;   (setq fk/org-clock-string
  ;;         (let ((clock-string (org-clock-get-clock-string)))
  ;;           (if (and (> org-clock-string-limit 0)
  ;;                    (> (length clock-string) org-clock-string-limit))
  ;;               (substring clock-string 0 org-clock-string-limit)
  ;;             clock-string)))
  ;;   (if (and org-clock-task-overrun org-clock-task-overrun-text)
  ;;       (setq fk/org-clock-string
  ;;             (concat (propertize
  ;;                      org-clock-task-overrun-text
  ;;                      'face 'org-mode-line-clock-overrun)
  ;;                     fk/org-clock-string))))

  ;; (advice-add 'org-clock-update-mode-line :override 'fk/org-clock-update-mode-line)

  (add-hook 'org-clock-in-hook (lambda ()
                                 (interactive)
                                 (setq fk/org-clocking-buffer (org-clocking-buffer))
                                 (save-buffer)))
  (add-hook 'org-clock-out-hook (lambda ()
                                  (interactive)
                                  (with-current-buffer fk/org-clocking-buffer
                                    (save-buffer))
                                  (setq fk/org-clocking-buffer nil)
                                  (setq fk/org-clock-string "")))
  (add-hook 'org-clock-cancel-hook (lambda ()
                                     (interactive)
                                     (with-current-buffer fk/org-clocking-buffer
                                       (save-buffer))
                                     (setq fk/org-clocking-buffer nil)
                                     (setq fk/org-clock-string "")))

  (defun fk/org-clock-out-and-update-report (orig-func &rest args)
    "Update org clock report table after clock out."
    (interactive)
    (let ((buffer (org-clocking-buffer)))
      (apply orig-func args)  ; clock out
      ;; `org-clock-report' updates the first table in the buffer
      ;; when called with a prefix argument
      (save-excursion
        (with-current-buffer buffer
          (let ((current-prefix-arg 4))
            (call-interactively 'org-clock-report)
            (save-buffer))))))

  (advice-add 'org-clock-out :around 'fk/org-clock-out-and-update-report)

  ;; Similar to `fk/org-clock-out-and-update-report',
  ;; I added this file local variable to my time tracking file to update report on save:
  ;; # Local Variables:
  ;; # eval: (add-hook 'before-save-hook (lambda () (save-excursion (let ((current-prefix-arg 4)) (call-interactively 'org-clock-report)))) :local t)
  ;; # End:

  (defun fk/time-to-minutes (time)
    "Convert a time string in 'hour:minute' format to minutes."
    (let* ((time-list (split-string time ":"))
           (hours (string-to-number (car time-list)))
           (minutes (string-to-number (cadr time-list))))
      (+ (* hours 60) minutes)))

  (defun fk/number-of-weekdays-in-a-month (year month &optional until-today)
    "Returns the number of weekdays in the given YEAR and MONTH."
    (require 'calendar)
    (let ((weekdays '(1 2 3 4 5))  ; 0 sun 1 mon 2 tue 3 wed 4 thu 5 fri 6 sat
          (count 0))
      (dotimes (day (if until-today (nth 3 (decode-time (current-time)))
                      (calendar-last-day-of-month month year)))
        (message "%s" day)
        (when (memq (calendar-day-of-week `(,month ,(1+ day) ,year)) weekdays)
          (setq count (1+ count))))
      count))

  (defun fk/org-clocktable-total-time-in-minutes ()
    "Returns total time in an org clocktable after point in minutes."
    (let ((time-string (save-excursion
                         (search-forward "Total time")
                         (org-table-next-field)
                         (org-table-get nil nil))))
      (fk/time-to-minutes time-string)))

  (defun fk/calculate-average-working-hour (year month until-today)
    "Calculates average working hour by dividing total time to weekday count."
    (interactive "nEnter year: \nnEnter month: \nSUntil now (type nil for false): ")
    (let* ((total-time (fk/org-clocktable-total-time-in-minutes))
           (weekday-count (fk/number-of-weekdays-in-a-month year month until-today))
           (average-working-minutes (/ total-time weekday-count)))
      (message "Average working hour: %s hours %s minutes"
               (/ average-working-minutes 60) (mod average-working-minutes 60)))))
#+END_SRC

*** Org Super Agenda

#+BEGIN_SRC emacs-lisp
(use-package org-super-agenda
  :custom
  (org-super-agenda-groups '((:name "Calendar"  :time-grid t)
                             (:name "Deadlines" :deadline  t)
                             (:name "Scheduled" :scheduled t)))
  :hook
  (dashboard-after-initialize . org-super-agenda-mode))
#+END_SRC

*** Org QL

#+BEGIN_SRC emacs-lisp
(use-package org-ql
  :commands org-ql-search org-ql-view
  :bind
  ( :map org
    ("q" . org-ql-view))
  :config
  (with-eval-after-load 'org-ql-view
    (keymap-set org-ql-view-map "q" 'quit-window)

    (defmacro fk/org-ql-view (title query)
      `'(,title
         :title ,title
         :buffers-files ,org-gtd-files
         :query ,query
         :super-groups ((:auto-parent))
         :sort (priority)))

    (setopt org-ql-views
            `(,(fk/org-ql-view "Effort <=15min"         (effort "<=" "15min"))
              ,(fk/org-ql-view "Effort >15min <=30min"  (and (effort ">" "15min") (effort "<=" "30min")))
              ,(fk/org-ql-view "Effort >30min <=1h"     (and (effort ">" "30min") (effort "<=" "1h")))
              ,(fk/org-ql-view "Effort >1h <=2h"        (and (effort ">" "1h") (effort "<=" "2h")))
              ,(fk/org-ql-view "Effort >2h <=4h"        (and (effort ">" "2h") (effort "<=" "4h")))
              ,(fk/org-ql-view "Effort >4h"             (effort ">" "4h"))))))
#+END_SRC

*** Custom Functions
**** org-screenshot

#+BEGIN_SRC emacs-lisp
(defun fk/org-screenshot ()
  ;; fork from: https://delta.re/org-screenshot/
  ;; https://github.com/kadircancetin/.emacs.d
  "Take a screenshot into a time stamped unique-named file in the
  same directory as the org-buffer and insert a link to this file."
  (interactive)
  (when (eq major-mode 'org-mode)
    (suspend-frame)
    (run-at-time
     "500 millisec" nil  ; I have animation when minimize window
     (lambda ()
       (org-display-inline-images)
       (setq filename
             (concat
              (make-temp-name
               (concat (file-name-nondirectory (buffer-file-name))
                       "_imgs/"
                       (format-time-string "%Y%m%d_%H%M%S_")) ) ".png"))
       (unless (file-exists-p (file-name-directory filename))
         (make-directory (file-name-directory filename)))
       ;; take screenshot
       (if (eq system-type 'darwin)
           (call-process "screencapture" nil nil nil "-i" filename))
       (if (eq system-type 'gnu/linux)
           (call-process "import" nil nil nil filename))
       ;; insert into file if correctly taken
       (if (file-exists-p filename)
           (insert (concat "[[file:" filename "]]")))
       (org-remove-inline-images)
       (org-display-inline-images)
       (other-frame 0)))))
#+END_SRC

**** org-indent-src-block

#+BEGIN_SRC emacs-lisp
(defun fk/org-indent-src-block ()
  (interactive)
  (org-edit-special)
  (fk/indent-buffer)
  (org-edit-src-exit))
#+END_SRC

**** org-sort-by-priority

#+BEGIN_SRC emacs-lisp
(defun fk/org-sort-by-priority ()
  "Sort entries in level=2 by priority."
  (interactive)
  (org-map-entries (lambda () (condition-case nil
                                  (org-sort-entries nil ?p)
                                (error nil)))
                   "LEVEL=1")
  (org-set-startup-visibility))
#+END_SRC

**** org-agenda-posframe

#+BEGIN_SRC emacs-lisp
(defun fk/org-agenda-posframe ()
  "`org-agenda-list' in a posframe. Quit with 'q' as usual."
  (interactive)
  (save-window-excursion
    (org-agenda-list)
    (fk/darken-background))
  (let ((frame (posframe-show org-agenda-buffer
                              :poshandler 'posframe-poshandler-frame-center
                              :border-width 30
                              :border-color fk/dark-color)))
    (x-focus-frame frame)
    (with-current-buffer org-agenda-buffer
      (setq-local cursor-type 'box))))
#+END_SRC

*** Org Bullets

#+BEGIN_SRC emacs-lisp
(use-package org-bullets
  :custom
  (org-bullets-bullet-list '("⁖"))
  ;;;; Alternatives
  ;; (org-bullets-bullet-list '("①" "②" "③" "④" "⑤" "⑥" "⑦" "⑧" "⑨"))
  ;; (org-bullets-bullet-list '("➀" "➁" "➂" "➃" "➄" "➅" "➆" "➇" "➈"))
  ;; (org-bullets-bullet-list '("❶" "❷" "❸" "❹" "❺" "❻" "❼" "❽" "❾"))
  ;; (org-bullets-bullet-list '("➊" "➋" "➌" "➍" "➎" "➏" "➐" "➑" "➒"))
  ;; (org-bullets-bullet-list '("⒈" "⒉" "⒊" "⒋" "⒌" "⒍" "⒎" "⒏" "⒐"))
  :hook
  (org-mode . org-bullets-mode))
#+END_SRC

*** Toc Org

#+BEGIN_SRC emacs-lisp
(use-package toc-org
  :vc (toc-org :url "https://github.com/KaratasFurkan/toc-org"
               :branch "insert-silently")
  :custom
  (toc-org-max-depth 10)
  (toc-org-insert-silently t)
  :hook
  (org-mode . toc-org-mode))
#+END_SRC

*** Org Babel Async

#+BEGIN_SRC emacs-lisp
(use-package ob-async
  :after org)
#+END_SRC

*** Org Pomodoro

#+BEGIN_SRC emacs-lisp
(use-package org-pomodoro
  :commands org-pomodoro
  :custom
  (org-pomodoro-audio-player "ffplay")
  (org-pomodoro-manual-break t)
  (org-pomodoro-format "🍅 %s")
  (org-pomodoro-short-break-format "🍅 Short Break %s")
  (org-pomodoro-long-break-format "🍅 Long Break %s")
  (org-pomodoro-keep-killed-pomodoro-time t)
  :config
  ;; Apply args for all sounds
  (advice-add 'org-pomodoro-sound-args :override (lambda (_) "-volume 15 -nodisp -nostats -hide_banner")))
#+END_SRC

*** Org Roam

#+BEGIN_SRC emacs-lisp
(use-package org-roam
  :preface
  ;; use preface to set this even if the package is not loaded since the
  ;; directory is mentioned in a few more places in the config
  (setopt org-roam-directory "~/org/roam/")
  :bind
  ( :map org
    ("o" . org-roam-node-find))
  :hook
  (dashboard-after-initialize . org-roam-db-autosync-mode))
#+END_SRC

*** Org Fancy Priorities

#+BEGIN_SRC emacs-lisp
(use-package org-fancy-priorities
  :custom
  (org-fancy-priorities-list '("[!!!]" "[!!] " "[!]  "))  ; same length
  (org-priority-faces '((?A . (:foreground "orangered2" :weight extrabold :height 1.3))  ; org-mode variable
                        (?B . (:foreground "orange"     :weight extrabold :height 1.3))
                        (?C . (:foreground "Burlywood"  :weight extrabold :height 1.3))))
  :hook
  (org-mode . org-fancy-priorities-mode))
#+END_SRC

*** Org Tree Slide
#+BEGIN_SRC emacs-lisp
(use-package org-tree-slide
  :commands org-tree-slide-mode
  :custom
  (org-tree-slide-activate-message "")
  (org-tree-slide-deactivate-message "")
  (org-tree-slide-breadcrumbs "    >    ")
  (org-tree-slide-heading-emphasis t)
  (org-tree-slide-slide-in-waiting 0.025)
  (org-tree-slide-content-margin-top 4)
  :custom-face
  (org-tree-slide-heading-level-1 ((t (:height 1.8 :weight bold))))
  (org-tree-slide-heading-level-2 ((t (:height 1.5 :weight bold))))
  (org-tree-slide-heading-level-3 ((t (:height 1.5 :weight bold))))
  (org-tree-slide-heading-level-4 ((t (:height 1.5 :weight bold))))
  :bind
  ( :map org
    ("s" . org-tree-slide-mode)
    :map org-tree-slide-mode-map
    ("<f8>" . org-tree-slide-content)
    ("<f9>" . org-tree-slide-move-previous-tree)
    ("<f10>" . org-tree-slide-move-next-tree)
    ("<left>" . org-tree-slide-move-previous-tree)
    ("<right>" . org-tree-slide-move-next-tree)
    ("C-n" . (lambda () (interactive) (if cursor-type
                                          (next-line)
                                        (setq-local cursor-type t)
                                        (next-line)))))
  :hook
  (org-tree-slide-before-narrow . (lambda () (setq-local cursor-type nil)))
  (org-tree-slide-stop . (lambda () (setq-local cursor-type t)))
  (org-tree-slide-play . variable-pitch-mode)
  (org-tree-slide-stop . (lambda () (variable-pitch-mode -1)))
  (org-tree-slide-play . fk/hide-org-metalines-toggle)
  (org-tree-slide-stop . fk/hide-org-metalines-toggle)
  (org-tree-slide-before-narrow . org-remove-inline-images)
  (org-tree-slide-after-narrow . org-display-inline-images)
  (org-tree-slide-play . fk/org-tree-slide-update-modeline)
  (org-tree-slide-stop . fk/org-tree-slide-update-modeline)
  (org-tree-slide-mode . (lambda () (fk/adjust-font-size 40)))
  ;; (org-tree-slide-stop . (lambda () (fk/adjust-font-size -40)))
  ;; (org-tree-slide-play . (lambda () (setq-local olivetti-body-width 95) (olivetti-mode 1)))
  ;; (org-tree-slide-stop . (lambda () (setq-local olivetti-body-width 120) (olivetti-mode 1)))
  (org-tree-slide-mode . (lambda () (org-appear-mode -1)))
  (org-tree-slide-mode . (lambda () (setq olivetti-enable-borders nil) (olivetti-mode 1)))
  :config
  (defun fk/buffer-contains-substring (string)
    (save-excursion
      (save-match-data
        (goto-char (point-min))
        (and-let* ((pos (search-forward string nil t))
                   (visible (not (outline-invisible-p pos))))))))

  (setq fk/org-meta-line-hide-p nil)
  (setq fk/org-meta-line-face-remap nil)

  (defun fk/hide-org-metalines-toggle ()
    "Hide or unhide meta lines starting with \"#+\" in org-mode."
    (interactive)
    (if fk/org-meta-line-hide-p
        (face-remap-remove-relative fk/org-meta-line-face-remap)
      (setq fk/org-meta-line-face-remap (face-remap-add-relative 'org-meta-line
                                                                 :foreground fk/background-color)))
    (setq fk/org-meta-line-hide-p (not fk/org-meta-line-hide-p)))

  (defun fk/org-tree-slide-update-modeline ()
    "Show current page in modeline."
    (let ((slide-position '(:eval (format " %s " (org-tree-slide--count-slide (point))))))
      (if (org-tree-slide--active-p)
          (setq-local global-mode-string (append global-mode-string (list slide-position)))
        (setq-local global-mode-string (delete slide-position global-mode-string))))))

;; Alternative
(use-package epresent
  :commands epresent-run)
#+END_SRC

*** Org Export Twitter Bootstrap
#+BEGIN_SRC emacs-lisp
(use-package ox-twbs
  :after org)
#+END_SRC

*** Org Appear

#+BEGIN_SRC emacs-lisp
(use-package org-appear
  :hook
  (org-mode . org-appear-mode))
#+END_SRC

*** Org Rainbow Tags

#+BEGIN_SRC emacs-lisp
(use-package org-rainbow-tags
  :custom
  (org-rainbow-tags-hash-start-index 9)
  :hook
  (org-mode . (lambda () (unless (daemonp) (org-rainbow-tags-mode)))))
#+END_SRC
** Version Control
*** Magit
**** Magit

#+BEGIN_SRC emacs-lisp
(use-package magit
  :commands magit
  :custom
  (magit-section-initial-visibility-alist '((stashes . show)
                                            (unpushed . show)
                                            (pullreqs . show)
                                            (issues . show)))
  (magit-display-buffer-function 'magit-display-buffer-same-window-except-diff-v1)
  :bind
  ( :map version-control
    ("v" . magit-status)
    ("s" . magit-status)
    :map magit-mode-map
    ("o" . (lambda () (interactive)
             (call-interactively 'magit-diff-visit-file-other-window)
             (recenter-top-bottom)))
    ("C-c C-f" . magit-find-file))
  :hook
  (git-commit-setup . git-commit-turn-on-flyspell)
  (magit-mode . hack-dir-local-variables-non-file-buffer))
#+END_SRC

**** Magit Todos

#+BEGIN_SRC emacs-lisp
(use-package magit-todos
  :commands magit-todos-list
  :custom
  (magit-todos-exclude-globs '("*jquery*.js" "*min.js" "*min.css" "*.mjml"))
  (magit-todos-max-items 40)  ; It's actually 20 but needed to set x2 for some reason
  :bind
  ( :map version-control
    ("T" . magit-todos-list))
  :hook
  (magit-mode . magit-todos-mode))
#+END_SRC

**** Magit Forge

Pull Requests, Issues etc.
#+BEGIN_SRC emacs-lisp
(use-package forge
  :after magit)
;; (use-package forge
;;   :after magit
  ;; :config
  ;; (advice-add 'magit-pull-from-upstream :after
  ;;             (lambda (&rest _) (call-interactively 'forge-pull)))
  ;; (advice-add 'magit-fetch-all :after
  ;;             (lambda (&rest _) (call-interactively 'forge-pull)))

  ;; (defun fk/forge-create-pullreq--read-args ()
  ;;   (let* ((source  (magit-completing-read
  ;;                    "Source branch"
  ;;                    (magit-list-remote-branch-names)
  ;;                    ;; `magit-get-current-branch' as initial input
  ;;                    nil t (concat "origin/" (magit-get-current-branch)) 'magit-revision-history
  ;;                    (or (and-let* ((d (magit-branch-at-point)))
  ;;                          (if (magit-remote-branch-p d)
  ;;                              d
  ;;                            (magit-get-push-branch d t)))
  ;;                        (and-let* ((d (magit-get-current-branch)))
  ;;                          (if (magit-remote-branch-p d)
  ;;                              d
  ;;                            (magit-get-push-branch d t))))))
  ;;          (repo    (forge-get-repository t))
  ;;          (remote  (oref repo remote))
  ;;          (targets (delete source (magit-list-remote-branch-names remote)))
  ;;          (target  (magit-completing-read
  ;;                    ;; TODO: show history at first
  ;;                    "Target branch" targets nil t nil 'magit-revision-history
  ;;                    (let* ((d (cdr (magit-split-branch-name source)))
  ;;                           (d (and (magit-branch-p d) d))
  ;;                           (d (and d (magit-get-upstream-branch d)))
  ;;                           (d (and d (if (magit-remote-branch-p d)
  ;;                                         d
  ;;                                       (magit-get-upstream-branch d))))
  ;;                           (d (or d (concat remote "/"
  ;;                                            (or (oref repo default-branch)
  ;;                                                "master")))))
  ;;                      (car (member d targets))))))
  ;;     (list source target)))

  ;; (defun fk/forge-prepare-topic (source target)
  ;;   "Prepare topic for `forge-create-pullreq'."
  ;;   (if-let* ((target-name (upcase (string-remove-prefix "origin/" target)))
  ;;             (source-name (string-remove-prefix "origin/" source))
  ;;             (match (string-match "^[a-z]+-[0-9]+" source-name))
  ;;             (match-string (match-string-no-properties 0 source-name))
  ;;             (issue-id (when match (upcase match-string)))
  ;;             ;; Branch may not have issue-id
  ;;             (issue-id-string (if issue-id (format "%s | " issue-id) ""))
  ;;             (topic (string-remove-prefix (concat match-string "-") source-name))
  ;;             (capitalized-topic (upcase-initials (string-replace "-" " " topic))))
  ;;       (format "# %s | %s%s" target-name issue-id-string capitalized-topic)
  ;;     (format "# %s | " target-name )))  ; TODO: Get the last commit or at least branch name

  ;; (defun fk/forge--prepare-post-buffer (filename &optional header source target)
  ;;   (let ((file (magit-git-dir
  ;;                (convert-standard-filename
  ;;                 (concat "magit/posts/" filename)))))
  ;;     (make-directory (file-name-directory file) t)
  ;;     (let ((prevbuf (current-buffer))
  ;;           (resume (and (file-exists-p file)
  ;;                        (> (file-attribute-size (file-attributes file)) 0)))
  ;;           (buf (find-file-noselect file)))
  ;;       (with-current-buffer buf
  ;;         (forge-post-mode)
  ;;         (when header
  ;;           (magit-set-header-line-format header))
  ;;         (setq forge--pre-post-buffer prevbuf)
  ;;         (when resume
  ;;           (forge--display-post-buffer buf)
  ;;           (when (magit-read-char-case "A draft already exists.  " nil
  ;;                   (?r "[r]esume editing existing draft")
  ;;                   (?d "[d]iscard draft and start over" t))
  ;;             (erase-buffer)
  ;;             (setq resume nil)))
  ;;         (when (and (not resume) (string-prefix-p "new" filename))
  ;;           (let-alist (forge--topic-template
  ;;                       (forge-get-repository t)
  ;;                       (if source 'forge-pullreq 'forge-issue))
  ;;             (cond
  ;;              (.url
  ;;               (browse-url .url)
  ;;               (forge-post-cancel)
  ;;               (setq buf nil)
  ;;               (message "Using browser to visit %s instead of opening an issue"
  ;;                        .url))
  ;;              (.name
  ;;               ;; A Github issue with yaml frontmatter.
  ;;               (save-excursion (insert .text))
  ;;               (unless (re-search-forward "^title: " nil t)
  ;;                 (when (re-search-forward "^---" nil t 2)
  ;;                   (beginning-of-line)
  ;;                   (insert "title: \n")
  ;;                   (backward-char))))
  ;;              (t
  ;;               ;; Custom part:
  ;;               (insert (fk/forge-prepare-topic source target)))))))
  ;;       buf)))

  ;; ;; I just added `magit-get-current-branch' as initial input
  ;; (advice-add 'forge-create-pullreq--read-args :override 'fk/forge-create-pullreq--read-args)
  ;; ;; I just added a custom dynamic topic template: `fk/forge-prepare-topic'
  ;; (advice-add 'forge--prepare-post-buffer :override 'fk/forge--prepare-post-buffer)
  ;; )
#+END_SRC

**** Magit Delta
#+BEGIN_SRC emacs-lisp
;; (use-package magit-delta
;;   :hook (magit-mode . magit-delta-mode))
#+END_SRC

*** diff-hl

#+BEGIN_SRC emacs-lisp
(use-package diff-hl
  :custom
  (diff-hl-global-modes '(not org-mode))
  (diff-hl-ask-before-revert-hunk nil)
  :custom-face
  (diff-hl-insert ((t (:background "#224022"))))
  (diff-hl-change ((t (:background "#492949" :foreground "mediumpurple1"))))
  (diff-hl-delete ((t (:background "#492929" :foreground "orangered2"))))
  :bind
  (("M-n" . diff-hl-next-hunk)
   ("M-p" . diff-hl-previous-hunk)
   :map version-control
   ("n" . diff-hl-next-hunk)
   ("p" . diff-hl-previous-hunk)
   ("r" . diff-hl-revert-hunk))
  :hook
  (dashboard-after-initialize . global-diff-hl-mode)
  (diff-hl-mode . diff-hl-flydiff-mode)
  (magit-pre-refresh . diff-hl-magit-pre-refresh)
  (magit-post-refresh . diff-hl-magit-post-refresh))
#+END_SRC

*** Git Link

#+BEGIN_SRC emacs-lisp
(use-package git-link
  :commands git-link
  :custom
  (git-link-use-commit t)
  :bind
  ( :map version-control
    ("l" . git-link)))
#+END_SRC

*** Git Timemachine

#+BEGIN_SRC emacs-lisp
(use-package git-timemachine
  :commands git-timemachine
  :bind
  ( :map version-control
    ("t" . git-timemachine)))
#+END_SRC

*** Git Blame (vc-msg)

#+BEGIN_SRC emacs-lisp
(use-package vc-msg
  :commands vc-msg-show
  :bind
  ( :map version-control
    ("b" . vc-msg-show)))
#+END_SRC

*** Git Blame

#+BEGIN_SRC emacs-lisp
(use-package blamer
  :commands blamer-mode)
#+END_SRC

*** Dired Git Info

#+BEGIN_SRC emacs-lisp
;; (use-package dired-git-info
;;   :hook (dired-after-readin . dired-git-info-auto-enable)
;;   :config
;;   (defun dired-subtree-toggle-advice (orig-fn &rest args)
;;     "Source: https://github.com/clemera/dired-git-info/issues/9#issuecomment-1013520395"
;;     (cond ((bound-and-true-p dired-git-info-mode)
;;            (dired-git-info-mode -1)
;;            (apply orig-fn args)
;;            (dired-git-info-mode +1))
;;           (t (apply orig-fn args))))

;;   (advice-add 'dired-subtree-toggle :around 'dired-subtree-toggle-advice))
#+END_SRC
** Keycast

#+BEGIN_SRC emacs-lisp
(use-package keycast
  :commands keycast-mode
  :custom-face
  (keycast-key ((t (:box (:line-width -5 :style released-button)))))
  :config
  (define-minor-mode keycast-mode
    "Show current command and its key binding in the mode line (fix
 for use with `doom-modeline')."
    :global t
    (if keycast-mode
        (add-hook 'pre-command-hook 'keycast--update t)
      (remove-hook 'pre-command-hook 'keycast--update)))
  (add-to-list 'global-mode-string '("" keycast-mode-line " ")))
#+END_SRC

** Terminal Emulation
*** Eat (Terminal Emulator)

#+BEGIN_SRC emacs-lisp
(use-package eat
  :commands eat
  :bind
  (("C-M-t" . eat-project)
   :map eat-semi-char-mode-map
   ("M-o" . nil)
   ("M-m" . nil)
   ("M-q" . nil)
   ("C-M-o" . nil)
   ("C-M-s" . nil)
   :map eat-mode-map
   ("C-c C-e" . eat-semi-char-mode))
  :hook
  (eat-mode . fk/darken-background)
  :config
  (advice-add 'eat-emacs-mode :after (lambda ()
                                       (face-remap-add-relative 'hl-line :background fk/background-color)
                                       (hl-line-mode)))
  (advice-add 'eat-semi-char-mode :after (lambda ()
                                           (setq-local global-hl-line-mode nil)
                                           (setq-local hl-line-mode nil)
                                           (end-of-buffer)))

  (defvar docker-container-prompt-regexp "^[\\^A-Z]*root@[A-z0-9-]*:/[^#]*# ")
  (defvar python-pdb-prompt-regexp "^[\\^A-Z]*(Pdb) ")
  (defvar python-ipdb-prompt-regexp "^[\\^A-Z]*ipdb> ")

  (defface docker-container-prompt-face
    '((t (:foreground "green yellow")))
    "Face for docker container prompt in vterm.")

  (font-lock-add-keywords  ; TODO: does not work without calling `font-lock-update'
   'eat-mode
   `((,docker-container-prompt-regexp 0 'docker-container-prompt-face t)
     (,python-pdb-prompt-regexp       0 'docker-container-prompt-face t)
     (,python-ipdb-prompt-regexp      0 'docker-container-prompt-face t))
   'set))
#+END_SRC

*** Shell Pop

#+BEGIN_SRC emacs-lisp
(use-package shell-pop  ; TODO; fix wrong buffer name in first run issue
  :custom
  (shell-pop-shell-type '("eat" "*eat*" (lambda () (let ((current-prefix-arg 99)) (eat)))))
  (shell-pop-full-span t)
  :bind*
  ("M-t" . shell-pop))
#+END_SRC

** Restclient
*** Restclient

#+BEGIN_SRC emacs-lisp
(use-package restclient
  :commands restclient-mode
  :custom
  (restclient-log-request nil)
  ;;:config
  ;;(setcdr (assoc "application/json" restclient-content-type-modes) 'json-mode)
)
#+END_SRC

*** ob-restclient

#+BEGIN_SRC emacs-lisp
(use-package ob-restclient
  :after org
  :config
  ;; (org-babel-do-load-languages 'org-babel-load-languages '((restclient . t)))  ; TODO: this may slow down org load
  (add-hook 'org-babel-after-execute-hook (lambda () (let ((lang (nth 0 (org-babel-get-src-block-info))))
                                                       (when (and buffer-file-name (string= lang "restclient"))
                                                         (save-buffer))))))
#+END_SRC

*** Password Mode

#+BEGIN_SRC emacs-lisp
;; (use-package password-mode
;;   :hook
;;   (restclient-mode . password-mode)
;;   (org-mode . (lambda ()
;;                 (when (buffer-file-name)
;;                   (let ((filename (file-name-nondirectory
;;                                    (directory-file-name buffer-file-name))))
;;                     (when (or (string-match "rest" filename)
;;                               (string-match "api" filename))
;;                       (password-mode))))))
;;   :config
;;   (add-to-list 'password-mode-password-prefix-regexs "\"password\":?[[:space:]]+"))
#+END_SRC

* File Modes

#+BEGIN_SRC emacs-lisp
(use-package yaml-mode
  :mode "\\.ya?ml\\'")
#+END_SRC

* Some random must have settings

early-init.el:

#+BEGIN_SRC emacs-lisp :tangle early-init.el
;; the location of the native compilation cache
(startup-redirect-eln-cache "var/eln-cache/")
#+END_SRC

#+BEGIN_SRC emacs-lisp
(keymap-global-set "M-l" 'move-to-window-line-top-bottom)
;; TODO: test vundo or other undo packages
(keymap-global-set "C-u" 'undo)  ; TODO: setup separately with use-package
(keymap-global-set "C-S-u" 'undo-redo)
(setopt undo-limit 100mb)

(use-package org-tempo
  :ensure nil  ; don't try to install it since it's a built-in org module
  :after org)

(use-package nerd-icons-dired
  :hook
  (dired-mode . nerd-icons-dired-mode))

(use-package nerd-icons-completion
  :hook
  (vertico-mode . nerd-icons-completion-mode)
  (marginalia-mode . nerd-icons-completion-marginalia-setup))

(use-package nerd-icons-ibuffer
  :hook
  (ibuffer-mode . nerd-icons-ibuffer-mode))

(use-package multiple-cursors
  :custom
  (mc/always-run-for-all t)
  :bind*
  (("C-M-n" . mc/mark-next-like-this)
   ("C-M-p" . mc/mark-previous-like-this)
   ("C-M-S-n" . mc/skip-to-next-like-this)
   ("C-M-S-p" . mc/skip-to-previous-like-this)
   ("C-S-n" . mc/unmark-previous-like-this)
   ("C-S-p" . mc/unmark-next-like-this)
   ("C-M-<mouse-1>" . mc/add-cursor-on-click)
   ("C-x C-n" . mc/insert-numbers)))

(use-package savehist
  :config
  (savehist-mode))

(use-package marginalia
  :config
  (marginalia-mode))

(bind-keys*
 :map windows
 ("b" . balance-windows)
 ("d" . delete-window)
 ("k" . kill-buffer-and-window))

(keymap-global-set "M-a" 'backward-sexp)
(keymap-global-set "M-e" 'forward-sexp)

(with-eval-after-load 'dired
  (keymap-set dired-mode-map "C-c C-e" 'wdired-change-to-wdired-mode))

;; (use-package dirvish
;;   :config
;;   (dirvish-override-dired-mode))
#+END_SRC

* -- Local Variables --
# Local Variables:
# eval: (add-hook 'after-save-hook 'fk/tangle-config :local t)
# End:
